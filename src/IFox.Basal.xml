<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFox.Basal</name>
    </assembly>
    <members>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            指示参数将为另一个参数传递的表达式捕获为字符串。
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            初始化 CallerArgumentExpressionAttribute 类的新实例。
            </summary>
            <param name="parameterName"></param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            获取其表达式应捕获为字符串的参数的名称。
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:IFoxCAD.Basal.ParameterRebinder">
            <summary>
            参数重绑定
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            参数重绑定
            </summary>
            <param name="map">字典</param>
        </member>
        <member name="M:IFoxCAD.Basal.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">字典</param>
            <param name="expression">表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="expression">参数表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="T:IFoxCAD.Basal.PredicateBuilder">
            <summary>
            Predicate委托构造器
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.True``1">
            <summary>
            返回真的委托表达式
            </summary>
            <typeparam name="T">传入参数的泛型</typeparam>
            <returns>真</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.False``1">
            <summary>
            返回假的委托表达式
            </summary>
            <typeparam name="T">传入参数的泛型</typeparam>
            <returns>假</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            创建predicate委托
            </summary>
            <typeparam name="T">传入参数类型</typeparam>
            <param name="predicate">委托表达式</param>
            <returns>委托表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            表示并的表达式
            </summary>
            <typeparam name="T">传入参数类型</typeparam>
            <param name="first">第一个参数</param>
            <param name="second">第二个</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            表示或的表达式
            </summary>
            <typeparam name="T">传入参数类型</typeparam>
            <param name="first">第一个参数</param>
            <param name="second">第二个</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            表是否的表达式
            </summary>
            <typeparam name="T">传入参数类型</typeparam>
            <param name="expression">表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="T:IFoxCAD.Basal.SqlExpressionVisitor">
            <summary>
            sql表达式访问者类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            访问
            </summary>
            <param name="expression">表达式</param>
            <returns>表达式</returns>
            <exception cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"></exception>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            访问者绑定
            </summary>
            <param name="binding">绑定的类</param>
            <returns>绑定的类</returns>
            <exception cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"></exception>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            访问集合初始设定项
            </summary>
            <param name="initializer">集合初始设定项</param>
            <returns>集合初始设定项</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            访问一元运算符
            </summary>
            <param name="unary">一元运算符</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            访问二进制运算符
            </summary>
            <param name="binary">二进制运算符</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            访问类型
            </summary>
            <param name="typeBinary">类型</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            访问常数值
            </summary>
            <param name="constant">常数值</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            访问条件运算符
            </summary>
            <param name="conditional">条件运算符</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameter">参数</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问成员
            </summary>
            <param name="member">成员</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            访问方法调用
            </summary>
            <param name="methodCall">方法调用</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            访问表达式集合
            </summary>
            <param name="original">表达式集合</param>
            <returns>表达式只读集合</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            访问成员赋值
            </summary>
            <param name="assignment">成员赋值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            访问新对象成员的成员
            </summary>
            <param name="binding">新对象成员的成员</param>
            <returns>新对象成员的成员</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            访问成员初始化
            </summary>
            <param name="binding">成员初始化</param>
            <returns>成员初始化</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            访问成员初始化列表
            </summary>
            <param name="original">成员初始化列表</param>
            <returns>成员初始化列表</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            访问集合设定项集合
            </summary>
            <param name="original">集合设定项集合</param>
            <returns>集合设定项集合</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            访问lambda表达式
            </summary>
            <param name="lambda">lambda表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            访问构造函数
            </summary>
            <param name="expression">构造函数</param>
            <returns>构造函数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            访问成员初始化
            </summary>
            <param name="memberInit">成员初始化</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            访问集合初始化
            </summary>
            <param name="listInit">集合初始化</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            访问新数组
            </summary>
            <param name="newArray">新数组</param>
            <returns>表达式</returns>
        </member>
        <member name="M:IFoxCAD.Basal.SqlExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            访问委托调用表达式
            </summary>
            <param name="invocation">委托调用表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="T:IFoxCAD.Basal.ArrayEx">
            <summary>
            数组扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.ArrayEx.Combine2``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:IFoxCAD.Basal.ArrayEx.Deduplication``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            一维数组按规则消除<br/>
            本例适用于数值类型比较,特定规则比较<br/>
            如果是哈希比较,建议更改为:
            <![CDATA[
             HashSet<T> set = new();
             foreach (var item in listInOut)
                 set.Add(item);
            ]]>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst">传入有重复成员的数组,原数组修改</param>
            <param name="func">
            传出参数1:数组开头<br/>
            传出参数2:数组结尾<br/>
            返回值比较结尾为<see langword="true"/>就移除<br/>
            </param>
        </member>
        <member name="M:IFoxCAD.Basal.Debugx.Printl(System.Object,System.Boolean)">
            <summary>
            cad命令切换: Debugx
            </summary>
            <param name="message">打印信息</param>
            <param name="time">打印时间</param>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.CleanCache">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.GetAttribute``1(System.Enum,System.Boolean)">
            <summary>
            打印枚举的特性<see cref="T:System.ComponentModel.DescriptionAttribute"/>注释内容
            </summary>
            <param name="e">枚举</param>
            <returns>注释内容</returns>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.PrintNote(System.Enum,System.Boolean)">
            <summary>
            打印枚举的特性<see cref="T:System.ComponentModel.DescriptionAttribute"/>注释内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.EnumEx.GetDesc(System.Type,System.String)">
            <summary>
            获取字段的描述内容
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.LinkedHashMap`2">
            <summary>
            A least-recently-used cache stored like a dictionary.
            </summary>
            <typeparam name="TKey">
            The type of the key to the cached item
            </typeparam>
            <typeparam name="TValue">
            The type of the cached item.
            </typeparam>
            <remarks>
            Derived from https://stackoverflow.com/a/3719378/240845
            https://stackoverflow.com/users/240845/mheyman
            </remarks>
        </member>
        <member name="M:IFoxCAD.Basal.LinkedHashMap`2.#ctor(System.Int32,System.Action{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IFoxCAD.Basal.LinkedHashMap`2"/>
            class.
            </summary>
            <param name="capacity">
            Maximum number of elements to cache.
            </param>
            <param name="dispose">
            When elements cycle out of the cache, disposes them. May be null.
            </param>
        </member>
        <member name="P:IFoxCAD.Basal.LinkedHashMap`2.Capacity">
            <summary>
            Gets the capacity of the cache.
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LinkedHashMap`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">
            The key of the value to get.
            </param>
            <param name="value">
            When this method returns, contains the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the 
            <paramref name="value" /> parameter. This parameter is passed
            uninitialized.
            </param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> 
            contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinkedHashMap`2.Get(`0,System.Func{`1})">
            <summary>
            Looks for a value for the matching <paramref name="key"/>. If not found, 
            calls <paramref name="valueGenerator"/> to retrieve the value and add it to
            the cache.
            </summary>
            <param name="key">
            The key of the value to look up.
            </param>
            <param name="valueGenerator">
            Generates a value if one isn't found.
            </param>
            <returns>
            The requested value.
            </returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinkedHashMap`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">
            The key of the element to add.
            </param>
            <param name="value">
            The value of the element to add. The value can be null for reference types.
            </param>
        </member>
        <member name="T:IFoxCAD.Basal.LinqEx">
            <summary>
            linq 扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``2(System.Collections.Generic.IEnumerable{``0},``1@,System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="maxResult">对应的最大键值</param>
            <param name="func">转换函数</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMax``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最大键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最大键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``2(System.Collections.Generic.IEnumerable{``0},``1@,System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="minKey">对应的最小键值</param>
            <param name="func">转换函数</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByMin``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最小键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最小键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByExt``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最(小/大)键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最(小/大)键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindByExt``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            按比较器找出序列中最(小/大)键值的对应值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <param name="source">序列</param>
            <param name="comparison">比较器</param>
            <returns>最(小/大)键值的对应值</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.FindExt``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按转换函数找出序列中最(小/大)键值的对应键值
            </summary>
            <typeparam name="TValue">值</typeparam>
            <typeparam name="TKey">键</typeparam>
            <param name="source">序列</param>
            <param name="func">转换函数</param>
            <returns>最(小/大)键值</returns>
        </member>
        <member name="T:IFoxCAD.Basal.LinqEx.SpecComparer`1">
            <summary>
            自定义的比较泛型类
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            使用指定的比较器将序列按升序排序
            </summary>
            <typeparam name="T">输入泛型</typeparam>
            <typeparam name="TKey">输出泛型</typeparam>
            <param name="source">序列</param>
            <param name="keySelector">用于从元素中提取键的函数</param>
            <param name="comparison">比较器</param>
            <returns>排序的序列</returns>
        </member>
        <member name="M:IFoxCAD.Basal.LinqEx.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            使用指定的比较器将其后的序列按升序排序
            </summary>
            <typeparam name="T">输入泛型</typeparam>
            <typeparam name="TKey">输出泛型</typeparam>
            <param name="source">序列</param>
            <param name="keySelector">用于从元素中提取键的函数</param>
            <param name="comparison">比较器</param>
            <returns>排序的序列</returns>
        </member>
        <member name="T:IFoxCAD.Basal.LoopListNode`1">
            <summary>
            环链表节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IFoxCAD.Basal.LoopListNode`1.Value">
            <summary>
            取值
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.Previous">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopListNode`1.List">
            <summary>
            环链表序列
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.#ctor(`0,IFoxCAD.Basal.LoopList{`0})">
            <summary>
            环链表节点构造函数
            </summary>
            <param name="value">节点值</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.GetNext(System.Boolean)">
            <summary>
            获取当前节点的临近节点
            </summary>
            <param name="forward">搜索方向标志,<see langword="true"/>为向前搜索,<see langword="false"/>为向后搜索</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopListNode`1.Invalidate">
            <summary>
            无效化成员
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.LoopList`1">
            <summary>
            环链表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.Count">
            <summary>
            节点数
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.First">
            <summary>
            首节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.LoopList`1.Last">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            环链表构造函数
            </summary>
            <param name="values">节点迭代器</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.SetFirst(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            设置首节点
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Swap(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            交换两个节点的值
            </summary>
            <param name="node1">第一个节点</param>
            <param name="node2">第二个节点</param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Reverse">
            <summary>
            链内翻转
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ForEach(System.Func{IFoxCAD.Basal.LoopListNode{`0},System.Boolean})">
            <summary>
            从头遍历_非迭代器(此处和通用ForEach冲突,所以内部用)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.For(System.Func{System.Int32,IFoxCAD.Basal.LoopListNode{`0},System.Boolean})">
            <summary>
            从头遍历_非迭代器(扔出计数)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Contains(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            是否包含节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Contains(`0)">
            <summary>
            是否包含值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Find(`0)">
            <summary>
            查找第一个出现的节点
            </summary>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Finds(`0)">
            <summary>
            查找所有出现的节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNode(System.Func{`0,System.Boolean})">
            <summary>
            获取节点
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddFirst(`0)">
            <summary>
            在首节点之前插入节点,并设置新节点为首节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Add(`0)">
            <summary>
             在尾节点之后插入节点,并设置新节点为尾节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddLast(`0)">
            <summary>
             在尾节点之后插入节点,并设置新节点为尾节点_此函数仅为与LinkedList同名方法
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            容器内容全部加入到末尾
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddBefore(IFoxCAD.Basal.LoopListNode{`0},`0)">
            <summary>
            前面增加节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.AddAfter(IFoxCAD.Basal.LoopListNode{`0},`0)">
            <summary>
            后面增加节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.RemoveFirst">
            <summary>
            删除首节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.RemoveLast">
            <summary>
            删除尾节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Remove(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            删除此参数节点(唯一)
            </summary>
            <param name="node">指定节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.Remove(`0)">
            <summary>
            删除含有此参数节点(所有)
            </summary>
            <param name="value">将移除所有含有此值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.InternalRemove(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            删除节点_内部调用
            </summary>
            <param name="node">此值肯定存在当前链表</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0},System.Int32)">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="number"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.LinkTo(IFoxCAD.Basal.LoopListNode{`0},IFoxCAD.Basal.LoopListNode{`0},System.Int32,System.Boolean)">
            <summary>
            链接两节点,并去除这两个节点间的所有节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="number"></param>
            <param name="isFirstChanged"></param>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNodes(IFoxCAD.Basal.LoopListNode{`0})">
            <summary>
            获取节点的查询器
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetNodes">
            <summary>
            获取节点的查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.GetEnumerator">
            <summary>
            获取节点值的查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            转换为字符串_格式化实现
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ToString">
            <summary>
            转换为字符串_无参调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.LoopList`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            转换为字符串_有参调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.LoopState">
            <summary>
            控制循环结束
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.ProState">
            <summary>
            控制程序流程
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.RandomEx">
            <summary>
            随机值扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            生成一个指定范围的浮点数值<br/>
            <a href="https://www.cnblogs.com/qingheshiguang/p/15806915.html">相关链接</a>
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="minValue">范围最小浮点数值</param>
            <param name="maxValue">范围最大浮点数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Double,System.Double)">
            <summary>
            生成一个指定范围的浮点数值
            </summary>
            <param name="minValue">范围最小浮点数值</param>
            <param name="maxValue">范围最大浮点数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextBool">
            <summary>
            生成一个布尔随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextBool(System.Random)">
            <summary>
            生成一个布尔随机数<br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextString(System.String[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="arr">一个字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextString(System.Random,System.String[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="arr">一个字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Double[])">
            <summary>
            生成一个不连续或指定值的随机值
            </summary>
            <param name="arr">一个双精度值数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextDouble(System.Random,System.Double[])">
            <summary>
            生成不连续或指定值的随机值
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="arr">一个双精度值数组</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="max">范围最大整数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Random,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="max">范围最大整数值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Int32,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="min">范围的最小整数</param>
            <param name="max">范围的最大整数</param>
            <returns>返回一个介于<paramref name="min"/>与<paramref name="max"/>之间的整数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextInt(System.Random,System.Int32,System.Int32)">
            <summary>
            生成指定范围内的整数
            </summary>
            <param name="ran">一个随机值产生器</param>
            <param name="min">范围的最小整数</param>
            <param name="max">范围的最大整数</param>
            <returns>返回一个介于<paramref name="min"/>与<paramref name="max"/>之间的整数</returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextColor">
            <summary>
            生成一个随机颜色
            </summary>
            <returns>返回<see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.NextColor(System.Random)">
            <summary>
            生成一个随机颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.RandomEx.GetRandom">
            <summary>
            带有随机种子的随机数<br/>
            <a href="https://bbs.csdn.net/topics/250037962">为什么这样写随机种子呢</a>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.Timer">
            <summary>
            时间定时类
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.Timer.TimeEnum">
            <summary>
            时间单位枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.Timer.TimeEnum.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.Timer.TimeEnum.Millisecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.Timer.TimeEnum.Microsecond">
            <summary>
            微秒
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.Timer.TimeEnum.Nanosecond">
            <summary>
            纳秒
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.Timer.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            这个函数会检索性能计数器的频率.
            性能计数器的频率在系统启动时是固定的,并且在所有处理器上都是一致的
            因此，只需在应用初始化时查询频率,即可缓存结果
            在运行 Windows XP 或更高版本的系统上,该函数将始终成功,因此永远不会返回零
            </summary>
            <param name="lpFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.Timer.#ctor">
            <summary>
            构造函数
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="M:IFoxCAD.Basal.Timer.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.Timer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.Timer.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.Timer.Millisecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.Timer.Microsecond">
            <summary>
            微秒
            </summary>
        </member>
        <member name="P:IFoxCAD.Basal.Timer.Nanosecond">
            <summary>
            纳秒
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.Timer.RunTime(System.Action,IFoxCAD.Basal.Timer.TimeEnum)">
            <summary>
            计算执行委托的时间
            </summary>
            <param name="action">要执行的委托</param>
            <param name="timeEnum">时间单位</param>
            <returns>执行委托的时间</returns>
        </member>
        <member name="T:IFoxCAD.Basal.ArgumentNullEx">
            <summary>
            参数null检查类
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.ArgumentNullEx.ThrowIfNull(System.Object,System.String)">
            <summary>
            检查参数是否为 null
            </summary>
            <param name="argument">参数</param>
            <param name="paramName">参数名字</param>
        </member>
        <member name="M:IFoxCAD.Basal.ArgumentNullEx.NotNull(System.Object,System.String)">
            <summary>
            检查参数是否为 null
            </summary>
            <param name="value">参数</param>
            <param name="valueExpression">参数为null时的提示信息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPNOHEAPS">
            <summary>
            原因在于如果不采用改参数的话,有可能快照会占用整个堆的空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_INHERIT">
            <summary>
            声明快照句柄是可继承的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPHEAPLIST">
            <summary>
            在快照中包含在th32ProcessID中指定的进程的所有的堆
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPPROCESS">
            <summary>
            在快照中包含系统中所有的进程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPTHREAD">
            <summary>
            在快照中包含系统中所有的线程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPMODULE">
            <summary>
            在快照中包含在th32ProcessID中指定的进程的所有的模块
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.TH32CS.TH32CS_SNAPALL">
            <summary>
            在快照中包含系统中所有的进程和线程
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.HookType">
            <summary>
            设置的钩子类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MSGFILTER">
             <summary>
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动
             条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。
             WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通
             过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook
             监视所有应用程序消息。
            
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间
             过滤消息,这等价于在主消息循环中过滤消息。
            
             通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这
             个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循
             环里一样
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_JOURNALRECORD">
            <summary>
            WH_JOURNALRECORD Hook用来监视和记录输入事件。典型的,可以使用这
            个Hook记录连续的鼠标和键盘事件,然后通过使用WH_JOURNALPLAYBACK Hook
            来回放。WH_JOURNALRECORD Hook是全局Hook,它不能象线程特定Hook一样
            使用。WH_JOURNALRECORD是system-wide local hooks,它们不会被注射到任何行
            程地址空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_JOURNALPLAYBACK">
            <summary>
            WH_JOURNALPLAYBACK Hook使应用程序可以插入消息到系统消息队列。可
            以使用这个Hook回放通过使用WH_JOURNALRECORD Hook记录下来的连续的鼠
            标和键盘事件。只要WH_JOURNALPLAYBACK Hook已经安装,正常的鼠标和键盘
            事件就是无效的。WH_JOURNALPLAYBACK Hook是全局Hook,它不能象线程特定
            Hook一样使用。WH_JOURNALPLAYBACK Hook返回超时值,这个值告诉系统在处
            理来自回放Hook当前消息之前需要等待多长时间（毫秒）。这就使Hook可以控制实
            时事件的回放。WH_JOURNALPLAYBACK是system-wide local hooks,它们不会被
            注射到任何行程地址空间
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_KEYBOARD">
            <summary>
            在应用程序中,WH_KEYBOARD Hook用来监视WM_KEYDOWN and
            WM_KEYUP消息,这些消息通过GetMessage or PeekMessage function返回。可以使
            用这个Hook来监视输入到消息队列中的键盘消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_GETMESSAGE">
            <summary>
            应用程序使用WH_GETMESSAGE Hook来监视从GetMessage or PeekMessage函
            数返回的消息。你可以使用WH_GETMESSAGE Hook去监视鼠标和键盘输入,以及
            其它发送到消息队列中的消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CALLWNDPROC">
            <summary>
            监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之前调用
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CBT">
            <summary>
            在以下事件之前,系统都会调用WH_CBT Hook子过程,这些事件包括：
            1. 激活,建立,销毁,最小化,最大化,移动,改变尺寸等窗口事件；
            2. 完成系统指令；
            3. 来自系统消息队列中的移动鼠标,键盘事件；
            4. 设置输入焦点事件；
            5. 同步系统消息队列事件。
            Hook子过程的返回值确定系统是否允许或者防止这些操作中的一个
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_SYSMSGFILTER">
             <summary>
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动
             条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。
             WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通
             过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook
             监视所有应用程序消息。
            
             WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间
             过滤消息,这等价于在主消息循环中过滤消息。
            
             通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这
             个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循
             环里一样
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MOUSE">
            <summary>
            WH_MOUSE Hook监视从GetMessage 或者 PeekMessage 函数返回的鼠标消息。
            使用这个Hook监视输入到消息队列中的鼠标消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_HARDWARE">
            <summary>
            当调用GetMessage 或 PeekMessage 来从消息队列种查询非鼠标、键盘消息时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_DEBUG">
            <summary>
            在系统调用系统中与其它Hook关联的Hook子过程之前,系统会调用
            WH_DEBUG Hook子过程。你可以使用这个Hook来决定是否允许系统调用与其它
            Hook关联的Hook子过程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_SHELL">
             <summary>
             外壳应用程序可以使用WH_SHELL Hook去接收重要的通知。当外壳应用程序是
             激活的并且当顶层窗口建立或者销毁时,系统调用WH_SHELL Hook子过程。
             WH_SHELL 共有５钟情况：
             1. 只要有个top-level、unowned 窗口被产生、起作用、或是被摧毁；
             2. 当Taskbar需要重画某个按钮；
             3. 当系统需要显示关于Taskbar的一个程序的最小化形式；
             4. 当目前的键盘布局状态改变；
             5. 当使用者按Ctrl+Esc去执行Task Manager（或相同级别的程序）。
            
             按照惯例,外壳应用程序都不接收WH_SHELL消息。所以,在应用程序能够接
             收WH_SHELL消息之前,应用程序必须调用SystemParametersInfo function注册它自
             己
             </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_FOREGROUNDIDLE">
            <summary>
            当应用程序的前台线程处于空闲状态时,可以使用WH_FOREGROUNDIDLE
            Hook执行低优先级的任务。当应用程序的前台线程大概要变成空闲状态时,系统就
            会调用WH_FOREGROUNDIDLE Hook子过程
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_CALLWNDPROCRET">
            <summary>
            监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之后调用
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_KEYBOARD_LL">
            <summary>
            监视键盘消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.HookType.WH_MOUSE_LL">
            <summary>
            监视鼠标消息
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.WM">
            <summary>
            消息类型
            作为SendMessage和PostMessage的参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CREATE">
            <summary>
            创建一个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DESTROY">
            <summary>
            当一个窗口被破坏时发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOVE">
            <summary>
            移动一个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SIZE">
            <summary>
            改变一个窗口的大小
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ACTIVATE">
            <summary>
            一个窗口被激活或失去激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETFOCUS">
            <summary>
            一个窗口获得焦点
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KILLFOCUS">
            <summary>
            一个窗口失去焦点
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENABLE">
            <summary>
            一个窗口改变成Enable状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETREDRAW">
            <summary>
            设置窗口是否能重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETTEXT">
            <summary>
            应用程序发送此消息来设置一个窗口的文本
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETTEXT">
            <summary>
            应用程序发送此消息来复制对应窗口的文本到缓冲区
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETTEXTLENGTH">
            <summary>
            得到与一个窗口有关的文本的长度（不包含空字符）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_PAINT">
            <summary>
            要求一个窗口重画自己
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CLOSE">
            <summary>
            当一个窗口或应用程序要关闭时发送一个信号
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYENDSESSION">
            <summary>
            当用户选择结束对话框或程序自己调用ExitWindows函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUIT">
            <summary>
            用来结束程序运行
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYOPEN">
            <summary>
            当用户窗口恢复以前的大小位置时,把此消息发送给某个图标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ERASEBKGND">
            <summary>
            当窗口背景必须被擦除时（例在窗口改变大小时）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCOLORCHANGE">
            <summary>
            当系统颜色改变时,发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENDSESSION">
            <summary>
            当系统进程发出WM_QUERYENDSESSION消息后,此消息发送给应用程序,通知它对话是否结束
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SHOWWINDOW">
            <summary>
            当隐藏或显示窗口是发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ACTIVATEAPP">
            <summary>
            发此消息给应用程序哪个窗口是激活的,哪个是非激活的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_FONTCHANGE">
            <summary>
            当系统的字体资源库变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TIMECHANGE">
            <summary>
            当系统的时间变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CANCELMODE">
            <summary>
            发送此消息来取消某种正在进行的摸态（操作）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETCURSOR">
            <summary>
            如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时,就发消息给某个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEACTIVATE">
            <summary>
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHILDACTIVATE">
            <summary>
            发送此消息给MDI子窗口当用户点击此窗口的标题栏或当窗口被激活,移动,改变大小
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUEUESYNC">
            <summary>
            此消息由基于计算机的训练程序发送,通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETMINMAXINFO">
            <summary>
            此消息发送给窗口当它将要改变大小或位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_PAINTICON">
            <summary>
            发送给最小化窗口当它图标将要被重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ICONERASEBKGND">
            <summary>
            此消息发送给某个最小化窗口,仅当它在画图标前它的背景必须被重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NEXTDLGCTL">
            <summary>
            发送此消息给一个对话框程序去更改焦点位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SPOOLERSTATUS">
            <summary>
            每当打印管理列队增加或减少一条作业时发出此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DRAWITEM">
            <summary>
            当button,combobox,listbox,menu的可视外观改变时发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MEASUREITEM">
            <summary>
            当button, combo box, list box, list view control, or menu item 被创建时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_VKEYTOITEM">
            <summary>
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHARTOITEM">
            <summary>
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETFONT">
            <summary>
            当绘制文本时程序发送此消息得到控件要用的颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETFONT">
            <summary>
            应用程序发送此消息得到当前控件绘制文本的字体
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETHOTKEY">
            <summary>
            应用程序发送此消息让一个窗口与一个热键相关连
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETHOTKEY">
            <summary>
            应用程序发送此消息来判断热键与某个窗口是否有关联
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_QUERYDRAGICON">
            <summary>
            此消息发送给最小化窗口,当此窗口将要被拖放而它的类中没有定义图标,应用程序能返回一个图标或光标的句柄,当用户拖放图标时系统显示这个图标或光标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMPAREITEM">
            <summary>
            发送此消息来判定combobox或listbox新增加的项的相对位置
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMPACTING">
            <summary>
            显示内存已经很少了
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_WINDOWPOSCHANGING">
            <summary>
            窗口大小和位置将要被改变时,来调用Setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_WINDOWPOSCHANGED">
            <summary>
            窗口大小和位置已经被改变后,来调用Setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_POWER">
            <summary>
            当系统将要进入暂停状态时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COPYDATA">
            <summary>
            当一个应用程序传递数据给另一个应用程序时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CANCELJOURNA">
            <summary>
            当某个用户取消程序日志激活状态,提交此消息给程序
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NOTIFY">
            <summary>
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时,发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            当用户选择某种输入语言,或输入语言的热键改变
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INPUTLANGCHANGE">
            <summary>
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TCARD">
            <summary>
            当程序已经初始化windows帮助例程时发送此消息给应用程序
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_HELP">
            <summary>
            此消息显示用户按下了F1,如果某个菜单是激活的,就发送此消息个此窗口关联的菜单,否则就发送给有焦点的窗口,如果当前都没有焦点,就把此消息发送给当前激活的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_USERCHANGED">
            <summary>
            当用户已经登入或退出后发送此消息给所有的窗口,当用户登入或退出时系统更新用户的具体设置信息,在用户更新设置时系统马上发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NOTIFYFORMAT">
            <summary>
            公用控件,自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CONTEXTMENU">
            <summary>
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_STYLECHANGING">
            <summary>
            当调用SETWINDOWLONG函数将要改变一个或多个窗口的风格时发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_STYLECHANGED">
            <summary>
            当调用SETWINDOWLONG函数一个或多个窗口的风格后发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DISPLAYCHANGE">
            <summary>
            当显示器的分辨率改变后发送此消息给所有的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETICON">
            <summary>
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SETICON">
            <summary>
            程序发送此消息让一个新的大图标或小图标与某个窗口关联
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCCREATE">
            <summary>
            当某个窗口第一次被创建时,此消息在WM_CREATE消息发送前发送
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCDESTROY">
            <summary>
            此消息通知某个窗口,非客户区正在销毁
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCCALCSIZE">
            <summary>
            当某个窗口的客户区域必须被核算时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCHITTEST">
            <summary>
            移动鼠标/按住/释放鼠标时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCPAINT">
            <summary>
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCACTIVATE">
            <summary>
            此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_GETDLGCODE">
            <summary>
            发送此消息给某个与对话框程序关联的控件,widdows控制方位键和TAB键使输入进入此控件通过应
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMOUSEMOVE">
            <summary>
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗的边框体
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONDOWN">
            <summary>
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONUP">
            <summary>
            当用户释放鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCLBUTTONDBLCLK">
            <summary>
            当用户双击鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONDOWN">
            <summary>
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONUP">
            <summary>
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCRBUTTONDBLCLK">
            <summary>
            当用户双击鼠标右键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONDOWN">
            <summary>
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONUP">
            <summary>
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_NCMBUTTONDBLCLK">
            <summary>
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYFIRST">
            <summary>
            按下一个键 == WM_KEYDOWN
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYDOWN">
            <summary>
            按下一个键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_KEYUP">
            <summary>
            释放一个键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CHAR">
            <summary>
            按下某键,并已发出WM_KEYDOWN, WM_KEYUP消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_DEADCHAR">
            <summary>
            当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSKEYDOWN">
            <summary>
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSKEYUP">
            <summary>
            当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSDEADCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITDIALOG">
            <summary>
            在一个对话框程序被显示前发送此消息给它,通常用此消息初始化控件和执行其它任务
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_COMMAND">
            <summary>
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_SYSCOMMAND">
            <summary>
            当用户选择窗口菜单的一条命令或最大化最小化时窗口前会收到此消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_TIMER">
            <summary>
            发生了定时器事件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_HSCROLL">
            <summary>
            当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口,也发送给拥有它的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_VSCROLL">
            <summary>
            当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也,发送给拥有它的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITMENU">
            <summary>
            当一个菜单将要被激活时发送此消息,它发生在用户菜单条中的某项或按下某个菜单键,它允许程序在显示前更改菜单
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_INITMENUPOPUP">
            <summary>
            当一个下拉菜单或子菜单将要被激活时发送此消息,它允许程序在它显示前更改菜单,而不要改变全部
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MENUSELECT">
            <summary>
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MENUCHAR">
            <summary>
            当菜单已被激活用户按下了某个键（不同于加速键）,发送此消息给菜单的所有者
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_ENTERIDLE">
            <summary>
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者,一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORMSGBOX">
            <summary>
            在windows绘制消息框前发送此消息给消息框的所有者窗口,通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLOREDIT">
            <summary>
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORLISTBOX">
            <summary>
            当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORBTN">
            <summary>
            当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORDLG">
            <summary>
            当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORSCROLLBAR">
            <summary>
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CTLCOLORSTATIC">
            <summary>
            当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEWHEEL">
            <summary>
            当鼠标轮子转动时发送此消息个当前有焦点的控件
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONDBLCLK">
            <summary>
            双击鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONUP">
            <summary>
            释放鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MOUSEMOVE">
            <summary>
            移动鼠标时发生,同WM_MOUSEFIRST
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONDOWN">
            <summary>
            按下鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONUP">
            <summary>
            释放鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_LBUTTONDBLCLK">
            <summary>
            双击鼠标左键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONDOWN">
            <summary>
            按下鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONUP">
            <summary>
            释放鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_RBUTTONDBLCLK">
            <summary>
            双击鼠标右键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_MBUTTONDOWN">
            <summary>
            按下鼠标中键
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.WM.WM_CLIPBOARDUPDATE">
            <summary>
            执行复制成功
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MOVE">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.LEFTDOWN">
            <summary>
            模拟鼠标左键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.LEFTUP">
            <summary>
            模拟鼠标左键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.RIGHTDOWN">
            <summary>
            模拟鼠标右键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.RIGHTUP">
            <summary>
            模拟鼠标右键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MIDDLEDOWN">
            <summary>
            模拟鼠标中键按下
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.MIDDLEUP">
            <summary>
            模拟鼠标中键抬起
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.ABSOLUTE">
            <summary>
            标示是否采用绝对坐标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MOUSEEVENTF.WHEEL">
            <summary>
            模拟鼠标滚轮滚动操作,必须配合dwData参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_HIDE">
            <summary>
            隐藏窗口并激活其他窗口。nCmdShow
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNORMAL">
            <summary>
            正常态的窗口(非最大化和非最小化)
            激活并显示一个窗口。如果窗口被最小化或最大化,系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMINIMIZED">
            <summary>
            激活窗口并将其最小化
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMAXIMIZED">
            <summary>
            激活窗口并将其最大化
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_MAXIMIZE">
            <summary>
            最大化指定的窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNOACTIVATE">
            <summary>
            以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOW">
            <summary>
            在窗口原来的位置以原来的尺寸激活和显示窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_MINIMIZE">
            <summary>
            最小化指定的窗口并且激活在Z序中的下一个顶层窗口
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWMINNOACTIVE">
            <summary>
            窗口最小化,激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWNA">
            <summary>
            以窗口原来的状态显示窗口。激活窗口仍然维持激活状态
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_RESTORE">
            <summary>
            激活并显示窗口。如果窗口最小化或最大化,则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时,应用程序应该指定这个标志
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_SHOWDEFAULT">
            <summary>
            依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态,STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.NCmdShow.SW_FORCEMINIMIZE">
            <summary>
            在WindowNT5.0中最小化窗口,即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_WNDPROC">
            <summary>
            获取、设置窗口过程的地址
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_HINSTANCE">
            <summary>
            获取应用程序的实例句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_HWNDPARENT">
            <summary>
            获取父窗口句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_ID">
            <summary>
            获取窗口标识
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_STYLE">
            <summary>
            获取、设置窗口样式
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_EXSTYLE">
            <summary>
            获取、设置窗口扩展样式
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GWL.GWL_USERDATA">
            <summary>
            获取、设置与窗口关联的自定义数据
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDFIRST">
            <summary>
            返回的句柄标识了在Z序最高端的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在Z序最高端的最高端窗口；
            如果指定窗口是顶层窗口,则该句柄标识了在z序最高端的顶层窗口：
            如果指定窗口是子窗口,则句柄标识了在Z序最高端的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDLAST">
            <summary>
            返回的句柄标识了在z序最低端的相同类型的窗口。
            如果指定窗口是最高端窗口,则该柄标识了在z序最低端的最高端窗口：
            如果指定窗口是顶层窗口,则该句柄标识了在z序最低端的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在Z序最低端的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDNEXT">
            <summary>
            返回的句柄标识了在Z序中指定窗口下的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在指定窗口下的最高端窗口：
            如果指定窗口是顶层窗口,则该句柄标识了在指定窗口下的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在指定窗口下的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_HWNDPREV">
            <summary>
            返回的句柄标识了在Z序中指定窗口上的相同类型的窗口。
            如果指定窗口是最高端窗口,则该句柄标识了在指定窗口上的最高端窗口；
            如果指定窗口是顶层窗口,则该句柄标识了在指定窗口上的顶层窗口；
            如果指定窗口是子窗口,则句柄标识了在指定窗口上的同属窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_OWNER">
            <summary>
            返回的句柄标识了指定窗口的所有者窗口（如果存在）。
            GW_OWNER与GW_CHILD不是相对的参数,没有父窗口的含义,如果想得到父窗口请使用GetParent()。
            例如：例如有时对话框的控件的GW_OWNER,是不存在的。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_CHILD">
            <summary>
            如果指定窗口是父窗口,则获得的是在Tab序顶端的子窗口的句柄,否则为NULL。
            函数仅检查指定父窗口的子窗口,不检查继承窗口。
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.GetWindowCmd.GW_ENABLEDPOPUP">
            <summary>
            （WindowsNT 5.0）返回的句柄标识了属于指定窗口的处于使能状态弹出式窗口（检索使用第一个由GW_HWNDNEXT 查找到的满足前述条件的窗口）；
            如果无使能窗口,则获得的句柄与指定窗口相同。
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.MouseDown">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.MouseUp">
            <summary>
            松开鼠标事件
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.MouseMove">
            <summary>
            鼠标移动事件
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.MouseWheel">
            <summary>
            鼠标滚轮事件
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.Click">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="E:IFoxCAD.Basal.MouseHook.DoubleClick">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.Vote">
            <summary>
            否决本次输入:设置不向下回调
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MouseHook.HookProc">
            不要试图省略此变量,否则将会导致GC变量池满后释放<br/>
            提示:激活 CallbackOnCollectedDelegate 托管调试助手(MDA)
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.#ctor(System.Int32)">
            <summary>
            安装鼠标钩子
            </summary>
            <param name="setLowLevel">低级钩子超时时间</param>
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.SetHook(System.Boolean)">
            <summary>
            设置钩子
            </summary>
            <param name="processHook">false进程钩子,true全局钩子</param>
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.HookTask(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            钩子的消息处理
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns>false不终止回调,true终止回调</returns>
        </member>
        <member name="T:IFoxCAD.Basal.MouseHook.MouseHookStruct">
            <summary>
            Hook鼠标数据结构
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MouseHook.MouseHookStruct.Point">
            <summary>
            鼠标在屏幕上的x,y坐标
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MouseHook.MouseHookStruct.hWnd">
            <summary>
            点击窗体的句柄
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MouseHook.MouseHookStruct.wHitTestCode">
            <summary>
            <see cref="F:IFoxCAD.Basal.WM.WM_NCHITTEST"/> 消息
            </summary>
        </member>
        <member name="F:IFoxCAD.Basal.MouseHook.MouseHookStruct.dwExtraInfo">
            <summary>
            扩展信息,可以使用GetMessageExtraInfo的返回值
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.Dispose">
            <summary>
            手动调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.MouseHook.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取要引入的函数,将符号名或标识号转换为DLL内部地址
            </summary>
            <param name="hModule">exe/dll句柄</param>
            <param name="procName">接口名</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalLock(System.IntPtr)">
            <summary>
            锁定内存
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalUnlock(System.IntPtr)">
            <summary>
            解锁内存
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalSize(System.IntPtr)">
            <summary>
            获取内存块大小
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GlobalLockTask(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            锁定和释放内存
            </summary>
            <param name="data">锁定数据对象指针</param>
            <param name="task">返回锁定的内存片段指针,锁定期间执行任务</param>
            <returns>是否锁定成功</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.BytesToStruct``1(System.Byte[],System.Int32@)">
            <summary>
            byte数组转结构体
            </summary>
            <param name="bytes">byte数组</param>
            <param name="typeSize">返回的结构大小</param>
            <returns>返回的结构体</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.BytesToStruct``1(System.Byte[])">
            <summary>
            byte数组转结构体
            </summary>
            <param name="bytes">byte数组</param>
            <returns>返回的结构体</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.StructToBytes``1(``0)">
            <summary>
            结构体转byte数组
            <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/unmanaged-types">unmanaged</a>
            </summary>
            <param name="structObj">要转换的结构体</param>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetVirtualKey(System.IntPtr)">
            <summary>
            获取输入法的虚拟键码
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetConversionStatus(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            获取输入法状态
            </summary>
            <param name="himc">输入法标识符</param>
            <param name="lpdw">输入模式</param>
            <param name="lpdw2">指向函数在其中检索句子模式值的变量的指针</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetContext(System.IntPtr)">
            <summary>
            获取指定窗口的输入法状态
            </summary>
            <param name="hwnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmSetOpenStatus(System.IntPtr,System.Boolean)">
            <summary>
            设置输入法的当前状态
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="fOpen"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.ImmGetOpenStatus(System.IntPtr)">
            <summary>
            输入法打开状态
            </summary>
            <param name="hwnd"></param>
            <returns>非0打开,0关闭;(true中文,false英文)</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetClientRect(System.IntPtr,IFoxCAD.Basal.WindowsAPI.IntRect@)">
            <summary>
            获取窗口客户区的大小,客户区为窗口中除标题栏,菜单栏之外的地方
            </summary>
            <param name="hwnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            查找主线程<br/>
            代替<see cref="M:System.AppDomain.GetCurrentThreadId"/><br/>
            托管线程和他们不一样: <see cref="!:Thread.CurrentThread.ManagedThreadId"/>
            </summary>
            <param name="hWnd">主窗口</param>
            <param name="lpdwProcessId">进程ID</param>
            <returns>线程ID</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.SetFocus(System.IntPtr)">
            <summary>
            设置焦点
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetForegroundWindow">
            <summary>
            获取当前窗口
            </summary>
            <returns>当前窗口标识符</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            将一个消息的组成部分合成一个消息并放入对应线程消息队列的方法
            </summary>
            <param name="hhwnd">控件句柄</param>
            <param name="msg">消息是什么。键盘按键、鼠标点击还是其他</param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.KeybdEvent(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            发送击键
            </summary>
            <param name="bVk"></param>
            <param name="bScan"></param>
            <param name="dwFlags"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetWindowTextLength(System.IntPtr)">
            <summary>
            获取窗口文字的长度
            </summary>
            <param name="hWnd">窗口标识符</param>
            <returns>文字长度</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗口的标题
            </summary>
            <param name="hWnd">窗口标识符</param>
            <param name="text">窗口文字</param>
            <param name="count">文字长度</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetKeyboardLayout(System.Int32)">
            <summary>
            获取某个线程的输入法布局
            </summary>
            <param name="threadid">线程ID</param>
            <returns>布局码</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetKeyState(System.Int32)">
            <summary>
            获取按键的当前状态
            </summary>
            <param name="nVirtKey">按键虚拟代码</param>
            <returns>表示没按下&gt;0;按下&lt;0</returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            检索指定窗口所属的类的名称。
            </summary>
            <param name="hWnd">窗口标识符</param>
            <param name="lpClassName"></param>
            <param name="nMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.GetGUIThreadInfo(System.UInt32,IFoxCAD.Basal.WindowsAPI.GuiThreadInfo@)">
            <summary>
            获取线程对应的窗体信息
            </summary>
            <param name="idThread">线程</param>
            <param name="lpgui"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Basal.WindowsAPI.GuiThreadInfo">
            <summary>
            获取线程对应的窗体信息
            </summary>
        </member>
        <member name="T:IFoxCAD.Basal.WindowsAPI.KeyboardHookStruct">
            <summary>
            Hook键盘数据结构
            </summary>
        </member>
        <member name="M:IFoxCAD.Basal.WindowsAPI.CheckLowLevelHooksTimeout(System.Int32)">
            <summary>
            注册表增加低级钩子超时处理,防止系统不允许,
            否则:偶发性出现 键盘钩子不能用了,而且退出时产生 1404 错误
            https://www.cnblogs.com/songr/p/5131655.html
            </summary>
        </member>
    </members>
</doc>
