<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFox.CAD.ACAD</name>
    </assembly>
    <members>
        <member name="T:IFoxCAD.Cad.Graph">
            <summary>
            无权无向图实现
            IEnumerable 枚举所有顶点;
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Graph.vertices">
            <summary>
            存储所有节点的字典,key为顶点的类型,value为邻接表,类型是hashset,不可重复添加点
            </summary>
            <value></value>
        </member>
        <member name="F:IFoxCAD.Cad.Graph.edges">
            <summary>
            邻接边表,key为顶点的类型,value为邻接边表,类型是hashset,不可重复添加边
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Graph.vertexs">
            <summary>
            为加快索引,引入hash检索
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Graph.VerticesCount">
            <summary>
            节点数量
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Graph.ReferenceVertex">
            <summary>
            Returns a reference vertex.
            Time complexity: O(1).
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Graph.insertCount">
            <summary>
            目前点增加点的顺序号,这个点号不随删点而减少的
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.AddVertex(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            向该图添加一个新顶点,但是无边;
            </summary>
            <param name="pt">点</param>
            <returns>创建的顶点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.AddEdge(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            向该图添加一个边;
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.RemoveVertex(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            从此图中删除现有顶点;
            </summary>
            <param name="pt">点</param>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.RemoveEdge(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            从此图中删除一条边;
            </summary>
            <param name="curve">曲线</param>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.HasEdge(IFoxCAD.Cad.IGraphVertex,IFoxCAD.Cad.IGraphVertex)">
            <summary>
            我们在给定的来源和目的地之间是否有边？
            </summary>
            <param name="source">起点</param>
            <param name="dest">终点</param>
            <returns>有边返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.GetEdge(IFoxCAD.Cad.IGraphVertex,IFoxCAD.Cad.IGraphVertex)">
            <summary>
            获取边
            </summary>
            <param name="source">起点</param>
            <param name="dest">终点</param>
            <returns>边</returns>
            <exception cref="T:System.ArgumentException">传入的点不在图中时抛出参数异常</exception>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.ContainsVertex(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            是否存在顶点,此函数目前未发现有啥用
            </summary>
            <param name="value">顶点</param>
            <returns>存在顶点返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.GetAdjacencyList(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            获取顶点的邻接表
            </summary>
            <param name="vertex">顶点</param>
            <returns>邻接表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.GetAdjacencyEdge(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            获取顶点的邻接边表
            </summary>
            <param name="vertex">顶点</param>
            <returns>邻接边表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.GetCurves(System.Collections.Generic.List{IFoxCAD.Cad.IGraphVertex})">
            <summary>
            根据顶点表获取曲线集合
            </summary>
            <param name="graphVertices">顶点表</param>
            <returns>曲线表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.Clone">
            <summary>
            克隆此图;目测是深克隆
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.GetEnumerator">
            <summary>
            节点迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:IFoxCAD.Cad.Graph.VerticesAsEnumberable">
            <summary>
            节点迭代器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Graph.ToReadable">
            <summary>
            输出点的邻接表的可读字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.GraphVertex">
            <summary>
            邻接表图实现的顶点;
            IEnumerable 枚举所有邻接点;
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.GraphVertex.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.GraphVertex.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.#ctor(Autodesk.AutoCAD.Geometry.Point3d,System.Int32)">
            <summary>
            邻接表图实现的顶点
            </summary>
            <param name="value">点</param>
            <param name="index">所在节点索引</param>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.Equals(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.GetHashCode">
            <summary>
            计算hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.CompareTo(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            比较大小
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.CompareTo(System.Object)">
            <summary>
            比较大小
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.op_Equality(IFoxCAD.Cad.GraphVertex,IFoxCAD.Cad.GraphVertex)">
            <summary>
            相等
            </summary>
            <param name="person1"></param>
            <param name="person2"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphVertex.op_Inequality(IFoxCAD.Cad.GraphVertex,IFoxCAD.Cad.GraphVertex)">
            <summary>
            不相等
            </summary>
            <param name="person1"></param>
            <param name="person2"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.GraphEdge">
            <summary>
            无向图中边的定义
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.GraphEdge.TargetVertex">
            <summary>
            顶点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.GraphEdge.TargetEdge">
            <summary>
            边
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.#ctor(IFoxCAD.Cad.IGraphVertex,Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            无向图中边的定义
            </summary>
            <param name="target">下一点</param>
            <param name="edge">下一点之间的曲线</param>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.Equals(IFoxCAD.Cad.GraphEdge)">
            <summary>
            是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.GetHashCode">
            <summary>
            获取hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.op_Equality(IFoxCAD.Cad.GraphEdge,IFoxCAD.Cad.GraphEdge)">
            <summary>
            相等
            </summary>
            <param name="person1"></param>
            <param name="person2"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.GraphEdge.op_Inequality(IFoxCAD.Cad.GraphEdge,IFoxCAD.Cad.GraphEdge)">
            <summary>
            不相等
            </summary>
            <param name="person1"></param>
            <param name="person2"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.DepthFirst">
            <summary>
            深度优先搜索;
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DepthFirst.Curve3ds">
            <summary>
            存储所有的边
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DepthFirst.FindAll(IFoxCAD.Cad.IGraph)">
            <summary>
            找出所有的路径
            </summary>
            <param name="graph">图</param>
        </member>
        <member name="M:IFoxCAD.Cad.DepthFirst.Dfs(IFoxCAD.Cad.IGraph,IFoxCAD.Basal.LinkedHashSet{IFoxCAD.Cad.IGraphVertex},System.Collections.Generic.HashSet{IFoxCAD.Cad.IGraphVertex})">
            <summary>
            递归 DFS;
            </summary>
            <param name="graph">图</param>
            <param name="visited">已经遍历的路径</param>
            <param name="totalVisited"></param>
        </member>
        <member name="M:IFoxCAD.Cad.DepthFirst.RotateToSmallest(System.Collections.Generic.List{IFoxCAD.Cad.IGraphVertex})">
            <summary>
            将列表旋转到最小的值为列表起点
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.DepthFirst.Invert(System.Collections.Generic.List{IFoxCAD.Cad.IGraphVertex},IFoxCAD.Cad.IGraphVertex)">
            <summary>
            将列表反向,并旋转到起点为最小值
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.IGraph">
            <summary>
            无向图
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IGraph.VerticesCount">
            <summary>
            顶点的数量
            </summary>
            <value></value>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.ContainsVertex(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            是否存在顶点
            </summary>
            <param name="key">顶点键</param>
            <returns></returns>
        </member>
        <member name="P:IFoxCAD.Cad.IGraph.VerticesAsEnumberable">
            <summary>
            顶点的迭代器
            </summary>
            <value></value>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.HasEdge(IFoxCAD.Cad.IGraphVertex,IFoxCAD.Cad.IGraphVertex)">
            <summary>
            是否有边
            </summary>
            <param name="source">源顶点</param>
            <param name="destination">目的顶点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.Clone">
            <summary>
            图克隆函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.GetEdge(IFoxCAD.Cad.IGraphVertex,IFoxCAD.Cad.IGraphVertex)">
            <summary>
            获取边
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.GetAdjacencyList(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            邻接表
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.GetAdjacencyEdge(IFoxCAD.Cad.IGraphVertex)">
            <summary>
            邻接边表
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="P:IFoxCAD.Cad.IGraph.ReferenceVertex">
            <summary>
            当前的节点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.RemoveVertex(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            删除节点
            </summary>
            <param name="pt">节点的坐标</param>
        </member>
        <member name="M:IFoxCAD.Cad.IGraph.RemoveEdge(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            删除边
            </summary>
            <param name="curve">曲线</param>
        </member>
        <member name="T:IFoxCAD.Cad.IGraphVertex">
            <summary>
            无向图顶点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IGraphVertex.Index">
            <summary>
            顶点的键
            </summary>
            <value></value>
        </member>
        <member name="P:IFoxCAD.Cad.IGraphVertex.Data">
            <summary>
            顶点的数据
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.IEdge">
            <summary>
            无向图边
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IEdge.TargetEdge">
            <summary>
            边
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IEdge.TargetVertex">
            <summary>
            目标顶点
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadEntity">
            <summary>
            四叉树图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadEntity.#ctor(IFoxCAD.Cad.Rect)">
            <summary>
            四叉树图元
            </summary>
            <param name="box">包围盒</param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTree`1">
            <summary>
            根节点控制器
            </summary>
            <typeparam name="TEntity">类型接口约束必须有正交矩形</typeparam>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTree`1._rootNode">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTree`1.Count">
            <summary>
            四叉树节点的数目
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTree`1._points">
            <summary>
            点容器(红黑树)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.#ctor(IFoxCAD.Cad.Rect)">
            <summary>
            四叉树根节点控制器
            </summary>
            <param name="rect">四叉树矩形范围</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Insert(`0)">
            <summary>
            通过根节点插入数据项
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Query(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeSelectMode)">
            <summary>
            查询四叉树,返回给定区域的数据项
            </summary>
            <param name="rect">矩形选区查询</param>
            <param name="selectMode">查询模式</param>
            <returns>查询结果列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Remove(IFoxCAD.Cad.Rect)">
            <summary>
            删除子节点
            </summary>
            <param name="rect">根据范围删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.Remove(`0)">
            <summary>
            删除子节点
            </summary>
            <param name="ent">根据图元删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.FindNeibor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            找到附近节点图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.FindNearEntity(IFoxCAD.Cad.Rect)">
            <summary>
            找到附近图元
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTree`1.ForEach(IFoxCAD.Cad.QuadTree{`0}.QTAction)">
            <summary>
            执行四叉树中特定的行为
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTree`1.QTAction">
            <summary>
            委托:四叉树节点上执行一个操作
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeEvn">
            <summary>
            四叉树环境变量
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.MinArea">
            <summary>
            最小的节点有一个面积(一定要大于0)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.SelectMode">
            <summary>
            选择模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.QuadTreeMaximumDepth">
            <summary>
            最大深度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeEvn.QuadTreeContentsCountSplit">
            <summary>
            节点内容超过就分裂
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeNode`1">
            <summary>
            子节点
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.RightTopTree">
            <summary>
            子节点:第一象限:右上↗
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.LeftTopTree">
            <summary>
            子节点:第二象限:左上↖
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.LeftBottomTree">
            <summary>
            子节点:第三象限:左下↙
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.RightBottomTree">
            <summary>
            子节点:第四象限:右下↘
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.Nodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.NodesIsEmpty">
            <summary>
            所有子节点是空的
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Depth">
            <summary>
            节点的在四叉树的深度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeNode`1.Contents">
            (节点图元是交叉线压着的,并不是矩形范围内全部,因为这是四叉树的特性决定)
            <summary>
            本节点:内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.ContentsSubTree(System.Collections.Generic.List{`0})">
            <summary>
            本节点和旗下所有子节点:内容群
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.QuadTreeNode`1.CountSubTree">
            <summary>
            本节点和旗下所有子节点:内容群数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.#ctor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeNode{`0},System.Int32)">
            <summary>
            四叉树节点
            </summary>
            <param name="box">当前节点边界</param>
            <param name="parent">父节点</param>
            <param name="depth">节点深度</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Insert(IFoxCAD.Cad.Rect)">
            <summary>
            将原有节点插入用
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Insert(`0)">
            <summary>
            将数据项递归插入四叉树
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.CreateChildren">
            <summary>
            创建子节点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.RectSplit(IFoxCAD.Cad.Rect)">
            <summary>
            矩形分裂为四个
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Remove(`0)">
            <summary>
            删除图元
            </summary>
            <param name="easeEnt">根据图元删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Clear(IFoxCAD.Cad.QuadTreeNode{`0})">
            <summary>
            递归进入最下层节点,然后开始清理
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Remove(IFoxCAD.Cad.Rect)">
            <summary>
            删除子节点内容
            </summary>
            <param name="queryArea">根据范围删除</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.Query(IFoxCAD.Cad.Rect,System.Collections.Generic.List{`0})">
            <summary>
            查询范围内的实体
            </summary>
            <param name="queryArea">查询矩形</param>
            <param name="results">查询结果</param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetCurrentContents(IFoxCAD.Cad.Rect,System.Collections.Generic.List{`0})">
            <summary>
            获取本节点内容
            </summary>
            <param name="queryArea"></param>
            <param name="results"></param>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNearEntity(IFoxCAD.Cad.Rect)">
            <summary>
            找临近图元
            </summary>
            <param name="queryArea">查找矩形</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNeibor(IFoxCAD.Cad.Rect,IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            找临近节点的图元
            </summary>
            <param name="queryArea">查找矩形</param>
            <param name="findMode">查找什么方向</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetNearestNeighbor(IFoxCAD.Cad.QuadTreeNode{`0},IFoxCAD.Cad.QuadTreeFindMode,IFoxCAD.Cad.Rect)">
            <summary>
            查找节点的(本内容和子内容)与(查找面积)矩形中点对比,找到最近一个内容
            </summary>
            <param name="queryArea">查找面积</param>
            <param name="findMode">查找方向</param>
            <param name="queryNode">查找节点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.GetMinNode(IFoxCAD.Cad.Rect)">
            <summary>
            找包含它的最小分支
            </summary>
            <param name="queryArea">查询的矩形</param>
            <returns>节点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.FindNeiborNode(IFoxCAD.Cad.QuadTreeNode{`0},IFoxCAD.Cad.QuadTreeFindMode)">
            <summary>
            四叉树找邻居节点(相同或更大)
            </summary>
            <param name="tar">源节点</param>
            <param name="findMode">方向</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.QuadTreeNode`1.ForEach(IFoxCAD.Cad.QuadTree{`0}.QTAction)">
            <summary>
            递归全部节点(提供给根用的,所以是全部)
            </summary>
            <param name="action"></param>QTAction
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeSelectMode">
            <summary>
            四叉树选择模式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeSelectMode.IntersectsWith">
            <summary>
            碰撞到就选中
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeSelectMode.Contains">
            <summary>
            全包含才选中
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.QuadTreeFindMode">
            <summary>
            四叉树查找方向
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.QuadTreeFindMode.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.TolerancePoint2d">
            <summary>
            Linq Distinct 消重比较两点在容差范围内就去除
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TolerancePoint2d.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="tolerance">容差</param>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftLower">
            <summary>
            左下Min
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftMidst">
            <summary>
            左中
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.LeftUpper">
            <summary>
            左上
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightUpper">
            <summary>
            右上Max
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightMidst">
            <summary>
            右中
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.Midst">
            <summary>
            中间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MidstUpper">
            <summary>
            中上
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.MidstBottom">
            <summary>
            中下
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Rect.IsPoint">
            <summary>
            是一个点
            水平或垂直直线包围盒是面积是0,所以面积是0不一定是点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            矩形类
            </summary>
            <param name="left">左</param>
            <param name="bottom">下</param>
            <param name="right">右</param>
            <param name="top">上</param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.#ctor(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,System.Boolean)">
            <summary>
            构造矩形类
            </summary>
            <param name="p1"></param>
            <param name="p3"></param>
            <param name="check">是否检查大小</param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Equals(IFoxCAD.Cad.Rect,System.Double)">
            <summary>
            比较核心
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Contains(IFoxCAD.Cad.Rect)">
            <summary>
            四个点都在内部就是包含
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IntersectsWith(IFoxCAD.Cad.Rect)">
            <summary>
            一个点在内部就是碰撞
            </summary>
            <param name="rect"></param>
            <returns>true内部</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.GetCommonPoint(IFoxCAD.Cad.Rect)">
            <summary>
            获取共点
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Expand(System.Double)">
            <summary>
            四周膨胀
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IsRectAngle(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},System.Double)">
            <summary>
            是否矩形(带角度)
            </summary>
            <param name="ptList"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.DotProductValue(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            点积,求值
            <a href="https://zhuanlan.zhihu.com/p/359975221"> 1.是两个向量的长度与它们夹角余弦的积 </a>
            <a href="https://www.cnblogs.com/JJBox/p/14062009.html#_label1"> 2.求四个点是否矩形使用 </a>
            </summary>
            <param name="o">原点</param>
            <param name="a">点</param>
            <param name="b">点</param>
            <returns><![CDATA[>0方向相同,夹角0~90度;=0相互垂直;<0方向相反,夹角90~180度]]></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.IsRect(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},System.Double)">
            <summary>
            是否轴向矩形(无角度)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.GetMinMax(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            获取点集的包围盒的最小点和最大点(无角度)
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.RectAnglePointOrder(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            矩形点序逆时针排列,将min点[0],max点是[3](带角度)
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Cross(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            叉积,二维叉乘计算
            </summary>
            <param name="a">传参是向量,表示原点是0,0</param>
            <param name="b">传参是向量,表示原点是0,0</param>
            <returns>其模为a与b构成的平行四边形面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.Cross(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            叉积,二维叉乘计算
            </summary>
            <param name="o">原点</param>
            <param name="a">oa向量</param>
            <param name="b">ob向量,此为判断点</param>
            <returns>返回值有正负,表示绕原点四象限的位置变换,也就是有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.CrossAclockwise(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            叉积,逆时针方向为真
            </summary>
            <param name="o">直线点1</param>
            <param name="a">直线点2</param>
            <param name="b">判断点</param>
            <returns>b点在oa的逆时针时为 <see langword="true"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.ToPolyLine">
            <summary>
            创建矩形范围多段线
            </summary>
            <returns>多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Rect.XCollision``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,System.Boolean},System.Action{``0})">
            <summary>
            列扫碰撞检测(碰撞算法)
            比四叉树还快哦~
            </summary>
            <typeparam name="T"></typeparam>
            <param name="box">继承Rect的集合</param>
            <param name="firstProcessing">先处理集合每一个成员;返回true就跳过后续委托</param>
            <param name="collisionProcessing">碰撞,返回两个碰撞的成员;返回true就跳过后续委托</param>
            <param name="lastProcessing">后处理集合每一个成员</param>
        </member>
        <member name="T:IFoxCAD.Cad.BitmapTool">
            <summary>
            bitmap工具类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.GetDC(System.IntPtr)">
            Windows不允许程序员直接访问硬件,
            它对屏幕的操作是通过环境设备,也就是DC来完成的
            屏幕上的每一个窗口都对应一个DC,可以把DC想象成一个视频缓冲区,
            对这这个缓冲区的操作,会表现在这个缓冲区对应的屏幕窗口上.
            在窗口的DC之外,可以建立自己的DC,就是说它不对应窗口,
            这个方法就是 CreateCompatibleDC,这个DC就是一个内存缓冲区,
            通过这个DC你可以把和它兼容的窗口DC保存到这个DC中,
            就是说你可以通过它在不同的DC之间拷贝数据.
            例如:你先在这个DC中建立好数据,然后在拷贝到窗口的DC就是完成了这个窗口的刷新
            <summary>
            检索指定窗口的工作区的显示设备上下文(DC)的句柄<br/>
            显示设备上下文可以在随后的图形显示界面(GDI)函数中使用,<br/>
            以在窗口的工作区中绘制<br/>
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="hDC"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.CreateCompatibleDC(System.IntPtr)">
            <summary>
            创建DC
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <returns>If the function succeeds, the return value is a handle to the compatible bitmap (DDB). If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>Selects an object into the specified device context (DC). The new object replaces the previous object of the same type.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="hgdiobj">A handle to the object to be selected.</param>
            <returns>
              <para>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If the selected object is a region and the function succeeds, the return value is one of the following values.</para>
              <para>SIMPLEREGION - Region consists of a single rectangle.</para>
              <para>COMPLEXREGION - Region consists of more than one rectangle.</para>
              <para>NULLREGION - Region is empty.</para>
              <para>If an error occurs and the selected object is not a region, the return value is <c>NULL</c>. Otherwise, it is <c>HGDI_ERROR</c>.</para>
            </returns>
            <remarks>
              <para>This function returns the previously selected object of the specified type. An application should always replace a new object with the original, default object after it has finished drawing with the new object.</para>
              <para>An application cannot select a single bitmap into more than one DC at a time.</para>
              <para>ICM: If the object being selected is a brush or a pen, color management is performed.</para>
            </remarks>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.DeleteObject(System.IntPtr)">
            <summary>Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
            </returns>
            <remarks>
              <para>Do not delete a drawing object (pen or brush) while it is still selected into a DC.</para>
              <para>When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</para>
            </remarks>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,IFoxCAD.Cad.BitmapTool.TernaryRasterOperations)">
            <summary>
            指定的源设备环境区域中的像素进行位块转换,以传送到目标设备环境
            </summary>
            <param name="hdc">Handle to the destination device context.</param>
            <param name="nXDest">The leftmost x-coordinate of the destination rectangle (in pixels).</param>
            <param name="nYDest">The topmost y-coordinate of the destination rectangle (in pixels).</param>
            <param name="nWidth">The width of the source and destination rectangles (in pixels).</param>
            <param name="nHeight">The height of the source and the destination rectangles (in pixels).</param>
            <param name="hdcSrc">Handle to the source device context.</param>
            <param name="nXSrc">The leftmost x-coordinate of the source rectangle (in pixels).</param>
            <param name="nYSrc">The topmost y-coordinate of the source rectangle (in pixels).</param>
            <param name="dwRop">A raster-operation code.</param>
            <returns>
               <c>true</c> if the operation succeedes, <c>false</c> otherwise. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </returns>
        </member>
        <member name="T:IFoxCAD.Cad.BitmapTool.TernaryRasterOperations">
            <summary>
            A raster-operation code enum
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BitmapTool.CaptureWndImage(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            截图成为BMP
            </summary>
            <param name="hWnd">截图的窗口</param>
            <param name="action">扔出BMP执行任务</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:IFoxCAD.Cad.PlaceableMetaHeader.IsActivity">
            <summary>
            是活动式图元文件
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PlaceableMetaHeader.Wmf2Emf(System.String)">
            <summary>
            wmf转为emf<br/>
            </summary>
            <param name="wmfFile">文件路径</param>
            <returns>
            错误: <see cref="F:System.IntPtr.Zero"/>;<br/>
            成功: 返回一个增强型图元 emf文件句柄 (位于内存中)
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.Emf.Wmf2Emf(System.String)">
            <summary>
            转换wmf到emf
            </summary>
            <param name="wmfFile"></param>
        </member>
        <member name="M:IFoxCAD.Cad.Emf.CreateEnhMetaHeader">
            <summary>
            获取emf结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EnhMetaHeader.Create(System.String)">
            <summary>
            通过wmf创建
            </summary>
            <param name="wmf"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EnhMetaHeader.Create(System.IntPtr)">
            <summary>
            通过emf指针创建
            </summary>
            <param name="emf"><see cref="M:IFoxCAD.Cad.EmfTool.GetEnhMetaFileHeader(System.IntPtr,System.UInt32,System.IntPtr)"/>参数1的结构体首地址<br/>
            也就是<see cref="M:IFoxCAD.Cad.EmfTool.SetWinMetaFileBits(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)"/>的返回值
            </param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.Save(System.IntPtr,System.String)">
            <summary>
            保存
            </summary>
            <param name="clipTypeData">GetEnhMetaFileBits 参数1的结构体首地址</param>
            <param name="file">保存路径</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.GetEnhMetaFileDescription(System.IntPtr,System.UInt32,System.Text.StringBuilder)">
            <summary>
            返回对一个增强型图元文件的说明
            </summary>
            <param name="hemf">目标增强型图元文件的句柄</param>
            <param name="cchBuffer">lpszDescription缓冲区的长度</param>
            <param name="lpDescription">指定一个预先初始化好的字串缓冲区,准备随同图元文件说明载入;
            参考 CreateEnhMetaFile 函数,了解增强型图元文件说明字串的具体格式</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.GetEnhMetaFileDescriptionEx(System.IntPtr)">
            <summary>
            获取emf描述
            </summary>
            <param name="clipTypeData">文件句柄</param>
            <returns>描述的内容</returns>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.DRIVERVERSION">
            <summary>
            Device driver version
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.TECHNOLOGY">
            <summary>
            Device classification
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.HORZSIZE">
            <summary>
            Horizontal size in millimeters
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.VERTSIZE">
            <summary>
            Vertical size in millimeters
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.HORZRES">
            <summary>
            Horizontal width in pixels
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.VERTRES">
            <summary>
            Vertical height in pixels
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.BITSPIXEL">
            <summary>
            Number of bits per pixel
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMBRUSHES">
            <summary>
            Number of brushes the device has
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMPENS">
            <summary>
            Number of pens the device has
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMMARKERS">
            <summary>
            Number of markers the device has
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMFONTS">
            <summary>
            Number of fonts the device has
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMCOLORS">
            <summary>
            Number of colors the device supports
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PDEVICESIZE">
            <summary>
            Size required for device descriptor
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.CURVECAPS">
            <summary>
            Curve capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.LINECAPS">
            <summary>
            Line capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.POLYGONALCAPS">
            <summary>
            Polygonal capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.TEXTCAPS">
            <summary>
            Text capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.CLIPCAPS">
            <summary>
            Clipping capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.RASTERCAPS">
            <summary>
            Bitblt capabilities
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.ASPECTX">
            <summary>
            Length of the X leg
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.ASPECTY">
            <summary>
            Length of the Y leg
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.ASPECTXY">
            <summary>
            Length of the hypotenuse
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.SHADEBLENDCAPS">
            <summary>
            Shading and Blending caps
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.SIZEPALETTE">
            <summary>
            Number of entries in physical palette
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.NUMRESERVED">
            <summary>
            Number of reserved entries in palette
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.COLORRES">
            <summary>
            Actual color resolution
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PHYSICALWIDTH">
            <summary>
            Physical Width in device units
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PHYSICALHEIGHT">
            <summary>
            Physical Height in device units
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PHYSICALOFFSETX">
            <summary>
            Physical Printable Area x margin
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.PHYSICALOFFSETY">
            <summary>
            Physical Printable Area y margin
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.SCALINGFACTORX">
            <summary>
            Scaling factor x
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.SCALINGFACTORY">
            <summary>
            Scaling factor y
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.VREFRESH">
            <summary>
            Current vertical refresh rate of the display device (for displays only) in Hz
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.DESKTOPVERTRES">
            <summary>
            Vertical height of entire desktop in pixels
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.DESKTOPHORZRES">
            <summary>
            Horizontal width of entire desktop in pixels
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.EmfTool.DeviceCap.BLTALIGNMENT">
            <summary>
            Preferred blt alignment
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SetEnhMetaFileDescriptionEx(System.IntPtr@,System.String)">
            <summary>
            设置emf描述
            </summary>
            <param name="hMetaFile">emf文件句柄</param>
            <param name="desc">设置描述</param>
            <returns>新的emf指针</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SetWinMetaFileBits(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            将一个标准Windows图元文件转换成增强型图元文件
            </summary>
            <param name="nSize"><paramref name="lpMeta16Data"/>数组的长度</param>
            <param name="lpMeta16Data">
            数组包含了标准图元文件数据.<br/>
            常用 GetMetaFileBitsEx 或 GetWinMetaFileBits 函数获得
            </param>
            <param name="hdcRef">
            用于决定原始格式及图元文件分辨率的一个参考设备场景;<br/>
            采用显示器分辨率为:<see cref="F:System.IntPtr.Zero"/>
            </param>
            <param name="lpMFP">
            定义一个图元文件附加参考信息的结构<br/>
            为null时,会假定使用当前显示器的 MM_ANISOTROPIC 映射模式
            </param>
            <returns>
            错误: <see cref="F:System.IntPtr.Zero"/>;<br/>
            成功: 返回一个增强型图元emf文件的指针(位于内存中)
            </returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.GetEnhMetaFileBits(System.IntPtr,System.UInt32,System.Byte[])">
            <summary>
            获取矢量图的byte
            </summary>
            <param name="hemf"></param>
            <param name="cbBuffer"></param>
            <param name="lpbBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SetEnhMetaFileBits(System.UInt32,System.Byte[])">
            <summary>
            byte转换矢量图
            </summary>
            <param name="cbBuffer"></param>
            <param name="lpBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.DeleteEnhMetaFile(System.IntPtr)">
            <summary>
            删除矢量图
            </summary>
            <param name="hemf"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.CreateEnhMetaFile(System.IntPtr,System.String,IFoxCAD.Basal.WindowsAPI.IntRect@,System.String)">
            <summary>
            创建emf<br/>
            https://www.cnblogs.com/5iedu/p/4706327.html
            </summary>
            <param name="hdcRef">参考设备环境,null以整个屏幕为参考</param>
            <param name="szFilename">指定文件名时,创建磁盘文件(.EMF),为null时创建内存图元文件</param>
            <param name="lpRect">用于描述图元文件的大小和位置(以0.01mm为单位),可用它精确定义图元文件的物理尺寸</param>
            <param name="lpDescription">对图元文件的一段说明.包括创建应用程序的名字、一个NULL字符、对图元文件的一段说明以及两个NULL字符.</param>
            <returns>返回画布句柄DC(图元文件句柄得调用 CloseEnhMetaFile 函数)</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.PlayEnhMetaFile(System.IntPtr,System.IntPtr,IFoxCAD.Basal.WindowsAPI.IntRect@)">
            <summary>
            在指定的设备场景中画一个增强型图元文件;<br/>
            与标准图元文件不同,完成回放后,增强型图元文件会恢复设备场景以前的状态
            </summary>
            <param name="hdcRef">画布句柄</param>
            <param name="hemf">欲描绘的emf的图元文件句柄</param>
            <param name="lpRect">指定显示区域(逻辑单位)GDI会缩放图像以适应该矩形范围</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SetWindowExtEx(System.IntPtr,System.Int32,System.Int32,IFoxCAD.Basal.WindowsAPI.IntSize@)">
            <summary>
            逻辑单位设置窗口单位
            {只能在 MM_ISOTROPIC 或 MM_ANISOTROPIC 模式下使用下面两个函数}
            </summary>
            <param name="hdcRef">画布句柄</param>
            <param name="nHeight">以逻辑单位表示的新窗口区域的高度</param>
            <param name="nWidth">以逻辑单位表示的新窗口区域的宽度</param>
            <param name="lpSize">保存函数调用前窗口区域尺寸的SIZE结构地址,NULL则表示忽略调用前的尺寸</param>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SetViewportExtEx(System.IntPtr,System.Int32,System.Int32,IFoxCAD.Basal.WindowsAPI.IntSize@)">
            <summary>
            视口区域的定义
            {只能在 MM_ISOTROPIC 或 MM_ANISOTROPIC 模式下使用下面两个函数}
            </summary>
            <param name="hdcRef"></param>
            <param name="nHeight"></param>
            <param name="nWidth"></param>
            <param name="lpSize"></param>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.EnumEnhMetaFile(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,IFoxCAD.Basal.WindowsAPI.IntRect@)">
            <summary>
            旧emf绘制新的hdcEMF中(即回放)
            </summary>
            <param name="hdcRef">画布句柄</param>
            <param name="hmf">图元文件句柄</param>
            <param name="proc">回调函数</param>
            <param name="procParam">传给回调函数的额外参数</param>
            <param name="lpRect">在指定的矩形区内显示图元文件</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.CloseEnhMetaFile(System.IntPtr)">
            <summary>
            返回图元文件句柄
            </summary>
            <param name="hdcRef">画布句柄</param>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.CopyEnhMetaFile(System.IntPtr,System.String)">
            <summary>
            EMF保存到文件或者路径
            </summary>
            <param name="hemfSrc">EMF要复制的增强型图元文件的句柄</param>
            <param name="lpszFile">指向目标文件名称的指针,为NULL则将源图元文件复制到内存中</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.SaveMetaFile(System.Drawing.Imaging.Metafile,System.String)">
            <summary>
            矢量图保存
            </summary>
            <param name="file"></param>
            <param name="emfName"></param>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.ToByteArray(System.Drawing.Image)">
            <summary>
            矢量图 转换 byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.ToByteArray(System.Drawing.Imaging.Metafile)">
            <summary>
            矢量图 转换 byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EmfTool.ToMetafile(System.Byte[],System.Func{System.Drawing.Image,System.Boolean})">
            <summary>
            byte[] 转换 矢量图
            </summary>
            <param name="data"></param>
            <param name="task">返回值true删除句柄</param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.TagClipboardInfo">
            <summary>
            ARX剪贴板结构
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TagClipboardInfo.#ctor(System.String,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            cad剪贴板
            </summary>
            <param name="tmpFile">临时dwg的保存路径</param>
            <param name="insert">粘贴点</param>
        </member>
        <member name="M:IFoxCAD.Cad.TagClipboardInfo.AcedGetAcadDwgview">
            <summary>
            获取视口指针
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.AddClipboardFormatListener(System.IntPtr)">
            <summary>
            侦听剪贴板
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.RemoveClipboardFormatListener(System.IntPtr)">
            <summary>
            移除侦听剪贴板
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.SetClipboardViewer(System.IntPtr)">
            <summary>
            将CWnd加入一个窗口链
            每当剪贴板的内容发生变化时,就会通知这些窗口
            </summary>
            <param name="hWndNewViewer">句柄</param>
            <returns>返回剪贴板观察器链中下一个窗口的句柄</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.ChangeClipboardChain(System.IntPtr,System.IntPtr)">
            <summary>
            从剪贴板链中移出的窗口句柄
            </summary>
            <param name="hWndRemove">从剪贴板链中移出的窗口句柄</param>
            <param name="hWndNewNext">hWndRemove的下一个在剪贴板链中的窗口句柄</param>
            <returns>如果成功,非零;否则为0。</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.OpenClipboard(System.IntPtr)">
            <summary>
            开启剪贴板<br/>
            如果另一个窗口已经打开剪贴板,函数会失败.每次成功调用后都应有<see cref="M:IFoxCAD.Cad.ClipTool.CloseClipboard"/>调用.
            </summary>
            <param name="hWndNewOwner"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.CloseClipboard">
            <summary>
            关闭剪贴板
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.RegisterClipboardFormat(System.String)">
            <summary>
            根据数据格式获取剪贴板
            </summary>
            <param name="lpszFormat">数据格式名称</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.GetClipboardData(System.UInt32)">
            <summary>
            获取剪贴板
            </summary>
            <param name="uFormat">通常为<see cref="T:IFoxCAD.Cad.ClipboardFormat"/>但是cad有自己的位码</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.SetClipboardData(System.UInt32,System.IntPtr)">
            <summary>
            设置剪贴板
            </summary>
            <param name="uFormat">通常为<see cref="T:IFoxCAD.Cad.ClipboardFormat"/>但是cad有自己的位码</param>
            <param name="hMem">指定具有指定格式的数据的句柄,<br/>
            该参数为空则为延迟提交:<br/>
            有其他程序对剪切板中的数据进行请求时,该程序才会将指定格式的数据写入到剪切板中.
            </param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.EmptyClipboard">
            <summary>
            清空剪切板并释放剪切板内数据的句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.EnumClipboardFormats(System.UInt32)">
            <summary>
            枚举剪贴板内数据类型
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.OpenClipboardTask(System.Boolean,System.Action)">
            <summary>
            打开剪贴板<br/>
            写入之前必须清空,<br/>
            否则将导致发送 WM_DESTROYCLIPBOARD 消息到上一次剪贴板拥有者释放资源<br/>
            所以写入的时候必须一次性写入多个cf<br/>
            </summary>
            <param name="action">接收返回的栈空间指针用于释放</param>
            <param name="isWrite">true写入,false读取</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.ClipTool.GetClipboard``1(System.String,``0@)">
            <summary>
            获取剪贴板
            </summary>
            <param name="clipKey">剪贴板的索引名</param>
            <param name="tag">返回的结构</param>
        </member>
        <member name="T:IFoxCAD.Cad.ClipboardFormat">
            <summary>
            剪贴板的CF,也就是它的key
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_TEXT">
            <summary>
            Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals
            the end of the data. Use this format for ANSI text.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_BITMAP">
            <summary>
            A handle to a bitmap (<c>HBITMAP</c>).
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_METAFILEPICT">
            <summary>
            Handle to a metafile picture format as defined by the <c>METAFILEPICT</c> structure. When passing a
            <c>CF_METAFILEPICT</c> handle by means of DDE, the application responsible for deleting <c>hMem</c> should
            also free the metafile referred to by the <c>CF_METAFILEPICT</c> handle.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_SYLK">
            <summary>
            Microsoft Symbolic Link (SYLK) format.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DIF">
            <summary>
            Software Arts' Data Interchange Format.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_TIFF">
            <summary>
            Tagged-image file format.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_OEMTEXT">
            <summary>
            Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed
            (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DIB">
            <summary>
            A memory object containing a <c>BITMAPINFO</c> structure followed by the bitmap bits.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_PALETTE">
            <summary>
            Handle to a color palette. Whenever an application places data in the clipboard that depends on or assumes
            a color palette, it should place the palette on the clipboard as well. If the clipboard contains data in
            the <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_PALETTE"/> (logical color palette) format, the application should use the
            <c>SelectPalette</c> and <c>RealizePalette</c> functions to realize (compare) any other data in the
            clipboard against that logical palette. When displaying clipboard data, the clipboard always uses as its
            current palette any object on the clipboard that is in the <c>CF_PALETTE</c> format.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_PENDATA">
            <summary>
            Data for the pen extensions to the Microsoft Windows for Pen Computing.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_RIFF">
            <summary>
            Represents audio data more complex than can be represented in a CF_WAVE standard wave format.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_WAVE">
            <summary>
            Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz PCM.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_UNICODETEXT">
            <summary>
            Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character
            signals the end of the data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_ENHMETAFILE">
            <summary>
            A handle to an enhanced metafile (<c>HENHMETAFILE</c>).
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_HDROP">
            <summary>
            A handle to type <c>HDROP</c> that identifies a list of files. An application can retrieve information
            about the files by passing the handle to the <c>DragQueryFile</c> function.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_LOCALE">
            <summary>
            The data is a handle to the locale identifier associated with text in the clipboard. When you close the
            clipboard, if it contains <c>CF_TEXT</c> data but no <c>CF_LOCALE</c> data, the system automatically sets
            the <c>CF_LOCALE</c> format to the current input language. You can use the <c>CF_LOCALE</c> format to
            associate a different locale with the clipboard text.
            An application that pastes text from the clipboard can retrieve this format to determine which character
            set was used to generate the text.
            Note that the clipboard does not support plain text in multiple character sets. To achieve this, use a
            formatted text data type such as RTF instead.
            The system uses the code page associated with <c>CF_LOCALE</c> to implicitly convert from
            <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_TEXT"/> to <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_UNICODETEXT"/>. Therefore, the correct code page table is used for
            the conversion.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DIBV5">
            <summary>
            A memory object containing a <c>BITMAPV5HEADER</c> structure followed by the bitmap color space
            information and the bitmap bits.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_OWNERDISPLAY">
            <summary>
            Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive
            the <see cref="!:ClipboardMessages.WM_ASKCBFORMATNAME"/>, <see cref="!:ClipboardMessages.WM_HSCROLLCLIPBOARD"/>,
            <see cref="!:ClipboardMessages.WM_PAINTCLIPBOARD"/>, <see cref="!:ClipboardMessages.WM_SIZECLIPBOARD"/>, and
            <see cref="!:ClipboardMessages.WM_VSCROLLCLIPBOARD"/> messages. The <c>hMem</c> parameter must be <c>null</c>.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DSPTEXT">
            <summary>
            Text display format associated with a private format. The <c>hMem</c> parameter must be a handle to data
            that can be displayed in text format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DSPBITMAP">
            <summary>
            Bitmap display format associated with a private format. The <c>hMem</c> parameter must be a handle to
            data that can be displayed in bitmap format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DSPMETAFILEPICT">
            <summary>
            Metafile-picture display format associated with a private format. The <c>hMem</c> parameter must be a
            handle to data that can be displayed in metafile-picture format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_DSPENHMETAFILE">
            <summary>
            Enhanced metafile display format associated with a private format. The <c>hMem</c> parameter must be a
            handle to data that can be displayed in enhanced metafile format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_GDIOBJFIRST">
            <summary>
            Start of a range of integer values for application-defined GDI object clipboard formats. The end of the
            range is <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_GDIOBJLAST"/>. Handles associated with clipboard formats in this range are not
            automatically deleted using the <c>GlobalFree</c> function when the clipboard is emptied. Also, when using
            values in this range, the <c>hMem</c> parameter is not a handle to a GDI object, but is a handle allocated
            by the <c>GlobalAlloc</c> function with the <c>GMEM_MOVEABLE</c> flag.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_GDIOBJLAST">
            <summary>
            See <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_GDIOBJFIRST"/>.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_PRIVATEFIRST">
            <summary>
            Start of a range of integer values for private clipboard formats. The range ends with
            <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_PRIVATELAST"/>. Handles associated with private clipboard formats are not freed
            automatically, the clipboard owner must free such handles, typically in response to the
            <see cref="!:ClipboardMessages.WM_DESTROYCLIPBOARD"/> message.
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ClipboardFormat.CF_PRIVATELAST">
            <summary>
            See <see cref="F:IFoxCAD.Cad.ClipboardFormat.CF_PRIVATEFIRST"/>.
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.BulgeVertexWidth">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.X">
            <summary>
            顶点X
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.Y">
            <summary>
            顶点Y
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.Bulge">
            <summary>
            凸度
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.StartWidth">
            <summary>
            头宽
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BulgeVertexWidth.EndWidth">
            <summary>
            尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.Geometry.Point2d,System.Double,System.Double,System.Double)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.DatabaseServices.BulgeVertex)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BulgeVertexWidth.#ctor(Autodesk.AutoCAD.DatabaseServices.Polyline,System.Int32)">
            <summary>
            多段线的顶点,凸度,头宽,尾宽
            </summary>
            <param name="pl">多段线</param>
            <param name="index">子段编号</param>
        </member>
        <member name="T:IFoxCAD.Cad.CollectionEx">
            <summary>
            集合扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            对象id迭代器转换为集合
            </summary>
            <param name="ids">对象id的迭代器</param>
            <returns>对象id集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            实体迭代器转换为集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objs">实体对象的迭代器</param>
            <returns>实体集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            double 数值迭代器转换为 double 数值集合
            </summary>
            <param name="doubles">double 数值迭代器</param>
            <returns>数值集合,它没有Dispose</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            二维点迭代器转换为二维点集合
            </summary>
            <param name="pts">二维点迭代器</param>
            <returns>二维点集合,!acad记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToCollection(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            三维点迭代器转换为三维点集合
            </summary>
            <param name="pts">三维点迭代器</param>
            <returns>三维点集合,记得释放</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToList(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            对象id集合转换为对象id列表
            </summary>
            <param name="ids">对象id集合</param>
            <returns>对象id列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合,执行委托
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历集合,执行委托(允许循环中断)
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历集合,执行委托(允许循环中断,输出索引值)
            </summary>
            <typeparam name="T">集合值的类型</typeparam>
            <param name="source">集合</param>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.Contains(Autodesk.AutoCAD.EditorInput.KeywordCollection,System.String,IFoxCAD.Cad.CollectionEx.KeywordName)">
            <summary>
            含有关键字
            </summary>
            <param name="collection">关键字集合</param>
            <param name="name">关键字</param>
            <param name="keywordName">关键字容器字段名</param>
            <returns>true含有</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.GetDict(Autodesk.AutoCAD.EditorInput.KeywordCollection)">
            <summary>
            获取词典<see langword="(GlobalName"/>,<see langword="DisplayName)"/>
            <para>KeywordCollection是允许重复关键字的,没有哈希索引,在多次判断时候会遍历多次O(n),所以生成一个词典进行O(1)</para>
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.GetKeys(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            旧块名
            </summary>
            <param name="idmap"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.GetValues(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            新块名
            </summary>
            <param name="idmap"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.CollectionEx.ToDictionary(Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            转换为词典
            </summary>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.Curve2dEx">
            <summary>
            二维解析类曲线转换为二维实体曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Curve2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            按矩阵转换Ge2d曲线为Db曲线
            </summary>
            <param name="curve">Ge2d曲线</param>
            <param name="mat">曲线转换矩阵</param>
            <returns>Db曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.IsIn(Autodesk.AutoCAD.Geometry.CircularArc2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断点是否位于圆内及圆上
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <param name="pnt">二维点</param>
            <returns>位于圆内及圆上返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类圆弧转换为实体圆或者圆弧，然后进行矩阵变换
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <param name="mat">变换矩阵</param>
            <returns>实体圆或者圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆或者圆弧
            </summary>
            <param name="ca2d">二维解析类圆弧对象</param>
            <returns>实体圆或者圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCircle(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆
            </summary>
            <param name="c2d">二维解析类圆弧对象</param>
            <returns>实体圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToArc(Autodesk.AutoCAD.Geometry.CircularArc2d)">
            <summary>
            将二维解析类圆弧转换为实体圆弧
            </summary>
            <param name="a2d">二维解析类圆弧对象</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类椭圆弧转换为实体椭圆弧，然后进行矩阵变换
            </summary>
            <param name="ea2d">二维解析类椭圆弧对象</param>
            <param name="mat">变换矩阵</param>
            <returns>实体椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc2d)">
            <summary>
            将二维解析类椭圆弧转换为实体椭圆弧
            </summary>
            <param name="ea2d">二维解析类椭圆弧对象</param>
            <returns>实体椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line2d)">
            <summary>
            将二维解析类直线转换为实体类构造线
            </summary>
            <param name="line2d">二维解析类直线</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类直线转换为实体类构造线，然后进行矩阵变换
            </summary>
            <param name="line2d">二维解析类直线</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToLineSegment2d(Autodesk.AutoCAD.Geometry.Line2d,System.Double,System.Double)">
            <summary>
            将二维解析类构造线转换为二维解析类线段
            </summary>
            <param name="line2d">二维解析类构造线</param>
            <param name="fromParameter">起点参数</param>
            <param name="toParameter">终点参数</param>
            <returns>二维解析类线段</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类线段转换为实体类直线，并进行矩阵变换
            </summary>
            <param name="ls2d">二维解析类线段</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment2d)">
            <summary>
            将二维解析类线段转换为实体类直线
            </summary>
            <param name="ls2d">二维解析类线段</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve2d,Autodesk.AutoCAD.Geometry.Matrix3d)">
            <summary>
            将二维解析类BURB曲线转换为实体类样条曲线，并进行矩阵变换
            </summary>
            <param name="nc2d">二维解析类BURB曲线</param>
            <param name="mat">变换矩阵</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve2dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve2d)">
            <summary>
            将二维解析类BURB曲线转换为实体类样条曲线
            </summary>
            <param name="nc2d">二维解析类BURB曲线</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="T:IFoxCAD.Cad.Curve3dEx">
            <summary>
            三维解析类曲线转换为三维实体曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.IsEqualPoint(Autodesk.AutoCAD.Geometry.Tolerance,System.Double,System.Double)">
            <summary>
            判断两个浮点数是否相等
            </summary>
            <param name="tol">容差</param>
            <param name="d1">第一个数</param>
            <param name="d2">第二个数</param>
            <returns>两个数的差值的绝对值小于容差返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetParamsAtIntersectionPoints(Autodesk.AutoCAD.Geometry.Curve3d,System.Boolean)">
            <summary>
            获取三维解析类曲线(自交曲线)的交点参数
            </summary>
            <param name="c3d">三维解析类曲线</param>
            <returns>曲线参数的列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetSubCurve(Autodesk.AutoCAD.Geometry.Curve3d,System.Double,System.Double)">
            <summary>
            获取三维解析类子曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <param name="from">子段曲线起点参数</param>
            <param name="to">子段曲线终点参数</param>
            <returns>三维解析类曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            将三维解析类曲线转换为三维实体类曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>三维实体类曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToNurbCurve3d(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            将三维解析类曲线转换为三维解析类Nurb曲线
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>三维解析类Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.IsCircular(Autodesk.AutoCAD.Geometry.Curve3d)">
            <summary>
            判断是否为圆和椭圆
            </summary>
            <param name="curve">三维解析类曲线</param>
            <returns>完整圆及完整的椭圆返回 <see langword="true"/>,反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.GetSplitCurves(Autodesk.AutoCAD.Geometry.CompositeCurve3d,System.Collections.Generic.List{System.Double})">
            <summary>
            将三维复合曲线按曲线参数分割
            </summary>
            <param name="c3d">三维复合曲线</param>
            <param name="pars">曲线参数列表</param>
            <returns>三维复合曲线列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.CompositeCurve3d)">
            <summary>
            将复合曲线转换为实体类曲线
            </summary>
            <param name="curve">三维复合曲线</param>
            <returns>实体曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToPolyline(Autodesk.AutoCAD.Geometry.CompositeCurve3d)">
            <summary>
            将三维复合曲线转换为实体类多段线
            </summary>
            <param name="cc3d">三维复合曲线</param>
            <returns>实体类多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.Line3d)">
            <summary>
            将解析类三维构造线转换为实体类构造线
            </summary>
            <param name="line3d">解析类三维构造线</param>
            <returns>实体类构造线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToLineSegment3d(Autodesk.AutoCAD.Geometry.Line3d,System.Double,System.Double)">
            <summary>
            将三维解析类构造线转换为三维解析类线段
            </summary>
            <param name="line3d">三维解析类构造线</param>
            <param name="fromParameter">起点参数</param>
            <param name="toParameter">终点参数</param>
            <returns>三维解析类线段</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.LineSegment3d)">
            <summary>
            将三维解析类线段转换为实体类直线
            </summary>
            <param name="lineSeg3d">三维解析类线段</param>
            <returns>实体类直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆/弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆/弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCircle(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToArc(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为实体圆弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>实体圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToEllipticalArc3d(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为三维解析类椭圆弧
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>三维解析类椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToNurbCurve3d(Autodesk.AutoCAD.Geometry.CircularArc3d)">
            <summary>
            将三维解析类圆/弧转换为三维解析类Nurb曲线
            </summary>
            <param name="ca3d">三维解析类圆/弧</param>
            <returns>三维解析类Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.EllipticalArc3d)">
            <summary>
            将三维解析类椭圆弧转换为实体类椭圆弧
            </summary>
            <param name="ea3d">三维解析类椭圆弧</param>
            <returns>实体类椭圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.NurbCurve3d)">
            <summary>
            将三维解析类Nurb曲线转换为实体类样条曲线
            </summary>
            <param name="nc3d">三维解析类Nurb曲线</param>
            <returns>实体类样条曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Curve3dEx.ToCurve(Autodesk.AutoCAD.Geometry.PolylineCurve3d)">
            <summary>
            将三维解析类多段线转换为实体类三维多段线
            </summary>
            <param name="pl3d">三维解析类多段线</param>
            <returns>实体类三维多段线</returns>
        </member>
        <member name="T:IFoxCAD.Cad.CurveEx">
            <summary>
            实体类曲线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetLength(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            曲线长度
            </summary>
            <param name="curve">曲线</param>
            <returns>长度</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="pars">打断参数表</param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="pars">打断参数表</param>
            <param name="isOrder">对参数表是否进行排序
            <para>
            <see langword="true"/>按参数值升序排序<br/>
            <see langword="false"/>不排序,默认值
            </para>
            </param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="points">打断点表</param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetSplitCurves(Autodesk.AutoCAD.DatabaseServices.Curve,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Boolean)">
            <summary>
            获取分割曲线集合
            </summary>
            <param name="curve">曲线</param>
            <param name="points">打断点表</param>
            <param name="isOrder">对点表是否进行排序
            <para>
            <see langword="true"/>按参数值升序排序<br/>
            <see langword="false"/>不排序,默认值
            </para>
            </param>
            <returns>打断后曲线的集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetAllCycle(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Curve})">
            <summary>
            获取曲线集所围成的封闭区域的曲线集，注意此函数不能处理平行边（两个点及两条线组成的闭合环）
            </summary>
            <param name="curves">曲线集合</param>
            <returns>所有的闭合环的曲线集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.BreakCurve(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Curve})">
            <summary>
            曲线打断
            </summary>
            <param name="curves">曲线列表</param>
            <returns>打断后的曲线列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.BreakCurveOnZPlane(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Curve})">
            <summary>
            在z法向量平面打断曲线
            </summary>
            <param name="curves">曲线列表</param>
            <returns>打断后的曲线列表</returns>
            <exception cref="T:System.ArgumentNullException">传入的曲线列表错误</exception>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.GetScaleCurve(Autodesk.AutoCAD.DatabaseServices.Curve,Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            获取非等比转换的曲线（旋转投影法）
            </summary>
            <param name="cur">转换前的曲线</param>
            <param name="pt">基点</param>
            <param name="x">x方向比例</param>
            <param name="y">y方向比例</param>
            <returns>转换后的曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为ge曲线，此函数将在未来淘汰，二惊加油
            </summary>
            <param name="curve">曲线</param>
            <returns>ge曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCompositeCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为复合曲线
            </summary>
            <param name="curve">曲线</param>
            <returns>复合曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Curve)">
            <summary>
            将曲线转换为Nurb曲线
            </summary>
            <param name="curve">曲线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Line)">
            <summary>
            将直线转换为ge直线
            </summary>
            <param name="line">直线</param>
            <returns>ge直线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Line)">
            <summary>
            将直线转换为Nurb曲线
            </summary>
            <param name="line">直线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为ge圆弧曲线
            </summary>
            <param name="cir">圆</param>
            <returns>ge圆弧曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToEllipticalArc3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为ge椭圆曲线
            </summary>
            <param name="cir">圆</param>
            <returns>ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Circle)">
            <summary>
            将圆转换为Nurb曲线
            </summary>
            <param name="cir">圆</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为ge圆弧曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>ge圆弧曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToEllipticalArc3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为ge椭圆曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Arc)">
            <summary>
            将圆弧转换为三维Nurb曲线
            </summary>
            <param name="arc">圆弧</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Ellipse)">
            <summary>
            将椭圆转换为三维ge椭圆曲线
            </summary>
            <param name="ell">椭圆</param>
            <returns>三维ge椭圆曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Ellipse)">
            <summary>
            将椭圆转换为三维Nurb曲线
            </summary>
            <param name="ell">椭圆</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Spline)">
            <summary>
            将样条曲线转换为三维Nurb曲线
            </summary>
            <param name="spl">样条曲线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维ge曲线
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>三维ge曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维Nurb曲线
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToPolylineCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            将二维多段线转换为三维ge多段线
            </summary>
            <param name="pl">二维多段线</param>
            <returns>三维ge多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维曲线
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>三维曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维Nurb曲线
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>三维Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToPolylineCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            将三维多段线转换为三维ge多段线
            </summary>
            <param name="pl">三维多段线</param>
            <returns>三维ge多段线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            多段线转换为复合曲线
            </summary>
            <param name="pl">多段线对象</param>
            <returns>复合曲线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ToNurbCurve3d(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            多段线转换为Nurb曲线
            </summary>
            <param name="pl">多段线</param>
            <returns>Nurb曲线</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CurveEx.ChamferAt(Autodesk.AutoCAD.DatabaseServices.Polyline,System.Int32,System.Double,System.Boolean)">
            <summary>
            为优化多段线倒角
            </summary>
            <param name="polyline">优化多段线</param>
            <param name="index">顶点索引号</param>
            <param name="radius">倒角半径</param>
            <param name="isFillet">倒角类型</param>
        </member>
        <member name="T:IFoxCAD.Cad.DatabaseEx">
            <summary>
            数据库扩展函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.SaveDwgFile(Autodesk.AutoCAD.DatabaseServices.Database,Autodesk.AutoCAD.DatabaseServices.DwgVersion)">
            <summary>
            保存文件
            </summary>
            <param name="db">数据库</param>
            <param name="version">文件版本</param>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.SaveFile(Autodesk.AutoCAD.DatabaseServices.Database,Autodesk.AutoCAD.DatabaseServices.DwgVersion,System.Boolean,System.String,System.Boolean)">
            <summary>
            保存文件<br/>
            </summary>
            <param name="db">数据库</param>
            <param name="version">默认2004dwg;若保存dxf则需要在路径输入扩展名</param>
            <param name="automatic">为true时候<paramref name="version"/>无效,将变为自动识别环境变量</param>
            <param name="saveAsFile">另存为文件,前台将调用时它将无效,将变为弹出面板</param>
            <param name="echoes">保存路径失败的提示</param>
        </member>
        <member name="M:IFoxCAD.Cad.DatabaseEx.GetOrCreateSaveAsFile(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取文件名,无效的话就制造
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBDictionaryEx">
            <summary>
            字典扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetAllObjects``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary)">
            <summary>
            获取字典里的全部对象
            </summary>
            <typeparam name="T">对象类型的泛型</typeparam>
            <param name="dict">字典</param>
            <returns>对象迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetAt``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary>
            获取字典内指定key的对象
            </summary>
            <typeparam name="T">对象类型的泛型</typeparam>
            <param name="dict">字典</param>
            <param name="key">指定的键值</param>
            <returns>T 类型的对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetAt``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,``0)">
            <summary>
            添加条目（键值对）到字典
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="newValue">值</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetXRecord(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary>
            从字典中获取扩展数据
            </summary>
            <param name="dict">字典</param>
            <param name="key">键值</param>
            <returns>扩展数据</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetXRecord(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,IFoxCAD.Cad.XRecordDataList)">
            <summary>
            保存扩展数据到字典
            </summary>
            <param name="rb">扩展数据</param>
            <param name="dict">字典</param>
            <param name="key">键值</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetXDictionary(Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary>
            获取扩展字典
            </summary>
            <param name="obj">对象</param>
            <returns>扩展字典对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.CreateDataTable(System.Collections.Generic.Dictionary{System.String,Autodesk.AutoCAD.DatabaseServices.CellType},System.Object[0:,0:])">
            <summary>
            创建数据表
            </summary>
            <param name="colTypes">原数据类型的字典</param>
            <param name="content">表元素（二维数组）</param>
            <returns>数据表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.SetValue(Autodesk.AutoCAD.DatabaseServices.DataCell,Autodesk.AutoCAD.DatabaseServices.CellType,System.Object)">
            <summary>
            设定单元格数据
            </summary>
            <param name="cell">单元格</param>
            <param name="type">类型</param>
            <param name="value">数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetSubDictionary(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取子字典
            </summary>
            <param name="dict">根字典</param>
            <param name="createSubDictionary">是否创建子字典</param>
            <param name="dictNames">键值列表</param>
            <returns>字典</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.AddGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            添加编组
            </summary>
            <param name="dict">字典</param>
            <param name="name">组名</param>
            <param name="ids">实体Id集合</param>
            <returns>编组Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.AddGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            添加编组
            </summary>
            <param name="dict">字典</param>
            <param name="name">组名</param>
            <param name="ids">实体Id集合</param>
            <returns>编组Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetGroups(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Func{Autodesk.AutoCAD.DatabaseServices.Group,System.Boolean})">
            <summary>
            按选择条件获取编组集合
            </summary>
            <param name="dict">字典</param>
            <param name="func">选择条件，过滤函数</param>
            <example><![CDATA[var groups = dict.GetGroups(g => g.NumEntities < 2);]]></example>
            <returns>编组集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.GetGroups(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            返回实体的所在编组的集合
            </summary>
            <param name="ent">图元实体</param>
            <returns>编组集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.RemoveNullGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary)">
            <summary>
            移除所有的空组
            </summary>
            <returns>被移除编组的名称集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBDictionaryEx.RemoveNullGroup(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.Func{System.String,System.Boolean})">
            <summary>
            移除所有空组
            </summary>
            <param name="dict"></param>
            <param name="func">过滤条件，过滤要删除的组名的规则函数</param>
            <example>
            <![CDATA[RemoveNullGroup(g => g.StartsWith("hah"));]]>
            </example>
            <returns>被移除编组的名称集合</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBObjectEx">
            <summary>
            实体对象扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.RemoveXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode)">
            <summary>
            删除扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
            <param name="dxfCode">要删除数据的组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.RemoveXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String)">
            <summary>
            删除扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.CloneEx``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="ent">对象</param>
            <returns>克隆后的对象</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ChangeXData(Autodesk.AutoCAD.DatabaseServices.DBObject,System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            修改扩展数据
            </summary>
            <param name="obj">对象实例</param>
            <param name="appName">应用程序名称</param>
            <param name="dxfCode">要修改数据的组码</param>
            <param name="newvalue">新的数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ForWrite``1(``0,System.Action{``0})">
            <summary>
            实体自动管理读写函数，此函数性能比using模式低一倍
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="action">操作委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.ForWrite(Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary>
            打开模式提权
            </summary>
            <param name="obj">实体对象</param>
            <returns>提权类对象</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager">
            <summary>
            提权类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager.Dispose">
            <summary>
            注销函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTransEx.Purge(IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.SymModes,System.Boolean)">
            <summary>
            清理符号表
            </summary>
            <param name="tr"></param>
            <param name="sym"></param>
            <param name="excludeXref">排除外部参照:默认true,为false时候会令图层全部显示再清理,包括冻结</param>
        </member>
        <member name="T:IFoxCAD.Cad.DwgMark">
            <summary>
            为dwg文件添加标记
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.AddMark(System.IO.FileInfo,System.Int32)">
            <summary>
            为dwg文件添加标识
            </summary>
            <param name="file">DWG文件</param>
            <param name="bite">ASCII标识字节0X00~0X7F</param>
            <exception cref="T:System.ArgumentException">非dwg文件会报错，给定bite超界限也报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.RemoveMark(System.IO.FileInfo)">
            <summary>
            将dwg文件标记恢复为默认值
            </summary>
            <param name="file">文件</param>
            <exception cref="T:System.ArgumentException">非dwg文件会报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.DwgMark.GetMark(System.IO.FileInfo)">
            <summary>
            获取设置的dwg文件标记
            </summary>
            <param name="file">文件</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">非dwg文件会报错</exception>
        </member>
        <member name="T:IFoxCAD.Cad.EditorEx">
            <summary>
            命令行扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SelectAtPoint(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.EditorInput.SelectionFilter)">
            <summary>
            选择穿过一个点的对象
            </summary>
            <param name="editor">命令行对象</param>
            <param name="point">点</param>
            <param name="filter">过滤器</param>
            <returns>选择集结果类</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SelectByLineWeight(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.LineWeight)">
            <summary>
            根据线宽创建图层选择集
            </summary>
            <param name="editor">命令行对象</param>
            <param name="lineWeight">线宽</param>
            <returns>图层选择集</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SSGet(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.EditorInput.SelectionFilter,System.Nullable{System.ValueTuple{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.Action})">
            <summary>
            选择集
            </summary>
            <param name="editor">命令行对象</param>
            <param name="mode">模式</param>
            <param name="filter">过滤器</param>
            <param name="messages">消息</param>
            <param name="keywords">关键字和回调函数</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.SsgetAddKeys(Autodesk.AutoCAD.EditorInput.PromptSelectionOptions,System.Collections.Generic.Dictionary{System.String,System.Action})">
            <summary>
             添加选择集关键字和回调
            </summary>
            <param name="pso">选择集配置</param>
            <param name="dicActions">关键字,回调委托</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.StreamMessage(System.String,System.Object[])">
            <summary>
            带错误提示对话框的打印信息函数
            </summary>
            <param name="format">带格式项的字符串</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.StreamMessage(System.String)">
            <summary>
            带错误提示对话框的打印信息函数
            </summary>
            <param name="message">打印信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Message(System.Exception)">
            <summary>
            异常信息对话框
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.String)">
            <summary>
            提示信息对话框
            </summary>
            <param name="caption">对话框的标题</param>
            <param name="message">对话框文本</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.String,System.Object[])">
            <summary>
            提示信息对话框
            </summary>
            <param name="caption">对话框的标题</param>
            <param name="format">带格式化项的对话框文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String)">
            <summary>
            提示信息对话框,默认标题为NFox.Cad
            </summary>
            <param name="message">对话框文本</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.InfoMessageBox(System.String,System.Object[])">
            <summary>
            提示信息对话框
            </summary>
            <param name="format">带格式化项的对话框文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.WriteMessage(System.String)">
            <summary>
            命令行打印字符串
            </summary>
            <param name="message">字符串</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.WriteMessage(System.String,System.Object[])">
            <summary>
            命令行打印字符串
            </summary>
            <param name="format">带格式化项的文本</param>
            <param name="args">指定格式化的对象数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.HasEditor">
            <summary>
            判断是否有活动的编辑器对象
            </summary>
            <returns><see langword="true"/>有,<see langword="false"/>没有</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Acceptable">
            <summary>
            判断是否可以打印字符串
            </summary>
            <returns><see langword="true"/>可以打印,<see langword="false"/>不可以打印</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetLines(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Boolean)">
            <summary>
            根据点表返回矢量线的列表
            </summary>
            <param name="pnts">点表</param>
            <param name="isClosed">是否闭合,<see langword="true"/> 为闭合,<see langword="false"/> 为不闭合</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16,System.Boolean)">
            <summary>
            画矢量线
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
            <param name="isClosed">是否闭合,<see langword="true"/> 为闭合,<see langword="false"/> 为不闭合</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawVectors(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16)">
            <summary>
            画矢量线
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawCircles(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},System.Int16,System.Double,System.Int32)">
            <summary>
            用矢量线画近似圆（正多边形）
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnts">点表</param>
            <param name="colorIndex">颜色码</param>
            <param name="radius">半径</param>
            <param name="numEdges">多边形边的个数</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.DrawCircle(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point2d,System.Int16,System.Double,System.Int32)">
            <summary>
            用矢量线画近似圆（正多边形）
            </summary>
            <param name="editor">编辑器对象</param>
            <param name="pnt">点</param>
            <param name="colorIndex">颜色码</param>
            <param name="radius">半径</param>
            <param name="numEdges">多边形边的个数</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromUcsToWcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取UCS到WCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromWcsToUcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取WCS到UCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromMDcsToWcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取MDCS(模型空间)到WCS的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromWcsToMDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取WCS到MDCS(模型空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromMDcsToPDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取MDCS(模型空间)到PDCS(图纸空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrixFromPDcsToMDcs(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取PDCS(图纸空间)到MDCS(模型空间)的矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetMatrix(Autodesk.AutoCAD.EditorInput.Editor,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            获取变换矩阵
            </summary>
            <param name="editor">命令行对象</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomWindow(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            缩放窗口范围
            </summary>
            <param name="ed">命令行对象</param>
            <param name="ext">窗口范围点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.Zoom(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            按范围缩放
            </summary>
            <param name="ed">命令行对象</param>
            <param name="CenPt">中心点</param>
            <param name="width">窗口宽</param>
            <param name="height">窗口高</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomWindow(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            缩放窗口范围
            </summary>
            <param name="ed">命令行对象</param>
            <param name="lpt">第一点</param>
            <param name="rpt">对角点</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetValidExtents3d(Autodesk.AutoCAD.DatabaseServices.Database,System.Double)">
            <summary>
            获取有效的数据库范围
            </summary>
            <param name="db">数据库</param>
            <param name="extention">容差值:图元包围盒会超过数据库边界,用此参数扩大边界</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomExtents(Autodesk.AutoCAD.EditorInput.Editor,System.Double)">
            <summary>
            动态缩放
            </summary>
            <param name="ed">命令行对象</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ZoomObject(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity,System.Double)">
            <summary>
            根据实体对象的范围显示视图
            </summary>
            <param name="ed">命令行对象</param>
            <param name="ent">Entity对象</param>
            <param name="offsetDist">偏移距离</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetPoint(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            获取Point
            </summary>
            <param name="ed">命令行对象</param>
            <param name="Message">提示信息</param>
            <param name="BasePoint">提示使用的基点</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetDouble(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.Double)">
            <summary>
            获取double值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="Message">提示信息</param>
            <param name="DefaultValue">double默认值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetInteger(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.Int32)">
            <summary>
            获取int值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="Message">提示信息</param>
            <param name="DefaultValue">double默认值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetString(Autodesk.AutoCAD.EditorInput.Editor,System.String,System.String)">
            <summary>
            获取string值
            </summary>
            <param name="ed">命令行对象</param>
            <param name="Message">提示信息</param>
            <param name="DefaultValue">string默认值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.RunLisp(Autodesk.AutoCAD.EditorInput.Editor,System.String,IFoxCAD.Cad.EditorEx.RunLispFlag)">
            <summary>
            发送lisp语句字符串到cad执行
            </summary>
            <param name="ed">编辑器对象</param>
            <param name="lispCode">lisp语句</param>
            <param name="flag">运行方式</param>
            <returns>缓冲结果,返回值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.ComExportWMF(Autodesk.AutoCAD.EditorInput.Editor,System.String,Autodesk.AutoCAD.DatabaseServices.ObjectId[],System.Boolean)">
            <summary>
            输出WMF<br/>
            此函数不适用于后台
            </summary>
            <param name="editor">命令行对象</param>
            <param name="saveFile">保存文件</param>
            <param name="ids">选择集的对象,为null时候手选</param>
            <param name="wmfSetDel">是否清空选择集</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.PrepareForJig(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            jig前的准备工作，使图元暗显
            </summary>
            <param name="ed">命令栏</param>
            <param name="ents">实体（已存在数据库中）</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.PrepareForJig(Autodesk.AutoCAD.EditorInput.Editor,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            jig前的准备工作，使图元暗显
            </summary>
            <param name="ed">命令栏</param>
            <param name="ents">实体（已存在数据库中）</param>
        </member>
        <member name="M:IFoxCAD.Cad.EditorEx.GetCurrentMouthPoint(Autodesk.AutoCAD.EditorInput.Editor)">
            <summary>
            获取CAD鼠标当前位置坐标
            </summary>
            <param name="ed">命令栏</param>
            <returns>坐标(可能为null)</returns>
        </member>
        <member name="T:IFoxCAD.Cad.BoundingInfo">
            <summary>
            AABB和OBB信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BoundingInfo.Angle">
            <summary>
            AABB这里永远是0
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.#cctor">
            <summary>
            为了保证更好的性能,
            只是在第一次调用此功能的时候进行读取,
            免得高频调用时候高频触发磁盘
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetBoundingInfo(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取图元包围盒
            </summary>
            <param name="ent"></param>
            <returns>(左下角,右上角,是否有效)</returns>
            异常:
              会将包围盒类型记录到所属路径中,以此查询
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetBoxInfoInBlockReference(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            处理块参照
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityBoundingInfo.GetBoxInfoInMText(Autodesk.AutoCAD.DatabaseServices.MText)">
            <summary>
            处理多行文字
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ArcEx">
            <summary>
            圆弧扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArcSCE(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            根据圆心、起点、终点来创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="centerPoint">圆心</param>
            <param name="endPoint">终点</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArc(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            三点法创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="pointOnArc">圆弧上的点</param>
            <param name="endPoint">终点</param>
            <returns>圆弧</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ArcEx.CreateArc(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            根据起点、圆心和圆弧角度创建圆弧(二维)
            </summary>
            <param name="startPoint">起点</param>
            <param name="centerPoint">圆心</param>
            <param name="angle">圆弧角度</param>
            <returns>圆弧</returns>
        </member>
        <member name="T:IFoxCAD.Cad.BlockReferenceEx">
            <summary>
            块参照扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ClipBlockRef(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            裁剪块参照
            </summary>
            <param name="bref">块参照</param>
            <param name="pt3ds">裁剪多边形点表</param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ClipBlockRef(Autodesk.AutoCAD.DatabaseServices.BlockReference,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            裁剪块参照
            </summary>
            <param name="bref">块参照</param>
            <param name="pt1">第一角点</param>
            <param name="pt2">第二角点</param>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ChangeDynamicBlockProperty``1(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            更新动态块属性值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ChangeBlockProperty(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            更新普通块的属性值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetNestedBlockPosition(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.String)">
            <summary>
            获取嵌套块的位置(wcs)
            </summary>
            <param name="parentBlockRef">父块</param>
            <param name="nestedBlockName">子块名</param>
            <returns>子块的位置</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.GetAttributes(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary>
            获取普通块参照的属性集合
            </summary>
            <param name="owner">普通块参照</param>
            <returns>属性集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.ForEach(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历块内
            </summary>
            <param name="brf"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.BlockReferenceEx.NestedForEach(Autodesk.AutoCAD.DatabaseServices.Entity,System.Action{Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Matrix3d},IFoxCAD.Cad.DBTrans)">
            <summary>
            遍历嵌套块中块图元
            </summary>
            <param name="blockReference">块参照</param>
            <param name="action">委托</param>
            <param name="tr">事务</param>
        </member>
        <member name="T:IFoxCAD.Cad.CircleEx">
            <summary>
            圆扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            两点创建圆(两点中点为圆心)
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <returns>圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            三点法创建圆(失败则返回Null)
            </summary>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <param name="pt3">第三点</param>
            <returns>圆</returns>
        </member>
        <member name="M:IFoxCAD.Cad.CircleEx.CreateCircle(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            通过圆心,半径绘制圆形
            </summary>
            <param name="center">圆心</param>
            <param name="radius">半径</param>
            <param name="vex">法向量的X</param>
            <param name="vey">法向量的Y</param>
            <param name="vez">法向量的Z</param>
            <returns>圆</returns>
        </member>
        <member name="T:IFoxCAD.Cad.DBTextEx">
            <summary>
            单行文字扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTextEx.CreateDBText(Autodesk.AutoCAD.Geometry.Point3d,System.String,System.Double,Autodesk.AutoCAD.DatabaseServices.AttachmentPoint,Autodesk.AutoCAD.DatabaseServices.Database,System.Action{Autodesk.AutoCAD.DatabaseServices.DBText})">
            <summary>
            创建单行文字
            </summary>
            <param name="position">插入点</param>
            <param name="text">文本内容</param>
            <param name="height">文字高度</param>
            <param name="justify">对齐方式</param>
            <param name="database">文字所在的数据库</param>
            <param name="action">文字属性设置委托</param>
            <returns>文字对象</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.DBTextEx.ValidateMirror(Autodesk.AutoCAD.DatabaseServices.DBText)">
            <summary>
            更正单行文字的镜像属性
            </summary>
            <param name="txt">单行文字</param>
        </member>
        <member name="T:IFoxCAD.Cad.EntityEx">
            <summary>
            实体图元扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Move(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            移动实体
            </summary>
            <param name="ent">实体</param>
            <param name="from">基点</param>
            <param name="to">目标点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Move(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            移动实体
            </summary>
            <param name="ent">实体</param>
            <param name="vector">向量</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Scale(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            缩放实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">缩放基点坐标</param>
            <param name="scaleValue">缩放比例</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Rotation(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            旋转实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">旋转中心</param>
            <param name="angle">转角，弧度制，正数为顺时针</param>
            <param name="normal">旋转平面的法向矢量</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Rotation(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            在XY平面内旋转实体
            </summary>
            <param name="ent">实体</param>
            <param name="center">旋转中心</param>
            <param name="angle">转角，弧度制，正数为顺时针</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            按对称轴镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="startPoint">对称轴起点</param>
            <param name="endPoint">对称轴终点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Plane)">
            <summary>
            按对称面镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="plane">对称平面</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.Mirror(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            按对称点镜像实体
            </summary>
            <param name="ent">实体</param>
            <param name="basePoint">对称点</param>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetExtents(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            获取实体集合的范围
            </summary>
            <param name="ents">实体迭代器</param>
            <returns>实体集合的范围</returns>
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetBoundingBoxEx(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取图元包围盒
            </summary>
            <param name="ent"></param>
            <returns>包围盒信息</returns>
            异常:
              会将包围盒类型记录到所属路径中,以此查询
        </member>
        <member name="M:IFoxCAD.Cad.EntityEx.GetStretchPoints(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            获取拉伸点
            </summary>
            <param name="ent">实体</param>
            <returns>点集</returns>
        </member>
        <member name="T:IFoxCAD.Cad.MTextEx">
            <summary>
            多行文字扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.CreateMText(Autodesk.AutoCAD.Geometry.Point3d,System.String,System.Double,Autodesk.AutoCAD.DatabaseServices.Database,System.Action{Autodesk.AutoCAD.DatabaseServices.MText})">
            <summary>
            创建多行文字
            </summary>
            <param name="position">插入点</param>
            <param name="text">文本内容</param>
            <param name="height">文字高度</param>
            <param name="database">文字所在的数据库</param>
            <param name="action">文字属性设置委托</param>
            <returns>文字对象id</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.ExplodeFragments``1(Autodesk.AutoCAD.DatabaseServices.MText,``0,System.Func{Autodesk.AutoCAD.DatabaseServices.MTextFragment,``0,Autodesk.AutoCAD.DatabaseServices.MTextFragmentCallbackStatus})">
            <summary>
            炸散多行文字
            </summary>
            <typeparam name="T">存储多行文字炸散之后的对象的类型</typeparam>
            <param name="mt">多行文字</param>
            <param name="obj">存储对象变量</param>
            <param name="mTextFragmentCallback">回调函数，用于处理炸散之后的对象
            <para>
            <see cref="T:Autodesk.AutoCAD.DatabaseServices.MTextFragment"/>多行文字炸散后的对象<br/>
            <see cref="T:Autodesk.AutoCAD.DatabaseServices.MTextFragmentCallbackStatus"/>回调函数处理的结果
            </para>
            </param>
        </member>
        <member name="M:IFoxCAD.Cad.MTextEx.GetUnFormatString(Autodesk.AutoCAD.DatabaseServices.MText)">
            <summary>
            获取多行文字的无格式文本
            </summary>
            <param name="mt">多行文字</param>
            <returns>文本</returns>
        </member>
        <member name="T:IFoxCAD.Cad.PolylineEx">
            <summary>
            多段线扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline2d)">
            <summary>
            获取二维多段线的端点坐标
            </summary>
            <param name="pl2d">二维多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline3d)">
            <summary>
            获取三维多段线的端点坐标
            </summary>
            <param name="pl3d">三维多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.GetPoints(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary>
            获取多段线的端点坐标
            </summary>
            <param name="pl">多段线</param>
            <returns>端点坐标集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.CreatePolyline(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},System.Action{Autodesk.AutoCAD.DatabaseServices.Polyline})">
            <summary>
            根据点集创建多段线<br/>
            此多段线无默认全局宽度0，无圆弧段
            </summary>
            <param name="points">点集</param>
            <param name="action">多段线属性设置委托</param>
            <returns>多段线对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PolylineEx.CreatePolyline(System.Collections.Generic.IEnumerable{System.ValueTuple{Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double}},System.Action{Autodesk.AutoCAD.DatabaseServices.Polyline})">
            <summary>
            根据点集创建多段线
            </summary>
            <param name="pts">端点表,利用元组(Point3d pt, double bulge, double startWidth, double endWidth)</param>
            <param name="action">轻多段线属性设置委托</param>
            <returns>轻多段线对象</returns>
        </member>
        <member name="T:IFoxCAD.Cad.PathConverterModes">
            <summary>
            参照路径转换
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PathConverterModes.Relative">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PathConverterModes.Complete">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.XrefModes">
            <summary>
            参照绑定
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Unload">
            <summary>
            卸载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Reload">
            <summary>
            重载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Detach">
            <summary>
            拆离
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefModes.Bind">
            <summary>
            绑定
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.BlockTable">
            <summary>
            块表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.LayerTable">
            <summary>
            图层表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.TextStyleTable">
            <summary>
            文字样式表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.RegAppTable">
            <summary>
            注册应用程序表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.DimStyleTable">
            <summary>
            标注样式表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.LinetypeTable">
            <summary>
            线型表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.UcsTable">
            <summary>
            用户坐标系表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.ViewTable">
            <summary>
            视图表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SymModes.ViewportTable">
            <summary>
            视口表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.CoordinateSystemCode">
            <summary>
            坐标系类型枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.Wcs">
            <summary>
            世界坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.Ucs">
            <summary>
            用户坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.MDcs">
            <summary>
            模型空间坐标系
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CoordinateSystemCode.PDcs">
            <summary>
            图纸空间坐标系
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OrientationType">
            <summary>
            方向的枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.CounterClockWise">
            <summary>
            左转或逆时针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.ClockWise">
            <summary>
            右转或顺时针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OrientationType.Parallel">
            <summary>
            重合或平行
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PointOnRegionType">
            <summary>
            点与多边形的关系类型枚举
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Inside">
            <summary>
            多边形内部
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.On">
            <summary>
            多边形上
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Outside">
            <summary>
            多边形外
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PointOnRegionType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.GeometryEx">
            <summary>
            图形扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.PointOnRegion(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d},Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断点与多边形的关系
            </summary>
            <param name="pts">多边形顶点集合</param>
            <param name="pt">点</param>
            <returns>点与多边形的关系</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.PointOnRegion(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d},Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            判断点与多边形的关系
            </summary>
            <param name="pts">多边形顶点集合</param>
            <param name="pt">点</param>
            <returns>点与多边形的关系</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按两点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按三点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="pt3">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按四点返回最小包围圆
            </summary>
            <param name="pt1">基准点</param>
            <param name="pt2">基准点</param>
            <param name="pt3">基准点</param>
            <param name="pt4">基准点</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            计算三点围成的有向面积
            </summary>
            <param name="ptBase">基准点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>三点围成的三角形的有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            计算三点围成的三角形的真实面积
            </summary>
            <param name="ptBase">基准点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>三点围成的三角形的真实面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            判断三点是否为逆时针，也就是说判断三点是否为左转
            </summary>
            <param name="ptBase">基点</param>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            计算两个二维向量围成的平行四边形的有向面积
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            计算两个二维向量围成的平行四边形的真实面积
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>真实面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            判断两个二维向量是否左转
            </summary>
            <param name="vecBase">基向量</param>
            <param name="vec">向量</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.CalArea(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            计算点集的有向面积
            </summary>
            <param name="pnts">点集</param>
            <returns>有向面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetArea(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            计算点集的真实面积
            </summary>
            <param name="pnts">点集</param>
            <returns>面积</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.IsClockWise(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            判断点集的点序
            </summary>
            <param name="pnts">点集</param>
            <returns>OrientationType 类型值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetMinCircle(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d},IFoxCAD.Basal.LoopList{Autodesk.AutoCAD.Geometry.Point2d}@)">
            <summary>
            按点集返回最小包围圆
            </summary>
            <param name="pnts">点集</param>
            <param name="ptlst">输出圆上的点</param>
            <returns>解析类圆对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.ConvexHull(System.Collections.Generic.List{Autodesk.AutoCAD.Geometry.Point2d})">
            <summary>
            获取点集的凸包
            </summary>
            <param name="points">点集</param>
            <returns>凸包</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Ucs2Wcs(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            ucs到wcs的点变换
            </summary>
            <param name="point">点</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Ucs(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            wcs到ucs的点变换
            </summary>
            <param name="point">点</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Ucs2Wcs(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            ucs到wcs的向量变换
            </summary>
            <param name="vec">向量</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Ucs(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            wcs到ucs的向量变换
            </summary>
            <param name="vec">向量</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Trans(Autodesk.AutoCAD.Geometry.Point3d,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            模拟 trans 函数
            </summary>
            <param name="point">点</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Trans(Autodesk.AutoCAD.Geometry.Vector3d,IFoxCAD.Cad.CoordinateSystemCode,IFoxCAD.Cad.CoordinateSystemCode)">
            <summary>
            模拟 trans 函数
            </summary>
            <param name="vec">向量</param>
            <param name="from">源坐标系</param>
            <param name="to">目标坐标系</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Dcs(Autodesk.AutoCAD.Geometry.Point3d,System.Boolean)">
            <summary>
            wcs到dcs的点变换
            </summary>
            <param name="point">点</param>
            <param name="atPaperSpace">是否为图纸空间</param>
            <returns>变换后的点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Wcs2Dcs(Autodesk.AutoCAD.Geometry.Vector3d,System.Boolean)">
            <summary>
            wcs到dcs的向量变换
            </summary>
            <param name="vec">向量</param>
            <param name="atPaperSpace">是否为图纸空间</param>
            <returns>变换后的向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetScaleMatrix(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double,System.Double)">
            <summary>
            返回不等比例变换矩阵
            </summary>
            <param name="point">基点</param>
            <param name="x">x方向比例</param>
            <param name="y">y方向比例</param>
            <param name="z">z方向比例</param>
            <returns>三维矩阵</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.GetSize(Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary>
            获取坐标范围的大小
            </summary>
            <param name="ext">坐标范围</param>
            <returns>尺寸对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Draw(Autodesk.AutoCAD.GraphicsInterface.Geometry,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.GraphicsInterface.Drawable})">
            <summary>
            重绘
            </summary>
            <param name="geometry">图形界面几何</param>
            <param name="drawables">可绘制的对象列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.GeometryEx.Draw(Autodesk.AutoCAD.GraphicsInterface.Geometry,Autodesk.AutoCAD.GraphicsInterface.Drawable[])">
            <summary>
            重绘
            </summary>
            <param name="geometry">图形界面几何</param>
            <param name="drawables">可绘制的对象列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Convert2d(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            转换为2d向量
            </summary>
            <param name="vector3d">3d向量</param>
            <returns>2d向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Convert3d(Autodesk.AutoCAD.Geometry.Vector2d,System.Double)">
            <summary>
            转换为3d向量
            </summary>
            <param name="vector2d">2d向量</param>
            <param name="z">z值</param>
            <returns>3d向量</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Cross2d(Autodesk.AutoCAD.Geometry.Vector3d,Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            2d叉乘
            </summary>
            <param name="a">向量a</param>
            <param name="b">向量b</param>
            <returns>叉乘值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Cross2d(Autodesk.AutoCAD.Geometry.Vector2d,Autodesk.AutoCAD.Geometry.Vector2d)">
            <summary>
            2d叉乘
            </summary>
            <param name="a">向量a</param>
            <param name="b">向量b</param>
            <returns>叉乘值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.Z20(Autodesk.AutoCAD.Geometry.Vector3d)">
            <summary>
            向量Z值归零
            </summary>
            <param name="vector3d">向量</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.VectorEx.AngleOnPlane(Autodesk.AutoCAD.Geometry.Vector3d,Autodesk.AutoCAD.Geometry.Plane)">
            <summary>
            向量在平面上的弧度
            </summary>
            <param name="vector">向量</param>
            <param name="plane">平面</param>
            <returns>弧度</returns>
        </member>
        <member name="T:IFoxCAD.Cad.PlaneEx">
            <summary>
            平面
            </summary>
        </member>
        <member name="E:IFoxCAD.Cad.JigEx.WorldDrawEvent">
            <summary>
            事件:亮显/暗显会被刷新冲刷掉,所以这个事件用于补充非刷新的工作
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx.MousePointWcsLast">
            <summary>
            最后的鼠标点,用来确认长度
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigEx.Entitys">
            <summary>
            最后的图元,用来生成
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.#ctor">
            <summary>
            在界面绘制图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.#ctor(System.Action{Autodesk.AutoCAD.Geometry.Point3d,System.Collections.Generic.Queue{Autodesk.AutoCAD.DatabaseServices.Entity}},System.Double)">
            <summary>
            在界面绘制图元
            </summary>
            <param name="action">
            用来频繁执行的回调:<br/>
            <see cref="T:Autodesk.AutoCAD.Geometry.Point3d"/>鼠标点;<br/>
            <see cref="T:System.Collections.Queue"/>加入新建的图元,鼠标采样期间会Dispose图元的;<br/>
            所以已经在数据库图元利用事件加入,不要在此加入;<br/>
            </param>
            <param name="tolerance">鼠标移动的容差</param>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx.lastIsKw">
            <summary>
            因为是worldDraw触发sampler不是Sample触发worldDraw，所以要记一次上次的状态
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Sampler(Autodesk.AutoCAD.EditorInput.JigPrompts)">
            <summary>
            鼠标采样器
            </summary>
            <param name="prompts"></param>
            <returns>返回状态:令频繁刷新结束</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.DatabaseEntityDraw(IFoxCAD.Cad.WorldDrawEvent)">
            <summary>
            重绘已在数据库的图元
            <para>
            0x01 此处不加入newEntity的,它们在构造函数的参数回调处加入,它们会进行频繁new和Dispose从而避免遗忘释放<br/>
            0x02 此处用于重绘已经在数据的图元<br/>
            0x03 此处用于图元亮显暗显,因为会被重绘冲刷掉所以独立出来不重绘,它们也往往已经存在数据库的
            </para>
            </summary>
            <remarks>
            newEntity只会存在一个图元队列中,而数据库图元可以分多个集合
            <para> 例如: 集合A亮显时 集合B暗显/集合B亮显时 集合A暗显,所以我没有设计多个"数据库图元集合"存放,而是由用户在构造函数外自行创建</para>
            </remarks>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.WorldDraw(Autodesk.AutoCAD.GraphicsInterface.WorldDraw)">
            <summary>
            重绘图形
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.EditorInput.CursorType,System.String,System.Boolean)">
            <summary>
            鼠标配置:基点
            </summary>
            <param name="basePoint">基点</param>
            <param name="cursorType">光标绑定</param>
            <param name="msg">提示信息</param>
            <param name="orthomode">正交开关</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            鼠标配置:提示信息,关键字
            </summary>
            <param name="msg">信息</param>
            <param name="keywords">关键字</param>
            <param name="orthomode">正交开关</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetOptions(System.Action{Autodesk.AutoCAD.EditorInput.JigPromptPointOptions},System.Boolean)">
            <summary>
            鼠标配置:自定义
            </summary>
            <param name="action"></param>
            <param name="orthomode">正交开关</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Drag">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.AddEntityToMsPs(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            最后一次的图元加入数据库
            </summary>
            <param name="btrOfAddEntitySpace">加入此空间</param>
            <param name="removeEntity">不生成的图元用于排除,例如刷新时候的提示文字</param>
            <returns>加入数据库的id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.JigPointOptions">
            <summary>
            用户输入控制默认配置
            <para>令jig.Drag().Status == <see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.None"/></para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.SetSpaceIsKeyword">
            <summary>
            空格默认是<see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.None"/>,
            <para>将它设置为<see cref="F:Autodesk.AutoCAD.EditorInput.PromptStatus.Keyword"/></para>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.JigEx.DimensionEntitys">
            <summary>
            注释数据,可以在缩放的时候不受影响
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.GetDynamicDimensionData(System.Double)">
            <summary>
            重写注释数据
            </summary>
            <param name="dimScale"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Dispose">
            <summary>
            手动调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigEx.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.JigExTransient">
            <summary>
            瞬态容器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.Entities">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.#ctor">
            <summary>
            瞬态容器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Contains(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            判断瞬态容器里是否含有对象
            </summary>
            <param name="ent">对象</param>
            <returns>含有返回true</returns>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Add(Autodesk.AutoCAD.DatabaseServices.Entity,Autodesk.AutoCAD.GraphicsInterface.TransientDrawingMode)">
            <summary>
            向瞬态容器中添加对象
            </summary>
            <param name="ent">图元</param>
            <param name="tdm">绘图模式</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Remove(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            从瞬态容器中移除图元
            </summary>
            <param name="ent">已经加入瞬态容器的图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Clear">
            <summary>
            清空瞬态容器并移除图元显示
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Update(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            更新单个显示
            </summary>
            <param name="ent">已经加入瞬态容器的图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.UpdateAll">
            <summary>
            更新全部显示
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.JigExTransient.IsDisposed">
            <summary>
            是否注销
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Dispose">
            <summary>
            手动释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.JigExTransient.Dispose(System.Boolean)">
            <summary>
            销毁瞬态容器
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ObjectIdEx">
            <summary>
            对象id扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="id">对象id</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象集合
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型对象集合
            </summary>
            <typeparam name="T">指定的泛型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>指定类型对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.OfType``1(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},System.Boolean)">
            <summary>
            返回符合类型的对象id
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="ids">对象id集合</param>
            <param name="exactMatch">精确匹配</param>
            <returns>对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObjectId(Autodesk.AutoCAD.DatabaseServices.Database,System.String)">
            <summary>
            根据对象句柄字符串获取对象Id
            </summary>
            <param name="db">数据库</param>
            <param name="handleString">句柄字符串</param>
            <returns>对象的ObjectId</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.GetObjectId(Autodesk.AutoCAD.DatabaseServices.Database,System.Nullable{Autodesk.AutoCAD.DatabaseServices.Handle})">
            <summary>
            根据对象句柄获取对象ObjectId
            </summary>
            <param name="db">数据库</param>
            <param name="handle">句柄</param>
            <returns>对象的ObjectId</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.ConvertToHandle(System.String)">
            <summary>
            句柄字符串转句柄
            </summary>
            <param name="handleString">句柄字符串</param>
            <returns>句柄</returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.IsOk(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            id是否有效,未被删除
            </summary>
            <param name="id">对象id</param>
            <returns>id有效返回 <see langword="true"/>，反之返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.ObjectIdEx.Erase(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            删除id代表的对象
            </summary>
            <param name="id">对象id</param>
        </member>
        <member name="T:IFoxCAD.Cad.ObjEx">
            <summary>
            对象扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ObjEx.Print(System.Object)">
            <summary>
            cad的打印
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IFoxCAD.Cad.ObjEx.PrintLine(System.Object)">
            <summary>
            系统的打印
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetHashString(Autodesk.AutoCAD.Geometry.Point3d,System.Int32,System.Int32)">
            <summary>
            获取点的hash字符串，同时可以作为pt的字符串表示
            </summary>
            <param name="pt">点</param>
            <param name="xyz">指示计算几维坐标的标志，1为计算x，2为计算x，y，其他为计算x，y，z</param>
            <param name="decimalRetain">保留的小数位数</param>
            <returns>hash字符串</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetAngle(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Nullable{Autodesk.AutoCAD.Geometry.Vector3d})">
            <summary>
            两点计算弧度范围0到2Pi
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <param name="direction">方向</param>
            <returns>弧度值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetAngle(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            两点计算弧度范围0到2Pi
            </summary>
            <param name="startPoint">起点</param>
            <param name="endPoint">终点</param>
            <returns>弧度值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetMidPointTo(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            获取中点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetMidPointTo(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            获取两个点之间的中点
            </summary>
            <param name="pt1">第一点</param>
            <param name="pt2">第二点</param>
            <returns>返回两个点之间的中点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Z20(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            Z值归零
            </summary>
            <param name="point">点</param>
            <returns>新点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point2d(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            将三维点转换为二维点
            </summary>
            <param name="pt">三维点</param>
            <returns>二维点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point2d(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.Geometry.Point3d})">
            <summary>
            将三维点集转换为二维点集
            </summary>
            <param name="pts">三维点集</param>
            <returns>二维点集</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Point3d(Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            <summary>
            将二维点转换为三维点
            </summary>
            <param name="pt">二维点</param>
            <param name="z">Z值</param>
            <returns>三维点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.TransPoint(Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.Geometry.Point3d,System.Double)">
            <summary>
            根据世界坐标计算用户坐标
            </summary>
            <param name="basePt">基点世界坐标</param>
            <param name="userPt">基点用户坐标</param>
            <param name="transPt">目标世界坐标</param>
            <param name="ang">坐标网旋转角，按x轴正向逆时针弧度</param>
            <returns>目标用户坐标</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Polar(Autodesk.AutoCAD.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            计算指定距离和角度的点
            </summary>
            <remarks>本函数仅适用于x-y平面</remarks>
            <param name="pt">基点</param>
            <param name="ang">角度，x轴正向逆时针弧度</param>
            <param name="len">距离</param>
            <returns>目标点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.Polar(Autodesk.AutoCAD.Geometry.Point2d,System.Double,System.Double)">
            <summary>
            计算指定距离和角度的点
            </summary>
            <remarks>本函数仅适用于x-y平面</remarks>
            <param name="pt">基点</param>
            <param name="ang">角度，x轴正向逆时针弧度</param>
            <param name="len">距离</param>
            <returns>目标点</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.GetArcBulge(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            http://www.lee-mac.com/bulgeconversion.html
            <summary>
            求凸度,判断三点是否一条直线上
            </summary>
            <param name="arc1">圆弧起点</param>
            <param name="arc2">圆弧腰点</param>
            <param name="arc3">圆弧尾点</param>
            <param name="tol">容差</param>
            <returns>逆时针为正,顺时针为负</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.End2End(Autodesk.AutoCAD.Geometry.Point2dCollection)">
            <summary>
            首尾相连
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PointEx.End2End(Autodesk.AutoCAD.Geometry.Point3dCollection)">
            <summary>
            首尾相连
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SelectionSetEx">
            <summary>
            选择集扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetSelectedObjects(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            获取已选择的对象
            </summary>
            <param name="ss">选择集</param>
            <returns>已选择的对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetSelectObjects``1(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            获取已选择的对象
            </summary>
            <typeparam name="T">已选择的对象泛型</typeparam>
            <param name="ss">选择集</param>
            <returns>已选择的对象集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetObjectIds``1(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            从选择集中获取对象id
            </summary>
            <typeparam name="T">图元类型</typeparam>
            <param name="ss">选择集</param>
            <returns>已选择的对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetObjectIdGroup(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            将选择集的对象按类型分组
            </summary>
            <param name="ss">选择集</param>
            <returns>分组后的类型/对象id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.GetEntities``1(Autodesk.AutoCAD.EditorInput.SelectionSet,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取指定类型图元
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="ss">选择集</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.ForEach``1(Autodesk.AutoCAD.EditorInput.SelectionSet,System.Action{``0},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            遍历选择集
            </summary>
            <typeparam name="T">指定图元类型</typeparam>
            <param name="ss">选择集</param>
            <param name="action">处理函数;(图元)</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SelectionSetEx.ForEach``1(Autodesk.AutoCAD.EditorInput.SelectionSet,System.Action{``0,IFoxCAD.Basal.LoopState},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            遍历选择集
            </summary>
            <typeparam name="T">指定图元类型</typeparam>
            <param name="ss">选择集</param>
            <param name="action">处理函数;(图元,终止方式)</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTableEx">
            <summary>
            符号表类扩展函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,Autodesk.AutoCAD.Colors.Color)">
            <summary>
            添加图层
            </summary>
            <param name="table">图层符号表</param>
            <param name="name">图层名</param>
            <param name="color">图层颜色</param>
            <returns>图层id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,System.Int32)">
            <summary>
            添加图层
            </summary>
            <param name="table">图层符号表</param>
            <param name="name">图层名</param>
            <param name="colorIndex">图层颜色索引值</param>
            <returns>图层id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Rename(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String,System.String)">
            <summary>
            更改图层名
            </summary>
            <param name="table">图层符号表</param>
            <param name="Oldname">旧图层名</param>
            <param name="NewName">新图层名</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Delete(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LayerTable,Autodesk.AutoCAD.DatabaseServices.LayerTableRecord},System.String)">
            <summary>
            删除图层
            </summary>
            <param name="table">层表</param>
            <param name="name">图层名</param>
            <returns>成功返回 <see langword="true"/>，失败返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Action{Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.Func{System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity}},System.Func{System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition}})">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="action">对所添加块表的委托n</param>
            <param name="ents">添加图元的委托</param>
            <param name="attdef">添加属性定义的委托</param>
            <returns>块定义id</returns>
            TODO: 需要测试匿名块等特殊的块是否能定义
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.Entity},System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="ents">图元</param>
            <param name="attdef">属性定义</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            添加块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块名</param>
            <param name="ents">图元(包括属性)</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddAttsToBlocks(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加属性到块定义
            </summary>
            <param name="table">块表</param>
            <param name="id">块定义id</param>
            <param name="atts">属性列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddAttsToBlocks(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.AttributeDefinition})">
            <summary>
            添加属性到块定义
            </summary>
            <param name="table">块表</param>
            <param name="name">块定义名字</param>
            <param name="atts">属性列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.GetBlockFrom(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.Boolean)">
            <summary>
            从文件中获取块定义
            </summary>
            <param name="table">块表</param>
            <param name="fileName">文件名</param>
            <param name="over">是否覆盖</param>
            <returns>块定义Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.GetBlockFrom(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String,System.String,System.Boolean)">
            <summary>
            从文件中获取块定义
            </summary>
            <param name="table">块表</param>
            <param name="fileName">文件名</param>
            <param name="blockName">块定义名</param>
            <param name="over">是否覆盖</param>
            <returns>块定义Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.LinetypeTable,Autodesk.AutoCAD.DatabaseServices.LinetypeTableRecord},System.String,System.String,System.Double,System.Double[])">
            <summary>
            添加线型
            </summary>
            <param name="table">线型表</param>
            <param name="name">线型名</param>
            <param name="description">线型说明</param>
            <param name="length">线型长度</param>
            <param name="dash">笔画长度数组</param>
            <returns>线型id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,System.String,System.Double)">
            <summary>
            添加文字样式记录
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="font">字体名</param>
            <param name="xscale">宽度比例</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.Add(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,IFoxCAD.Cad.FontTTF,System.Double)">
            <summary>
            添加文字样式记录
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="fontTTF">字体名枚举</param>
            <param name="xscale">宽度比例</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableEx.AddWithChange(IFoxCAD.Cad.SymbolTable{Autodesk.AutoCAD.DatabaseServices.TextStyleTable,Autodesk.AutoCAD.DatabaseServices.TextStyleTableRecord},System.String,System.String,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            <p>添加文字样式记录,如果存在就默认强制替换</p>
            <para>此函数为了 <see langword="二惊"/> 和 <see langword="edata"/> 而设</para>
            </summary>
            <param name="table">文字样式表</param>
            <param name="textStyleName">文字样式名</param>
            <param name="smallFont">字体名</param>
            <param name="bigFont">大字体名</param>
            <param name="xScale">宽度比例</param>
            <param name="height">高度</param>
            <param name="forceChange">是否强制替换</param>
            <returns>文字样式Id</returns>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTableRecordEx">
            <summary>
            符号表记录扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.DeepCloneEx(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,Autodesk.AutoCAD.DatabaseServices.IdMapping)">
            <summary>
            深度克隆id到块表记录
            <para>
            0x01 此方法不允许是未添加数据库的图元,因此它是id<br/>
            0x02 若为未添加数据库图元,则利用entity.Clone();同时不需要考虑动态块属性,可以使用entity.GetTransformedCopy
            </para>
            </summary>
            <param name="btr">
            <para>
            克隆到当前块表记录,相当于原地克隆<br/>
            克隆到目标块表记录内,相当于制作新块
            </para>
            </param>
            <param name="objIds">图元id集合,注意所有成员都要在同一个空间中</param>
            <param name="maoOut">返回克隆后的id词典</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            添加实体对象
            </summary>
            <param name="btr">块表记录</param>
            <param name="entity">实体</param>
            <returns>对象 id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity``1(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="btr">块表记录</param>
            <param name="ents">实体集合</param>
            <returns>对象 id 列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.AddEntity(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.Entity[])">
            <summary>
            添加多个实体
            </summary>
            <param name="btr">块表记录</param>
            <param name="ents">实体集合</param>
            <returns>对象 id 列表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetEntities``1(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取块表记录内的指定类型的实体
            (此处不会检查id.IsOk())
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="btr">块表记录</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetObjectIds``1(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            按类型获取实体Id
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="btr">块表记录</param>
            <returns>实体Id集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetObjectIds(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            按类型获取实体Id的分组
            </summary>
            <param name="btr">块表记录</param>
            <returns>实体Id分组</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.GetDrawOrderTable(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取绘制顺序表
            </summary>
            <param name="btr">块表</param>
            <param name="openMode">开启方式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>绘制顺序表</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.InsertBlock(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.Geometry.Point3d,System.String,Autodesk.AutoCAD.Geometry.Scale3d,System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            插入块参照
            </summary>
            <param name="blockTableRecord">块表记录</param>
            <param name="position">插入点</param>
            <param name="blockName">块名</param>
            <param name="scale">块插入比例，默认为1</param>
            <param name="rotation">块插入旋转角(弧度)，默认为0</param>
            <param name="atts">属性字典{Tag,Value}，默认为null</param>
            <param name="trans">事务</param>
            <returns>块参照对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.InsertBlock(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.Geometry.Point3d,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.Geometry.Scale3d,System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            插入块参照
            </summary>
            <param name="position">插入点</param>
            <param name="blockId">块定义id</param>
            <param name="scale">块插入比例，默认为1</param>
            <param name="rotation">块插入旋转角(弧度)，默认为0</param>
            <param name="atts">属性字典{Tag,Value}，默认为null</param>
            <returns>块参照对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId})">
            <summary>
            遍历符号表记录,执行委托
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要运行的委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState})">
            <summary>
            遍历符号表记录,执行委托(允许循环中断)
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要执行的委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTableRecordEx.ForEach``1(``0,System.Action{Autodesk.AutoCAD.DatabaseServices.ObjectId,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            遍历符号表记录,执行委托(允许循环中断,输出索引值)
            </summary>
            <param name="record">符号表记录</param>
            <param name="task">要执行的委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.Tools.TestTimes2(System.Int32,System.String,System.Action)">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Tools.TestTimes3(System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Tools.TestTimes(System.Int32,System.String,System.Action,IFoxCAD.Basal.Timer.TimeEnum)">
            <summary>
            纳秒计时器
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.TransactionEx">
            <summary>
            cad的事务的扩展类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TransactionEx.GetObject(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取对象
            </summary>
            <param name="tr"></param>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>数据库DBObject对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.TransactionEx.GetObject``1(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取图元对象
            </summary>
            <typeparam name="T">要获取的图元对象的类型</typeparam>
            <param name="tr"></param>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元对象,类型不匹配时抛异常 </returns>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Unload">
            <summary>
            卸载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Reload">
            <summary>
            重载
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Detach">
            <summary>
            拆离
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IXrefBindModes.Bind">
            <summary>
            绑定
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory._xrefNames">
            <summary>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.UseThreadEngine">
            <summary>
            解析外部参照:线性引擎<br/>
            默认<see langword="false"/><br/>
            <see langword="true"/>时会在cad命令历史打印一些AEC信息,并导致绑定慢一点...具体作用不详<br/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.DoNewOnly">
            <summary>
            解析外部参照:仅处理 Unresolved_未融入(未解析)的参照<br/>
            默认<see langword="true"/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.IncludeGhosts">
            <summary>
            解析外部参照:包含僵尸参照
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.BindOrInsert">
            <summary>
            绑定模式和双美元符号相关(与cad保持相同的默认)<br/>
            <see langword="false"/>为绑定模式,产生双美元;
            <see langword="true"/>为插入模式,块重名会以本图覆盖;
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.AutoDetach">
            <summary>
            bind时候是否拆离参照<br/>
            默认<see langword="true"/>:学官方的绑定后自动拆离
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.EraseNested">
            <summary>
            bind时候是否删除被卸载的嵌套参照<br/>
            默认<see langword="true"/>
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefFactory.SymModesBind">
            <summary>
            bind时候控制绑定的符号表:请保持默认<br/>
            目前仅推荐用于<see cref="F:IFoxCAD.Cad.SymModes.LayerTable"/>项<br/>
            其他项有异常:<see langword="eWasOpenForNotify"/><br/>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.#ctor(IFoxCAD.Cad.DBTrans,System.Collections.Generic.HashSet{System.String})">
            <summary>
            参照工厂
            </summary>
            <param name="tr"></param>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.GetAllXrefNode(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection)">
            <summary>
            获取参照
            </summary>
            <param name="xrefIds">返回全部参照id</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.XrefNodeForEach(System.Action{System.String,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.XrefStatus,System.Boolean})">
            <summary>
            遍历参照
            </summary>
            <param name="action">(参照名,参照块表记录id,参照状态,是否嵌入)</param>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.AddedxbindIds``2(Autodesk.AutoCAD.DatabaseServices.ObjectIdCollection,IFoxCAD.Cad.SymbolTable{``0,``1})">
            <summary>
            符号表记录加入容器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.GetDetachIds(System.Collections.Generic.Dictionary{Autodesk.AutoCAD.DatabaseServices.ObjectId,System.String})">
            <summary>
            获取可以拆离的ids
            </summary>
            <param name="nested">返回已卸载中含有嵌套的参照,要重载之后才能绑定</param>
            <returns>返回未参照中嵌套的参照,直接拆离</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefFactory.DoubleBind">
            <summary>
            双重绑定参照
            <a href="https://www.cnblogs.com/SHUN-ONCET/p/16593360.html">参考链接</a>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefEx.XrefFactory(IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.XrefModes,System.Collections.Generic.HashSet{System.String})">
            <summary>
            外部参照工厂
            </summary>
            <param name="tr"></param>
            <param name="xrefModes">处理参照的枚举</param>
            <param name="xrefNames">要处理的参照名称,<see langword="null"/>就处理所有</param>
        </member>
        <member name="T:IFoxCAD.Cad.XrefPath">
            <summary>
            获取外部参照的路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.XrefPath.CurrentDatabasePath">
            <summary>
            基础路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.IsFromExternalReference">
            <summary>
            是否外部参照
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathSave">
            <summary>
            外部参照保存的路径
            <para>
            它们会是以下任一路径:<br/>
            0x01 相对路径<br/>
            0x02 绝对路径<br/>
            0x03 共目录优先找到的路径(文件夹整体移动会发生此类情况)
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathDescribe">
            <summary>
            找到的路径(参照面板的名称)
            <para><see cref="P:IFoxCAD.Cad.XrefPath.PathSave"/>路径不存在时,返回是外部参照dwg文件路径</para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathComplete">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.XrefPath.PathRelative">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.#ctor(Autodesk.AutoCAD.DatabaseServices.BlockReference,IFoxCAD.Cad.DBTrans)">
            <summary>
            获取外部参照的路径
            </summary>
            <param name="brf">外部参照图元</param>
            <param name="tr">事务</param>
            <returns>是否外部参照</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.PathConverter(System.String,System.String,IFoxCAD.Cad.PathConverterModes)">
            <summary>
            获取相对路径或者绝对路径
            <see href="https://www.cnblogs.com/hont/p/5412340.html">参考链接</see>
            </summary>
            <param name="directory">基础目录(末尾无斜杠)</param>
            <param name="fileRelations">相对路径或者绝对路径</param>
            <param name="converterModes">依照枚举返回对应的字符串</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.GetRelativePath(System.String,System.String)">
            <summary>
            绝对路径->相对路径
            </summary>
            <param name="directory">相对关系:文件夹路径</param>
            <param name="file">完整路径:文件路径</param>
            <returns>相对路径</returns>
            <![CDATA[
            GetRelativePath("G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\03.平面图",
            "G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\01.辅助文件\\图框\\A3图框.dwg")
            =>  "..\\01.辅助文件\\图框\\A3图框.dwg"
            ]]>
        </member>
        <member name="M:IFoxCAD.Cad.XrefPath.GetCompletePath(System.String,System.String)">
            <summary>
            相对路径->绝对路径
            </summary>
            <param name="directory">文件夹路径</param>
            <param name="relativePath">相对关系:有..的</param>
            <returns>完整路径</returns>
            <![CDATA[
            GetCompletePath("G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\03.平面图" ,
            "..\\01.辅助文件\\图框\\A3图框.dwg")
            =>   "G:\\A1.项目\\20190920金山谷黄宅\\01.饰施图\\01.辅助文件\\图框\\A3图框.dwg"
            ]]>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter">
            <summary>
            填充边界转换器
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter.CircleData">
            <summary>
            生成圆形数据
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CircleData.#ctor(Autodesk.AutoCAD.Geometry.Point2d,Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            生成圆形数据
            </summary>
            <param name="symmetryAxisPoint1">对称点1</param>
            <param name="symmetryAxisPoint2">对称点2</param>
        </member>
        <member name="T:IFoxCAD.Cad.HatchConverter.HatchConverterData">
            <summary>
            填充转换器的数据
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchConverterData.#ctor">
            <summary>
            填充转换器的数据
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchConverter.OldHatchId">
            <summary>
            外部只能调用id,否则跨事务造成错误
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchConverter.BoundaryIds">
            <summary>
            填充边界id(生成的/已存在反应器的直接提取)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.#ctor">
            <summary>
            填充边界转换器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.#ctor(Autodesk.AutoCAD.DatabaseServices.Hatch)">
            <summary>
            填充边界转换器
            </summary>
            <param name="hatch">需要转化的Hatch对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.GetBoundarysData">
            <summary>
            提取边界信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchLoopIsPolyline(Autodesk.AutoCAD.DatabaseServices.HatchLoop,IFoxCAD.Cad.HatchConverter.HatchConverterData)">
            <summary>
            多段线处理
            </summary>
            <param name="loop">填充边界</param>
            <param name="hcData">收集图元信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.TwoArcFormOneCircle(Autodesk.AutoCAD.DatabaseServices.HatchLoop)">
            <summary>
            两个圆弧组成圆形
            </summary>
            <param name="loop"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.HatchLoopIsCurve2d(Autodesk.AutoCAD.DatabaseServices.HatchLoop,IFoxCAD.Cad.HatchConverter.HatchConverterData)">
            <summary>
            处理边界曲线
            </summary>
            <param name="loop">填充边界</param>
            <param name="hcData">收集图元信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CreateBoundary(System.Collections.Generic.List{Autodesk.AutoCAD.DatabaseServices.Entity})">
            <summary>
            创建边界图元
            </summary>
            <param name="outEnts">返回图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.CreateBoundarysAndHatchToMsPs(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.Boolean,System.Boolean)">
            <summary>
            创建边界图元和新填充到当前空间
            </summary>
            <param name="btrOfAddEntitySpace"></param>
            <param name="boundaryAssociative">边界关联</param>
            <param name="createHatchFlag">是否创建填充,false则只创建边界</param>
            <returns>新填充id,边界在<see cref="F:IFoxCAD.Cad.HatchConverter.BoundaryIds"/>获取</returns>
        </member>
        <member name="M:IFoxCAD.Cad.HatchConverter.ResetBoundary(Autodesk.AutoCAD.DatabaseServices.Hatch,System.Boolean)">
            <summary>
            重设边界
            </summary>
            <param name="hatch"></param>
            <param name="boundaryAssociative">边界关联</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchEx.ForEach(Autodesk.AutoCAD.DatabaseServices.Hatch,System.Action{Autodesk.AutoCAD.DatabaseServices.HatchLoop})">
            <summary>
            遍历填充每条边
            </summary>
            <param name="hatch"></param>
            <param name="action"></param>
        </member>
        <member name="T:IFoxCAD.Cad.HatchInfo">
            <summary>
            图案填充
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._boundaryIds">
            <summary>
            边界id(最外面放第一)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._hatch">
            <summary>
            填充图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._boundaryAssociative">
            <summary>
            边界关联(此处不能直接=>给填充成员,因为它会加入反应器)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._hatchName">
            <summary>
            填充的名称:用户定义(固定名称)/渐变/填充依据定义文件
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._patternTypeHatch">
            <summary>
            填充模式类型(预定义/用户定义/自定义)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo._patternTypeGradient">
            <summary>
            渐变模式类型
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchInfo.Scale">
            <summary>
            比例/间距
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.HatchInfo.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.#ctor(System.Boolean,System.Nullable{Autodesk.AutoCAD.Geometry.Point2d},System.Double,System.Double)">
            <summary>
            图案填充
            </summary>
            <param name="boundaryAssociative">关联边界</param>
            <param name="hatchOrigin">填充原点</param>
            <param name="hatchScale">比例</param>
            <param name="hatchAngle">角度</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},System.Boolean,System.Nullable{Autodesk.AutoCAD.Geometry.Point2d},System.Double,System.Double)">
            <summary>
            图案填充
            </summary>
            <param name="boundaryIds">边界</param>
            <param name="boundaryAssociative">关联边界</param>
            <param name="hatchOrigin">填充原点</param>
            <param name="hatchScale">比例</param>
            <param name="hatchAngle">角度</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode1PreDefined(System.String)">
            <summary>
            模式1:预定义
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode2UserDefined(System.Boolean)">
            <summary>
            模式2:用户定义
            </summary>
            <param name="patternDouble">是否双向</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode3UserDefined(System.String)">
            <summary>
            模式3:自定义
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Mode4Gradient(IFoxCAD.Cad.HatchInfo.GradientName,Autodesk.AutoCAD.Colors.Color,Autodesk.AutoCAD.Colors.Color,System.Single,System.Single,System.Boolean)">
            <summary>
            模式4:渐变填充
            </summary>
            <param name="name">渐变填充名称</param>
            <param name="colorStart">渐变色起始颜色</param>
            <param name="colorEnd">渐变色结束颜色</param>
            <param name="gradientShift">渐变移动</param>
            <param name="shadeTintValue">色调值</param>
            <param name="gradientOneColorMode">单色<see langword="true"/>双色<see langword="false"/></param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Build(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary>
            构建
            </summary>
            <param name="btrOfAddEntitySpace">将填充加入此空间</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.Action(System.Action{Autodesk.AutoCAD.DatabaseServices.Hatch})">
            <summary>
            执行图元的属性修改
            </summary>
            <param name="action">扔出填充实体</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.ClearBoundary">
            <summary>
            清空边界集合
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.EraseBoundary">
            <summary>
            删除边界图元
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.AppendLoop(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.HatchLoopTypes)">
            <summary>
            加入边界
            </summary>
            <param name="boundaryIds">边界id</param>
            <param name="hatchLoopTypes">加入方式</param>
        </member>
        <member name="M:IFoxCAD.Cad.HatchInfo.AppendLoop(Autodesk.AutoCAD.Geometry.Point2dCollection,Autodesk.AutoCAD.Geometry.DoubleCollection,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.HatchLoopTypes)">
            <summary>
            加入边界(仿高版本的填充函数)
            </summary>
            <param name="pts">点集</param>
            <param name="bluges">凸度集</param>
            <param name="btrOfAddEntitySpace">加入此空间</param>
            <param name="hatchLoopTypes">加入方式</param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.HatchInfo.GradientName">
            <summary>
            渐变色填充的图案名称
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Linear">
            <summary>
            线状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Cylinder">
            <summary>
            圆柱状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Invcylinder">
            <summary>
            反圆柱状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Spherical">
            <summary>
            球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Invspherical">
            <summary>
            反球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Hemisperical">
            <summary>
            半球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.InvHemisperical">
            <summary>
            反半球状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Curved">
            <summary>
            抛物面状渐变
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.HatchInfo.GradientName.Incurved">
            <summary>
            反抛物面状渐变
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AttachmentPointHelper">
            <summary>
            文字对齐点帮助类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AttachmentPointHelper.Get(System.String)">
            <summary>
            输入文字获得对齐方式
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AttachmentPointHelper.Get(Autodesk.AutoCAD.DatabaseServices.AttachmentPoint)">
            <summary>
            输入对齐方式获得文字说明
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.IdleAction">
            <summary>
            空闲执行
            by DYH
            20230114
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleAction.alreadyLoad">
            <summary>
            是否已经加载
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IdleAction._actions">
            <summary>
            委托列表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.IdleAction.Count">
            <summary>
            未处理的委托数量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IdleAction.Add(System.Action)">
            <summary>
            添加空闲执行委托
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.IdleAction.Acap_Idle(System.Object,System.EventArgs)">
            <summary>
            空闲处理事件
            </summary>
            <param name="sender">Acap</param>
            <param name="e">事件参数</param>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.RecordGraphicsModified">
            <summary>
            块更新
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.RecomputeDimensionBlock">
            <summary>
            标注更新
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Draw">
            <summary>
            重画
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Highlight">
            <summary>
            亮显
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.Unhighlight">
            <summary>
            亮显取消
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.VisibleTrue">
            <summary>
            显示图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.VisibleFalse">
            <summary>
            隐藏图元
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEntity.MoveZero">
            <summary>
            平移更新,可以令ctrl+z撤回时候保证刷新
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.UpdateScreen">
            <summary>
            刷新屏幕,图元不生成(例如块还是旧的显示)
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.Regen">
            <summary>
            刷新全图
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.SelectionClean">
            <summary>
            清空选择集
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.ViewportsFrom">
            <summary>
            视口外
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.BrightEditor.ViewportsIn">
            <summary>
            视口内
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            刷新屏幕
            </summary>
            <param name="ed">编辑器</param>
            <param name="ent">图元</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.EditorInput.Editor,IFoxCAD.Cad.BrightEditor)">
            <summary>
            刷新屏幕
            </summary>
            <param name="ed">编辑器</param>
            <param name="bright">更新的方式</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Redraw(Autodesk.AutoCAD.DatabaseServices.Entity,IFoxCAD.Cad.BrightEntity)">
            <summary>
            更改图元显示
            </summary>
            <param name="ent">图元,调用时候图元必须提权</param>
            <param name="bright">更新的方式</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Flush(Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            刷新实体显示
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.RedrawEx.Flush(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            刷新实体显示
            </summary>
            <param name="id">实体id</param>
        </member>
        <member name="T:IFoxCAD.Cad.LispDottedPair">
            <summary>
            lisp点对表的数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispDottedPair.#ctor">
            <summary>
            默认无参构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispDottedPair.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            构造函数
            </summary>
            <param name="values">TypedValue 迭代器</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispDottedPair.#ctor(Autodesk.AutoCAD.DatabaseServices.TypedValue,Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary>
            构造函数
            </summary>
            <param name="left">点对表左数</param>
            <param name="right">点对表右数</param>
        </member>
        <member name="P:IFoxCAD.Cad.LispDottedPair.Value">
            <summary>
            点对表的值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispDottedPair.op_Implicit(IFoxCAD.Cad.LispDottedPair)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            LispDottedPair 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispDottedPair.op_Implicit(IFoxCAD.Cad.LispDottedPair)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            LispDottedPair 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="T:IFoxCAD.Cad.LispList">
            <summary>
            lisp数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            构造函数
            </summary>
            <param name="values">TypedValue 迭代器</param>
        </member>
        <member name="P:IFoxCAD.Cad.LispList.Value">
            <summary>
            lisp 列表的值
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Runtime.LispDataType,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Boolean)">
            <summary>
            添加数据，参数为true时添加 lisp 中的 T，false时添加 lisp 中的 nil
            </summary>
            <param name="value">bool 型的数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.String)">
            <summary>
            添加字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int16)">
            <summary>
            添加短整型数
            </summary>
            <param name="value">短整型数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Int32)">
            <summary>
            添加整型数
            </summary>
            <param name="value">整型数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double)">
            <summary>
            添加浮点数
            </summary>
            <param name="value">浮点数</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            添加对象id
            </summary>
            <param name="value">对象id</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            添加选择集
            </summary>
            <param name="value">选择集</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Geometry.Point2d)">
            <summary>
            添加二维点
            </summary>
            <param name="value">二维点</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            添加三维点
            </summary>
            <param name="value">三维点</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double,System.Double)">
            <summary>
            添加二维点
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(System.Double,System.Double,System.Double)">
            <summary>
            添加三维点
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.Add(IFoxCAD.Cad.LispList)">
            <summary>
            添加列表
            </summary>
            <param name="value">lisp 列表</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.LispList">
            <summary>
            ResultBuffer 隐式转换到 LispList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(IFoxCAD.Cad.LispList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            LispList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(IFoxCAD.Cad.LispList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            LispList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例,要using</param>
        </member>
        <member name="M:IFoxCAD.Cad.LispList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.LispList">
            <summary>
            TypedValue 数组隐式转换到 LispList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.TypedValueList">
            <summary>
            用于集中管理扩展数据/扩展字典/resultbuffer的类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.#ctor">
            <summary>
            默认无参构造函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            采用 TypedValue 迭代器构造 TypedValueList
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.TypedValueList">
            <summary>
            ResultBuffer 隐式转换到 TypedValueList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(IFoxCAD.Cad.TypedValueList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            TypedValueList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(IFoxCAD.Cad.TypedValueList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            TypedValueList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.TypedValueList">
            <summary>
            TypedValue 数组隐式转换到 TypedValueList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="M:IFoxCAD.Cad.TypedValueList.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>ResultBuffer 字符串</returns>
        </member>
        <member name="T:IFoxCAD.Cad.XDataList">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.#ctor">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            扩展数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Contains(System.String)">
            <summary>
            是否含有注册名
            </summary>
            <param name="appName">注册名</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.Contains(System.String,System.Object)">
            <summary>
            注册名下含有指定成员
            </summary>
            <param name="appName">注册名</param>
            <param name="value">内容</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.GetXdataAppIndex(System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode[])">
            <summary>
            获取appName的索引区间
            </summary>
            <param name="appName">注册名称</param>
            <param name="dxfCodes">任务组码对象</param>
            <returns>返回任务组码的索引</returns>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.RangeTask(System.String,System.Action{Autodesk.AutoCAD.DatabaseServices.TypedValue,IFoxCAD.Basal.LoopState,System.Int32})">
            <summary>
            区间任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.XDataList">
            <summary>
            ResultBuffer 隐式转换到 XDataList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(IFoxCAD.Cad.XDataList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            XDataList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(IFoxCAD.Cad.XDataList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            XDataList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.XDataList">
            <summary>
            TypedValue 数组隐式转换到 XDataList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.XRecordDataList">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.#ctor">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.TypedValue})">
            <summary>
            扩展字典数据封装类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.Add(System.Int32,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">组码</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="code">dxfcode枚举值</param>
            <param name="obj">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)~IFoxCAD.Cad.XRecordDataList">
            <summary>
            ResultBuffer 隐式转换到 XRecordDataList
            </summary>
            <param name="buffer">ResultBuffer 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(IFoxCAD.Cad.XRecordDataList)~Autodesk.AutoCAD.DatabaseServices.TypedValue[]">
            <summary>
            XRecordDataList 隐式转换到 TypedValue 数组
            </summary>
            <param name="values">TypedValueList 实例</param>
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(IFoxCAD.Cad.XRecordDataList)~Autodesk.AutoCAD.DatabaseServices.ResultBuffer">
            <summary>
            XRecordDataList 隐式转换到 ResultBuffer
            </summary>
            <param name="values">TypedValueList 实例</param>s
        </member>
        <member name="M:IFoxCAD.Cad.XRecordDataList.op_Implicit(Autodesk.AutoCAD.DatabaseServices.TypedValue[])~IFoxCAD.Cad.XRecordDataList">
            <summary>
            TypedValue 数组隐式转换到 XRecordDataList
            </summary>
            <param name="values">TypedValue 数组</param>
        </member>
        <member name="T:IFoxCAD.Cad.AcadVersion">
            <summary>
            cad版本号类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AcadVersion.Versions">
            <summary>
            所有安装的cad的版本号
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AcadVersion.FromApp(System.Object)">
            <summary>已打开的cad的版本号</summary>
            <param name="app">已打开cad的application对象</param>
            <returns>cad版本号对象</returns>
        </member>
        <member name="T:IFoxCAD.Cad.CadVersion">
            <summary>
            CAD版本
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CadVersion.Major">
            <summary>
            主版本
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CadVersion.Minor">
            <summary>
            次版本
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.CadVersion.ProgId">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CadVersion.ProductName">
            <summary>
            注册表名称
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.CadVersion.ProductRootKey">
            <summary>
            注册表位置
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.CadVersion.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>表示版本号的字符串</returns>
        </member>
        <member name="T:IFoxCAD.Cad.AcadEMR">
            <summary>
            去教育版
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.FreeLibrary(System.IntPtr)">
            <summary>
            释放库
            </summary>
            <param name="loadLibraryIntPtr">句柄</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.GetModuleHandle(System.String)">
            <summary>
            获取一个应用程序或dll的模块句柄,要求已经载入
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取要引入的函数,将符号名或标识号转换为DLL内部地址
            </summary>
            <param name="hModule">exe/dll句柄</param>
            <param name="procName">接口名</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.VirtualProtect(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            虚拟保护
            </summary>
            <param name="lpAddress"></param>
            <param name="dwSize"></param>
            <param name="flNewProtect"></param>
            <param name="lpflOldProtect"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.Remove(System.Boolean)">
            <summary>
            移除教育版
            </summary>
            <param name="echoes">打印出错信息</param>
        </member>
        <member name="M:IFoxCAD.Cad.AcadEMR.CheckFunc(System.IntPtr@,System.Byte,System.Int32)">
            <summary>
            验证函数体
            </summary>
            <param name="adress"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.AssemInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Name">
            <summary>
            注册名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Fullname">
            <summary>
            程序集全名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Loader">
            <summary>
            程序集路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.LoadType">
            <summary>
            加载方式
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemInfo.Description">
            <summary>
            程序集说明
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AssemLoadType">
            <summary>
            程序集加载类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.Startting">
            <summary>
            启动
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.ByCommand">
            <summary>
            随命令
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AssemLoadType.Disabled">
            <summary>
            无效
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoRegConfig">
            <summary>
            注册中心配置信息
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.Undefined">
            <summary>
            不进行任何操作
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.Regedit">
            <summary>
            注册表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.ReflectionAttribute">
            <summary>
            反射特性
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.ReflectionInterface">
            <summary>
            反射接口
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AutoRegConfig.RemoveEMR">
            <summary>
            移除教育版
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoLoad">
            <summary>
            自动加载和初始化抽象类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoLoad.Location">
            <summary>
            程序集的路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoLoad.CurrentDirectory">
            <summary>
            程序集的目录
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.GetDirectory(System.Reflection.Assembly)">
            <summary>
            获取程序集的目录
            </summary>
            <param name="assem">程序集</param>
            <returns>路径对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.#ctor">
            <summary>
            初始化程序集信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.AppendSupportPath(System.String)">
            <summary>
            添加 path 到 acad环境变量
            </summary>
            <param name="path">目录</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.RegApp">
            <summary>
            在注册表写入自动加载的程序集信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.Initialize">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoLoad.Terminate">
            <summary>
            结束函数
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoRegAssem">
            <summary>
            注册中心
            <para>
            初始化程序集信息写入注册表并反射<see cref="T:IFoxCAD.Cad.IFoxInitialize"/>特性和<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口<br/>
            启动cad后的执行顺序为:<br/>
            1:<see cref="T:IFoxCAD.Cad.AutoRegAssem"/>程序集配置中心构造函数<br/>
            2:<see cref="T:IFoxCAD.Cad.IFoxInitialize"/>特性..(多个)<br/>
            3:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口..(多个)<br/>
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoRegAssem.Location">
            <summary>
            程序集的路径
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.AutoRegAssem.CurrDirectory">
            <summary>
            程序集的目录
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.GetDirectory(System.Reflection.Assembly)">
            <summary>
            获取程序集的目录
            </summary>
            <param name="assem">程序集</param>
            <returns>路径对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.#ctor(IFoxCAD.Cad.AutoRegConfig)">
            <summary>
            注册中心
            </summary>
            <param name="autoRegConfig">配置项目</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.GetAcAppKey(System.Boolean)">
            <summary>
            获取当前cad注册表位置
            </summary>
            <param name="writable">打开权限</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.UnRegApp">
            <summary>
            卸载注册表信息
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.SearchForReg">
            <summary>
            是否已经存在注册表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoRegAssem.RegApp">
            <summary>
            在注册表写入自动加载的程序集信息
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.Sequence">
            <summary>
            加载时优先级
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.IFoxAutoGo">
            <summary>
            加载时自动执行接口
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.IFoxInitialize">
            <summary>
            加载时自动执行特性
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IFoxInitialize.SequenceId">
            <summary>
            优先级
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.IFoxInitialize.IsInitialize">
            <summary>
            <see langword="true"/>用于初始化;<see langword="false"/>用于结束回收
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.IFoxInitialize.#ctor(IFoxCAD.Cad.Sequence,System.Boolean)">
            <summary>
            用于初始化和结束回收
            </summary>
            <param name="sequence">优先级</param>
            <param name="isInitialize"><see langword="true"/>用于初始化;<see langword="false"/>用于结束回收</param>
        </member>
        <member name="M:IFoxCAD.Cad.RunClass.#ctor(System.Reflection.MethodInfo,IFoxCAD.Cad.Sequence,System.Object)">
            <summary>
            执行此方法
            </summary>
            <param name="method"></param>
            <param name="sequence"></param>
            <param name="instance">已经创建的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.RunClass.Run">
            <summary>
            运行方法
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.AutoReflection">
            <summary>
            此类作为加载后cad自动运行接口的一部分,用于反射特性和接口
            <para>
            启动cad后的执行顺序为:<br/>
            1:<see cref="T:IFoxCAD.Cad.IFoxInitialize"/>特性..(多个)<br/>
            2:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>接口..(多个)
            </para>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.#ctor(System.String,IFoxCAD.Cad.AutoRegConfig)">
            <summary>
            反射执行
            <para>
            1.特性:<see cref="T:IFoxCAD.Cad.IFoxInitialize"/><br/>
            2.接口:<see cref="T:IFoxCAD.Cad.IFoxAutoGo"/>
            </para>
            </summary>
            <param name="dllName">约束在此dll进行加速</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.Terminate">
            <summary>
            关闭cad的时候会自动执行
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.AppDomainGetTypes(System.Action{System.Type},System.String)">
            <summary>
            遍历程序域下所有类型
            </summary>
            <param name="action">输出每个成员执行</param>
            <param name="dllNameWithoutExtension">过滤此dll,不含后缀</param>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.GetInterfaceFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.String,System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.String)">
            <summary>
            收集接口下的函数
            </summary>
            <param name="runClassList">储存要运行的方法</param>
            <param name="methodName">查找方法名</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.GetAttributeFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass},System.Collections.Generic.List{IFoxCAD.Cad.RunClass})">
            <summary>
            收集特性下的函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.RunFunctions(System.Collections.Generic.List{IFoxCAD.Cad.RunClass})">
            <summary>
            执行收集到的函数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AutoReflection.DebugCheckCmdRecurrence">
            <summary>
            检查当前程序域重复出现命令,
            当出现重复时候将引起断点
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.MethodInfoHelper.Invoke(System.Reflection.MethodInfo,System.Object@)">
            <summary>
            执行函数
            </summary>
            <param name="methodInfo">函数</param>
            <param name="instance">已经外部创建的对象,为空则此处创建</param>
        </member>
        <member name="M:IFoxCAD.Cad.CheckFactory.CheckDuplicateCommand(System.Reflection.Assembly)">
            <summary>
            检查Command命令重复
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBTrans">
            <summary>
            事务栈
            <para>隐匿事务在数据库其中担任的角色</para>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetTopTransaction(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取顶层事务
            </summary>
            <param name="database">数据库</param>
            <returns>事务对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetTop(Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary>
            获取给定数据库的顶层 DBTrans 事务
            </summary>
            <param name="database">数据库</param>
            <returns>DBTrans 事务</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._dBTrans">
            <summary>
            事务栈
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._documentLock">
            <summary>
            文档锁
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._commit">
            <summary>
            是否提交事务
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.DBTrans._fileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Top">
            <summary>
            返回当前事务
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Document">
            <summary>
            文档
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Editor">
            <summary>
            命令行
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Transaction">
            <summary>
            事务管理器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(Autodesk.AutoCAD.ApplicationServices.Document,System.Boolean,System.Boolean)">
            <summary>
            事务栈
            <para>默认构造函数,默认为打开当前文档,默认提交事务</para>
            </summary>
            <param name="doc">要打开的文档</param>
            <param name="commit">事务是否提交</param>
            <param name="doclock">是否锁文档</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(Autodesk.AutoCAD.DatabaseServices.Database,System.Boolean)">
            <summary>
            事务栈
            <para>打开数据库,默认提交事务</para>
            </summary>
            <param name="database">要打开的数据库</param>
            <param name="commit">事务是否提交</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.#ctor(System.String,System.Boolean,Autodesk.AutoCAD.DatabaseServices.FileOpenMode,System.String,System.Boolean)">
            <summary>
            事务栈
            <para>打开文件,默认提交事务</para>
            </summary>
            <param name="fileName">要打开的文件名</param>
            <param name="commit">事务是否提交</param>
            <param name="fileOpenMode">开图模式</param>
            <param name="password">密码</param>
            <param name="activeOpen">后台打开false;前台打开true(必须设置CommandFlags.Session)</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.op_Implicit(IFoxCAD.Cad.DBTrans)~Autodesk.AutoCAD.DatabaseServices.Transaction">
            <summary>
            隐式转换为Transaction
            </summary>
            <param name="tr">事务管理器</param>
            <returns>事务管理器</returns>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.BlockTable">
            <summary>
            块表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.CurrentSpace">
            <summary>
            当前绘图空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ModelSpace">
            <summary>
            模型空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PaperSpace">
            <summary>
            图纸空间
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LayerTable">
            <summary>
            层表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.TextStyleTable">
            <summary>
            文字样式表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.RegAppTable">
            <summary>
            注册应用程序表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DimStyleTable">
            <summary>
            标注样式表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LinetypeTable">
            <summary>
            线型表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.UcsTable">
            <summary>
            用户坐标系表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ViewTable">
            <summary>
            视图表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ViewportTable">
            <summary>
            视口表
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.NamedObjectsDict">
            <summary>
            命名对象字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.GroupDict">
            <summary>
            组字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MLeaderStyleDict">
            <summary>
            多重引线样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MLStyleDict">
            <summary>
            多线样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.MaterialDict">
            <summary>
            材质字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.TableStyleDict">
            <summary>
            表格样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.VisualStyleDict">
            <summary>
            视觉样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.ColorDict">
            <summary>
            颜色字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PlotSettingsDict">
            <summary>
            打印设置字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.PlotStyleNameDict">
            <summary>
            打印样式表名字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.LayoutDict">
            <summary>
            布局字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DataLinkDict">
            <summary>
            数据链接字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.DetailViewStyleDict">
            <summary>
            详细视图样式字典
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.SectionViewStyleDict">
            <summary>
            剖面视图样式字典
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetObject(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取对象
            </summary>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>数据库DBObject对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetObject``1(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            根据对象id获取图元对象
            </summary>
            <typeparam name="T">要获取的图元对象的类型</typeparam>
            <param name="id">对象id</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>图元对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.GetObjectId(System.String)">
            <summary>
            根据对象句柄字符串获取对象Id
            </summary>
            <param name="handleString">句柄字符串</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Task(System.Action,System.Boolean)">
            <summary>
            前台后台任务分别处理
            </summary>
            <remarks>
            备注:<br/>
            0x01 文字偏移问题主要出现线性引擎函数<see cref="M:Autodesk.AutoCAD.DatabaseServices.Database.ResolveXrefs(System.Boolean,System.Boolean)"/>上面,<br/>
                 在 参照绑定/深度克隆 的底层共用此函数导致<br/>
            0x02 后台是利用前台当前数据库进行处理的<br/>
            0x03 跨进程通讯暂无测试(可能存在bug)<br/>
            </remarks>
            <param name="action">委托</param>
            <param name="handlingDBTextDeviation">开启单行文字偏移处理</param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Abort">
            <summary>
            取消事务
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.DBTrans.IsDisposed">
            <summary>
            是否释放事务
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Dispose">
            <summary>
            手动调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Finalize">
            <summary>
            析构函数调用释放
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.Dispose(System.Boolean)">
            <summary>
            释放函数
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IFoxCAD.Cad.DBTrans.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IFoxCAD.Cad.Env">
            <summary>
            系统管理类
            <para>
            封装了一些系统 osmode;cmdecho;dimblk 系统变量<br/>
            封装了常用的 文档 编辑器 数据库等对象为静态变量<br/>
            封装了配置页面的注册表信息获取函数
            </para>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Database">
            <summary>
            当前的数据库
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Document">
            <summary>
            当前文档
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Editor">
            <summary>
            编辑器对象
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.GsManager">
            <summary>
            图形管理器
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetCurrentProfileProperty(System.String,System.String)">
            <summary>
            获取当前配置的数据
            </summary>
            <param name="subSectionName">小节名</param>
            <param name="propertyName">数据名</param>
            <returns>对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDialogSection(System.Object)">
            <summary>
            获取对话框配置的数据
            </summary>
            <param name="dialog">对话框对象</param>
            <returns>配置项</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetGlobalSection(System.String)">
            <summary>
            获取公共配置的数据
            </summary>
            <param name="propertyName">数据名</param>
            <returns>配置项</returns>
        </member>
        <member name="P:IFoxCAD.Cad.Env.CmdEcho">
            <summary>
            控制在AutoLISP的command函数运行时AutoCAD是否回显提示和输入， <see langword="true"/> 为显示， <see langword="false"/> 为不显示
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.CmdActive">
            <summary>
            获取Cad当前是否有活动命令
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.OrthoMode">
            <summary>
            控制在光标是否为正交模式， <see langword="true"/> 为打开正交， <see langword="false"/> 为关闭正交
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.LastPoint">
            <summary>
            读写系统变量LastPoint的坐标(UCS)
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.Env.DimblkType">
            <summary>
            标注箭头类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Defult">
            <summary>
            实心闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Dot">
            <summary>
            点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DotSmall">
            <summary>
            小点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DotBlank">
            <summary>
            空心点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Origin">
            <summary>
            原点标记
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Origin2">
            <summary>
            原点标记2
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open90">
            <summary>
            直角
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Open30">
            <summary>
            30度角
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Closed">
            <summary>
            闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Small">
            <summary>
            空心小点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Oblique">
            <summary>
            倾斜
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.BoxFilled">
            <summary>
            实心框
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.BoxBlank">
            <summary>
            方框
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.ClosedBlank">
            <summary>
            空心闭合
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DatumFilled">
            <summary>
            实心基准三角形
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.DatumBlank">
            <summary>
            基准三角形
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.Integral">
            <summary>
            完整标记
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.DimblkType.ArchTick">
            <summary>
            建筑标记
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.Dimblk">
            <summary>
            标注箭头属性
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDimblkName(IFoxCAD.Cad.Env.DimblkType)">
            <summary>
            获取标注箭头名
            </summary>
            <param name="dimblk">标注箭头类型</param>
            <returns>箭头名</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDimblkId(IFoxCAD.Cad.Env.DimblkType)">
            <summary>
            获取标注箭头ID
            </summary>
            <param name="dimblk">标注箭头类型</param>
            <returns>箭头ID</returns>
        </member>
        <member name="T:IFoxCAD.Cad.Env.OSModeType">
            <summary>
            捕捉模式系统变量类型
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.End">
            <summary>
            端点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Middle">
            <summary>
            中点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Center">
            <summary>
            圆心
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Node">
            <summary>
            节点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Quadrant">
            <summary>
            象限点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Intersection">
            <summary>
            交点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Insert">
            <summary>
            插入点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Pedal">
            <summary>
            垂足
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Tangent">
            <summary>
            切点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Nearest">
            <summary>
            最近点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Quick">
            <summary>
            几何中心
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Appearance">
            <summary>
            外观交点
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Extension">
            <summary>
            延伸
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.Env.OSModeType.Parallel">
            <summary>
            平行
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.Env.OSMode">
            <summary>
            捕捉模式系统变量
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.Env.Include(IFoxCAD.Cad.Env.OSModeType,IFoxCAD.Cad.Env.OSModeType)">
            <summary>
            捕捉模式osm1是否包含osm2
            </summary>
            <param name="osm1">原模式</param>
            <param name="osm2">要比较的模式</param>
            <returns>包含时返回 <see langword="true"/>，不包含时返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetVar(System.String)">
            <summary>
            获取cad系统变量
            </summary>
            <param name="varName">变量名</param>
            <returns>变量值</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetVar(System.String,System.Object,System.Boolean)">
            <summary>
            设置cad系统变量<br/>
            0x01 建议先获取现有变量值和设置的是否相同,否则直接设置会发生异常<br/>
            0x02 建议锁文档,否则 Psltscale 设置发生异常<br/>
            发生异常的时候vs输出窗口会打印一下,但是如果不介意也没啥问题
            </summary>
            <param name="varName">变量名</param>
            <param name="value">变量值</param>
            <param name="echo">输出异常,默认true;此设置仅为打印到命令栏,无法控制vs输出</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetEnv(System.String)">
            <summary>
            读取acad环境变量<br/>
            也能获取win环境变量
            </summary>
            <param name="name">变量名</param>
            <returns>返回值从不为null,需判断<see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetEnv(System.String,System.String)">
            <summary>
            设置acad环境变量<br/>
            它是不会报错的,但是直接设置会写入注册表的,<br/>
            如果是设置高低版本cad不同的变量,建议先读取判断再设置<br/>
            </summary>
            <param name="name">变量名</param>
            <param name="var">变量值</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.Print(System.Object)">
            <summary>
            命令行打印，会自动调用对象的toString函数
            </summary>
            <param name="message">要打印的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.Printl(System.Object)">
            <summary>
            命令行打印，会自动调用对象的toString函数,在打印内容前添加换行
            </summary>
            <param name="message">要打印的对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.Env.IsUcs">
            <summary>
            判断当前是否在UCS坐标下
            </summary>
            <returns>Bool</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetDefaultDwgVersion">
            <summary>
            获取当前配置文件的保存版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.IsDxfVersion(Autodesk.AutoCAD.DatabaseServices.DwgVersion)">
            <summary>
            是否为dxf版本号
            </summary>
            <param name="dwgVersion"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetAcadVersion">
            <summary>
            获取cad年份
            </summary>
            <exception cref="T:System.NotImplementedException">超出年份就报错</exception>
        </member>
        <member name="M:IFoxCAD.Cad.Env.GetAcapVersionDll(System.String)">
            <summary>
            获取带cad版本号的dll
            </summary>
            <param name="str">dll名字</param>
            <returns>dll的前面</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SetVarEx(System.String,System.String)">
            <summary>
            设置cad系统变量<br/>
            提供一个反序列化后,无cad异常输出的功能<br/>
            注意,您需要再此执行时候设置文档锁<br/>
            否则也将导致修改数据库异常<br/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>成功返回当前值,失败null</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IFoxCAD.Cad.Env.SaveCadVar(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            设置新系统变量,返回现有系统变量
            </summary>
            <param name="args">设置的变量词典</param>
            <returns>返回现有变量词典,然后下次就可以利用它进行设置回来了</returns>
        </member>
        <member name="M:IFoxCAD.Cad.Env.DelayUpdateLayLockFade">
            <summary>
            延迟更新图层锁定淡显状态
            在有锁定或解锁图层的命令的末尾使用
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SymbolTable`2">
            <summary>
            符号表管理类
            </summary>
            <typeparam name="TTable">符号表</typeparam>
            <typeparam name="TRecord">符号表记录</typeparam>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.DTrans">
            <summary>
            事务管理器
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.CurrentSymbolTable">
            <summary>
            当前符号表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.#ctor(IFoxCAD.Cad.DBTrans,Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Boolean)">
            <summary>
            构造函数，初始化Trans和CurrentSymbolTable属性
            </summary>
            <param name="tr">事务管理器</param>
            <param name="tableId">符号表id</param>
            <param name="defaultBehavior">默认行为:例如打开隐藏图层</param>
        </member>
        <member name="P:IFoxCAD.Cad.SymbolTable`2.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="key">对象名称</param>
            <returns>对象的id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Has(System.String)">
            <summary>
            判断是否存在符号表记录
            </summary>
            <param name="key">记录名</param>
            <returns>存在返回 <see langword="true"/>, 不存在返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Has(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            判断是否存在符号表记录
            </summary>
            <param name="objectId">记录id</param>
            <returns>存在返回 <see langword="true"/>, 不存在返回 <see langword="false"/></returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Add(`1)">
            <summary>
            添加符号表记录
            </summary>
            <param name="record">符号表记录</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Add(System.String,System.Action{`1})">
            <summary>
            添加符号表记录
            </summary>
            <param name="name">符号表记录名</param>
            <param name="action">符号表记录处理函数的无返回值委托</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(`1)">
            <summary>
            删除符号表记录
            </summary>
            <param name="record">符号表记录对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(System.String)">
            <summary>
            删除符号表记录
            </summary>
            <param name="name">符号表记录名</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Remove(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary>
            删除符号表记录
            </summary>
            <param name="id">符号表记录对象id</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Change(System.String,System.Action{`1})">
            <summary>
            修改符号表
            </summary>
            <param name="name">符号表记录名</param>
            <param name="action">修改委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.Change(Autodesk.AutoCAD.DatabaseServices.ObjectId,System.Action{`1})">
            <summary>
            修改符号表
            </summary>
            <param name="id">符号表记录id</param>
            <param name="action">修改委托</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecord(Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取符号表记录
            </summary>
            <param name="id">符号表记录的id</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>符号表记录</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecord(System.String,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean)">
            <summary>
            获取符号表记录
            </summary>
            <param name="name">符号表记录名</param>
            <param name="openMode">打开模式</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
            <returns>符号表记录</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecords">
            <summary>
            获取符号表记录
            </summary>
            <returns>符号表记录集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordNames">
            <summary>
            获取符号表记录的名字集合
            </summary>
            <returns>记录的名字集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordNames(System.Func{`1,System.Boolean})">
            <summary>
            获取符合过滤条件的符号表记录名字集合
            </summary>
            <param name="filter">过滤器委托</param>
            <returns>记录的名字集合</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordFrom(IFoxCAD.Cad.SymbolTable{`0,`1},System.String,System.Boolean)">
            <summary>
            从源数据库拷贝符号表记录
            </summary>
            <param name="table">符号表</param>
            <param name="name">符号表记录名</param>
            <param name="over">是否覆盖，<see langword="true"/> 为覆盖，<see langword="false"/> 为不覆盖</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetRecordFrom(System.Func{IFoxCAD.Cad.DBTrans,IFoxCAD.Cad.SymbolTable{`0,`1}},System.String,System.String,System.Boolean)">
            <summary>
            从文件拷贝符号表记录
            </summary>
            <param name="tableSelector">符号表过滤器</param>
            <param name="fileName">文件名</param>
            <param name="name">符号表记录名</param>
            <param name="over">是否覆盖，<see langword="true"/> 为覆盖，<see langword="false"/> 为不覆盖</param>
            <returns>对象id</returns>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托
            </summary>
            <param name="task">要运行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1,IFoxCAD.Basal.LoopState},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托(允许循环中断)
            </summary>
            <param name="task">要执行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.ForEach(System.Action{`1,IFoxCAD.Basal.LoopState,System.Int32},Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            遍历符号表,执行委托(允许循环中断,输出索引值)
            </summary>
            <param name="task">要执行的委托</param>
            <param name="openMode">打开模式,默认为只读</param>
            <param name="checkIdOk">检查id是否删除,默认true</param>
            <param name="openErased">是否打开已删除对象,默认为不打开</param>
            <param name="openLockedLayer">是否打开锁定图层对象,默认为不打开</param>
        </member>
        <member name="M:IFoxCAD.Cad.SymbolTable`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:IFoxCAD.Cad.SingleKeyWordHook">
            <summary>
            关键字不需要空格钩子
            By DYH 20230508
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.SingleKeyWordHook._keyWords">
            <summary>
            关键字合集
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.Key">
            <summary>
            上一个触发的关键字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.StringResult">
            <summary>
            上一个触发的关键字字符串
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.IsResponsed">
            <summary>
            是否响应了
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.#ctor(System.Boolean)">
            <summary>
            单字母关键字免输回车钩子
            </summary>
            <param name="escapeMode">使用esc(填false则使用回车)</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.AddKeys(System.Windows.Forms.Keys[])">
            <summary>
            添加Keys
            </summary>
            <param name="values">Keys集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.AddKeys(Autodesk.AutoCAD.EditorInput.KeywordCollection)">
            <summary>
            添加Keys
            </summary>
            <param name="keywordCollection">关键字集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Remove(System.Windows.Forms.Keys[])">
            <summary>
            移除Keys
            </summary>
            <param name="values">Keys集合</param>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Clear">
            <summary>
            清空Keys
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Reset">
            <summary>
            复位响应状态，每个循环开始时使用
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Pause">
            <summary>
            暂停工作
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.Working">
            <summary>
            开始工作
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.SingleKeyWordHook.IsDisposed">
            <summary>
            已经销毁
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.SingleKeyWordHook.KeyBoardSendKey(System.Windows.Forms.Keys,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            发送按键
            </summary>
            <param name="key"></param>
            <param name="bScan"></param>
            <param name="dwFlags"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="P:IFoxCAD.Cad.AcadPeInfo.Methods">
            <summary>
            同名函数指针们
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeInfo._findFuncName">
            <summary>
            用于查找PE不带修饰的函数名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.AcadPeInfo._acadPeEnum">
            <summary>
            枚举查找对象
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.#ctor(System.String,IFoxCAD.Cad.AcadPeEnum)">
            <summary>
            通过函数名获取指针,指定类型
            </summary>
            <param name="methodName">不带修饰的函数名</param>
            <param name="acadPeEnum">读取哪个cad内部文件的枚举(目前只支持两个)</param>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetDelegate``1(System.String,IFoxCAD.Cad.AcadPeEnum)">
            <summary>
            获取CAD的函数指针
            </summary>
            <typeparam name="TDelegate">委托</typeparam>
            <param name="methodName">不带修饰的函数名</param>
            <param name="acadPeEnum">读取哪个cad内部文件的枚举(目前只支持两个)</param>
            <returns>委托</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:IFoxCAD.Cad.AcadPeInfo._Dict" -->
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetPeMethod(IFoxCAD.Cad.PeInfo)">
            <summary>
            返回函数指针
            </summary>
            <param name="peInfo">Pe信息:可能来自exe/dll</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:IFoxCAD.Cad.AcadPeInfo.GetDelegate``1">
            <summary>
            转为委托
            </summary>
            <typeparam name="TDelegate">委托对象</typeparam>
            <returns></returns>
        </member>
        <member name="T:IFoxCAD.Cad.PeFunction">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeFunction.CName">
            <summary>
            纯c语言名
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.ModuleFullName">
            <summary>
            模块文件路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.ModuleIntPtr">
            <summary>
            模块指针
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeFunction.MethodName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.#ctor(System.String)">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
            <param name="methodName">没修饰的方法名</param>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.GetProcAddress">
            <summary>
            获取函数指针
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeFunction.Finds(IFoxCAD.Cad.PeInfo,System.String,System.Collections.Generic.List{IFoxCAD.Cad.PeFunction})">
            <summary>
            通过名字查找exe/dll内所有名字
            </summary>
            <param name="peInfo">pe结构</param>
            <param name="findFuncName">用于查找的方法名</param>
            <param name="funcAdress_Out">返回函数集合</param>
        </member>
        <member name="T:IFoxCAD.Cad.GetPeMethodException">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DBmod">
            <summary>
            获取数据库修改状态
            <a href="https://knowledge.autodesk.com/support/autocad/learn-explore/caas/CloudHelp/cloudhelp/2020/ENU/AutoCAD-Core/files/GUID-E255E808-2D48-4BDE-A760-FFEA28E5A86F-htm.html">
            相关链接</a>
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.DBmodEx.DBmodTask(System.Action)">
            <summary>
            Dbmod 不被修改的任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFoxCAD.Cad.DBmodEx.DatabaseNoModifies">
            <summary>
            请在无法处理的初始化才使用它
            (源泉在初始化的时候进行了修改数据库,所以必须要用一个新线程等待lisp执行完成才可以)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedCmd(Autodesk.AutoCAD.DatabaseServices.ResultBuffer)">
            <summary>
            发送命令(同步)如果2015.+这里报错,那么表示vs需要提权测试
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedCommand(System.IntPtr)">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedPostCommand(System.String)">
            <summary>
            发送命令(同步)
            这个可以在多线程发送
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AcedInvoke(System.String)">
            <summary>
            发送命令(同步)
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PostCmd.AsyncCommand(System.String)">
            <summary>
            发送命令(异步)+CommandFlags.Session可以同步发送
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PeInfo">
            <summary>
            微软软件结构PE信息
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeInfo.OpenFile">
            <summary>
            获取是否正常打开文件
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.PeInfo.ExportDirectory">
            <summary>
            函数接口名单
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo.FullName">
            <summary>
            PE文件完整路径
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo._PEFileByte">
            <summary>
            全部文件数据
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.PeInfo._PEFileIndex">
            <summary>
            文件读取的位置
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadFile">
            <summary>
            开始读取
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadDosHeader">
            <summary>
            获得DOS头
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadDosStub">
            <summary>
            获得DOS SUB字段
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadPEHeader">
            <summary>
            获得PE的文件头
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadOptionalHeader">
            <summary>
            获得OPTIONAL PE扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadOptionalDirAttrib">
            <summary>
            获取目录表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadSectionTable">
            <summary>
            获取节表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadExportDirectory">
            <summary>
            读取输出表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadImportDirectory">
            <summary>
            读取输入表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.LoadResourceDirectory">
            <summary>
            读取资源表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.AddResourceNode(IFoxCAD.Cad.ResourceDirectory,System.Int64,System.Int64,System.Int64)">
            <summary>
            添加资源节点
            </summary>
            <param name="node"></param>
            <param name="PEIndex"></param>
            <param name="RVA"></param>
            <param name="resourSectRva"></param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.Loadbyte(System.Byte[]@)">
            <summary>
            读数据 读byte[]的数量 会改边PEFileIndex的值
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetString(System.Byte[])">
            <summary>
            转换byte为字符串
            </summary>
            <param name="data">byte[]</param>
            <returns>AA BB CC DD</returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetString(System.Byte[],System.String)">
            <summary>
            转换字符为显示数据
            </summary>
            <param name="data">byte[]</param>
            <param name="type">ASCII DEFAULT UNICODE BYTE</param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetInt(System.Byte[])">
            <summary>
            转换BYTE为INT
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetLong(System.Byte[])">
            <summary>
            转换数据为LONG
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.AddTableRow(System.Data.DataTable,System.Byte[],System.String,System.String)">
            <summary>
            添加一行信息
            </summary>
            <param name="refTable">表</param>
            <param name="data">数据</param>
            <param name="name">名称</param>
            <param name="describe">说明</param>
        </member>
        <member name="M:IFoxCAD.Cad.PeInfo.GetPETable">
            <summary>
            获取PE信息 DataSet方式
            </summary>
            <returns>多个表 最后资源表 绘制成树结构TABLE </returns>
        </member>
        <member name="T:IFoxCAD.Cad.DosHeader">
            <summary>
            DOS文件都MS开始
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.DosStub">
            <summary>
            DOS程序 提示
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.PEHeader">
            <summary>
            PE文件头
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OptionalHeader">
            <summary>
            PE头扩展
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OptionalDirAttrib">
            <summary>
            目录结构
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.SectionTable">
            <summary>
            节表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ExportDirectory">
            <summary>
            输出表
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.ExportDirectory.FunctionNamesByte">
            <summary>
            函数指针名称集合
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.ExportDirectory.FunctionNames">
            <summary>
            获取函数名
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ImportDirectory">
            <summary>
            输入表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.ResourceDirectory">
            <summary>
            资源表
            </summary>
        </member>
        <member name="T:IFoxCAD.Cad.OpComp">
            <summary>
            比较运算符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpComp.Content">
            <summary>
            比较运算符，如：
            <code>"&lt;="</code>
            以及合并比较运算符：
            <code>"&lt;=,&lt;=,="</code>
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpComp.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="value">数据</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,System.Int32)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.#ctor(System.String,Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            比较运算符类构造函数
            </summary>
            <param name="content">运算符</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpComp.GetValues">
            <summary>
            获取过滤器数据迭代器
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpEqual">
            <summary>
            相等运算符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpEqual.Value">
            <summary>
             组码与匹配值的TypedValue类型值
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpEqual.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(System.Int32)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(System.Int32,System.Object)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.#ctor(Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary>
            相等运算符类构造函数
            </summary>
            <param name="value">组码与组码值的TypedValue类型值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.GetValues">
            <summary>
            过滤器数据迭代器
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.SetValue(System.Object)">
            <summary>
            设置数据
            </summary>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpEqual.SetValue(System.Int32,System.Object)">
            <summary>
            设置数据
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpFilter">
            <summary>
            选择集过滤器抽象类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Name">
            <summary>
            过滤器的名字
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Not">
            <summary>
            只读属性，表示这个过滤器取反
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.GetValues">
            <summary>
            获取TypedValue类型的值的迭代器的抽象方法，子类必须重写
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.op_LogicalNot(IFoxCAD.Cad.OpFilter)">
            <summary>
            非操作符，返回的是OpFilter类型变量的 <see cref="P:IFoxCAD.Cad.OpFilter.Not"/> 属性
            </summary>
            <param name="item">OpFilter类型变量</param>
            <returns>OpFilter对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.ToArray">
            <summary>
            过滤器值转换为 TypedValue 类型数组
            </summary>
            <returns>TypedValue数组</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.op_Implicit(IFoxCAD.Cad.OpFilter)~Autodesk.AutoCAD.EditorInput.SelectionFilter">
            <summary>
            隐式类型转换，将自定义的过滤器转换为 Autocad 认识的选择集过滤器
            </summary>
            <param name="item">过滤器对象</param>
            <returns>
            选择集过滤器.
            </returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Build(System.Func{IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op})">
             <summary>
             构建过滤器
             </summary>
             <example>
             举两个利用构建函数创建选择集过滤的例子
             <code>
             <![CDATA[
             例子1：
             var p = new Point3d(10, 10, 0);
             var f = OpFilter.Build(
                     e =>!(e.Dxf(0) == "line" & e.Dxf(8) == "0")
                     | e.Dxf(0) != "circle" & e.Dxf(8) == "2" & e.Dxf(10) >= p);
            
             例子2：
             var f2 = OpFilter.Build(
                     e => e.Or(
                             !e.And(e.Dxf(0) == "line", e.Dxf(8) == "0"),
                             e.And(e.Dxf(0) != "circle", e.Dxf(8) == "2",
                                   e.Dxf(10) <= new Point3d(10, 10, 0))));
             ]]>
             </code></example>
             <param name="func">构建过滤器的函数委托</param>
             <returns>过滤器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpFilter.Op">
            <summary>
            过滤器操作符类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpFilter.Op.Filter">
            <summary>
            过滤器属性
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.And(IFoxCAD.Cad.OpFilter.Op[])">
            <summary>
            AND 操作符
            </summary>
            <param name="args">操作符类型的可变参数</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Or(IFoxCAD.Cad.OpFilter.Op[])">
            <summary>
            or 操作符
            </summary>
            <param name="args">操作符类型的可变参数</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Dxf(System.Int32)">
            <summary>
            dxf 操作符，此函数只能用于过滤器中，不是组码操作函数
            </summary>
            <param name="code">组码</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Dxf(System.Int32,System.String)">
            <summary>
            dxf 操作符，此函数只能用于过滤器中，不是组码操作函数
            </summary>
            <param name="code">组码</param>
            <param name="content">关系运算符的值，比如">,>,="</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LogicalNot(IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            非操作符
            </summary>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_Equality(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            相等操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_Inequality(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            不等操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThan(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            大于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThan(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            小于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThanOrEqual(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            大于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThanOrEqual(IFoxCAD.Cad.OpFilter.Op,System.Object)">
            <summary>
            小于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">数据</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_GreaterThanOrEqual(IFoxCAD.Cad.OpFilter.Op,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            大于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">点</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_LessThanOrEqual(IFoxCAD.Cad.OpFilter.Op,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary>
            小于等于操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">点</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_BitwiseAnd(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            并操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_BitwiseOr(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            或操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.op_ExclusiveOr(IFoxCAD.Cad.OpFilter.Op,IFoxCAD.Cad.OpFilter.Op)">
            <summary>
            异或操作符
            </summary>
            <param name="left">过滤器操作符对象</param>
            <param name="right">过滤器操作符对象</param>
            <returns>Op对象</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.Equals(System.Object)">
            <summary>
            比较函数
            </summary>
            <param name="obj">对象</param>
            <returns>
            是否相等
            </returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpFilter.Op.GetHashCode">
            <summary>
            获取HashCode
            </summary>
            <returns>HashCode</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpList">
            <summary>
            逻辑操作符的列表抽象类
            </summary>
        </member>
        <member name="F:IFoxCAD.Cad.OpList._lst">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤器条件的虚函数，子类可以重写
            </summary>
            <example>举个利用这个类及其子类创建选择集过滤的例子
            <code>
            <![CDATA[
            var fd = new OpOr
                     {
                         !new OpAnd
                         {
                             { 0, "line" },
                             { 8, "0" },
                         },
                         new OpAnd
                         {
                             !new OpEqual(0, "circle"),
                             { 8, "2" },
                            { 10, new Point3d(10,10,0), ">,>,*" }
                         },
                     };
            ]]>
            </code></example>
            <param name="value">过滤器对象</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.String,System.Int32,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="speccode">逻辑非~</param>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.Int32,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(System.Int32,System.Object,System.String)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
            <param name="comp">比较运算符</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.Add(Autodesk.AutoCAD.DatabaseServices.DxfCode,System.Object,System.String)">
            <summary>
            添加过滤条件
            </summary>
            <param name="code">组码</param>
            <param name="value">组码值</param>
            <param name="comp">比较运算符</param>
        </member>
        <member name="M:IFoxCAD.Cad.OpList.GetEnumerator">
            <summary>
            过滤器迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpAnd">
            <summary>
            逻辑与类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpAnd.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpAnd.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤条件
            </summary>
            <param name="value">过滤器对象</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpOr">
            <summary>
            逻辑或类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpOr.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpOr.Add(IFoxCAD.Cad.OpFilter)">
            <summary>
            添加过滤条件
            </summary>
            <param name="value">过滤器对象</param>
        </member>
        <member name="T:IFoxCAD.Cad.OpLogi">
            <summary>
            过滤器逻辑运算符抽象类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpLogi.First">
            <summary>
            返回-4组码的开始内容
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpLogi.Last">
            <summary>
            返回-4组码的结束内容
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpLogi.GetValues">
            <summary>
            获取过滤条件
            </summary>
            <returns>TypedValue迭代器</returns>
        </member>
        <member name="M:IFoxCAD.Cad.OpLogi.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpNot">
            <summary>
            逻辑非类
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpNot.#ctor(IFoxCAD.Cad.OpFilter)">
            <summary>
            逻辑非类构造函数
            </summary>
            <param name="value">OpFilter数据</param>
        </member>
        <member name="P:IFoxCAD.Cad.OpNot.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpNot.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>OpFilter迭代器</returns>
        </member>
        <member name="T:IFoxCAD.Cad.OpXor">
            <summary>
            逻辑异或类
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpXor.#ctor(IFoxCAD.Cad.OpFilter,IFoxCAD.Cad.OpFilter)">
            <summary>
            逻辑异或类构造函数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="P:IFoxCAD.Cad.OpXor.Name">
            <summary>
            符号名
            </summary>
        </member>
        <member name="M:IFoxCAD.Cad.OpXor.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>选择集过滤器类型迭代器</returns>
        </member>
    </members>
</doc>
