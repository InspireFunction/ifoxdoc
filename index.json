{
  "README.html": {
    "href": "README.html",
    "title": "ifoxdoc 开发文档",
    "keywords": "ifoxdoc 开发文档 克隆本项目 修改"
  },
  "api/IFoxCAD.Basal.ArgumentNullEx.html": {
    "href": "api/IFoxCAD.Basal.ArgumentNullEx.html",
    "title": "Class ArgumentNullEx",
    "keywords": "Class ArgumentNullEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 参数null检查类 public static class ArgumentNullEx Inheritance object ArgumentNullEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods NotNull(object?, string) 检查参数是否为 null [Obsolete(\"请使用 ArgumentNullEx.ThrowIfNull(value);\")] public static void NotNull(this object? value, string valueExpression = \"\") Parameters value object 参数 valueExpression string 参数为null时的提示信息 Exceptions ArgumentNullException ThrowIfNull(object?, string?) 检查参数是否为 null public static void ThrowIfNull(object? argument, string? paramName = null) Parameters argument object 参数 paramName string 参数名字"
  },
  "api/IFoxCAD.Basal.ArrayEx.html": {
    "href": "api/IFoxCAD.Basal.ArrayEx.html",
    "title": "Class ArrayEx",
    "keywords": "Class ArrayEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 数组扩展类 public static class ArrayEx Inheritance object ArrayEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Combine2<T>(T[], T[]) 合并数组 public static T[] Combine2<T>(this T[] a, T[] b) Parameters a T[] b T[] Returns T[] Type Parameters T Deduplication<T>(List<T>, Func<T, T, bool>) 一维数组按规则消除 本例适用于数值类型比较,特定规则比较 如果是哈希比较,建议更改为: HashSet<T> set = new(); foreach (var item in listInOut) set.Add(item); public static void Deduplication<T>(List<T> lst, Func<T, T, bool> func) Parameters lst List<T> 传入有重复成员的数组,原数组修改 func Func<T, T, bool> 传出参数1:数组开头 传出参数2:数组结尾 返回值比较结尾为true就移除 Type Parameters T"
  },
  "api/IFoxCAD.Basal.Debugx.html": {
    "href": "api/IFoxCAD.Basal.Debugx.html",
    "title": "Class Debugx",
    "keywords": "Class Debugx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public static class Debugx Inheritance object Debugx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Printl(object, bool) cad命令切换: Debugx public static void Printl(object message, bool time = true) Parameters message object 打印信息 time bool 打印时间"
  },
  "api/IFoxCAD.Basal.DictEx.html": {
    "href": "api/IFoxCAD.Basal.DictEx.html",
    "title": "Class DictEx",
    "keywords": "Class DictEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public static class DictEx Inheritance object DictEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/IFoxCAD.Basal.EnumEx.html": {
    "href": "api/IFoxCAD.Basal.EnumEx.html",
    "title": "Class EnumEx",
    "keywords": "Class EnumEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public static class EnumEx Inheritance object EnumEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CleanCache() 清理缓存 public static void CleanCache() GetAttribute<T>(Enum, bool) 打印枚举的特性DescriptionAttribute注释内容 public static HashSet<string>? GetAttribute<T>(this Enum e, bool noDescrToString = true) where T : DescriptionAttribute Parameters e Enum 枚举 noDescrToString bool Returns HashSet<string> 注释内容 Type Parameters T GetDesc(Enum) public static string GetDesc(this Enum e) Parameters e Enum Returns string GetDesc(Type, string) 获取字段的描述内容 public static string GetDesc(this Type type, string field) Parameters type Type field string Returns string PrintNote(Enum, bool) 打印枚举的特性DescriptionAttribute注释内容 public static string? PrintNote(this Enum e, bool noDescToString = true) Parameters e Enum noDescToString bool Returns string"
  },
  "api/IFoxCAD.Basal.GWL.html": {
    "href": "api/IFoxCAD.Basal.GWL.html",
    "title": "Enum GWL",
    "keywords": "Enum GWL Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public enum GWL Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields GWL_EXSTYLE = -20 获取、设置窗口扩展样式 GWL_HINSTANCE = -6 获取应用程序的实例句柄 GWL_HWNDPARENT = -8 获取父窗口句柄 GWL_ID = -12 获取窗口标识 GWL_STYLE = -16 获取、设置窗口样式 GWL_USERDATA = -21 获取、设置与窗口关联的自定义数据 GWL_WNDPROC = -4 获取、设置窗口过程的地址"
  },
  "api/IFoxCAD.Basal.GetWindowCmd.html": {
    "href": "api/IFoxCAD.Basal.GetWindowCmd.html",
    "title": "Enum GetWindowCmd",
    "keywords": "Enum GetWindowCmd Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public enum GetWindowCmd : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields GW_CHILD = 5 如果指定窗口是父窗口,则获得的是在Tab序顶端的子窗口的句柄,否则为NULL。 函数仅检查指定父窗口的子窗口,不检查继承窗口。 GW_ENABLEDPOPUP = 6 （WindowsNT 5.0）返回的句柄标识了属于指定窗口的处于使能状态弹出式窗口（检索使用第一个由GW_HWNDNEXT 查找到的满足前述条件的窗口）； 如果无使能窗口,则获得的句柄与指定窗口相同。 GW_HWNDFIRST = 0 返回的句柄标识了在Z序最高端的相同类型的窗口。 如果指定窗口是最高端窗口,则该句柄标识了在Z序最高端的最高端窗口； 如果指定窗口是顶层窗口,则该句柄标识了在z序最高端的顶层窗口： 如果指定窗口是子窗口,则句柄标识了在Z序最高端的同属窗口。 GW_HWNDLAST = 1 返回的句柄标识了在z序最低端的相同类型的窗口。 如果指定窗口是最高端窗口,则该柄标识了在z序最低端的最高端窗口： 如果指定窗口是顶层窗口,则该句柄标识了在z序最低端的顶层窗口； 如果指定窗口是子窗口,则句柄标识了在Z序最低端的同属窗口。 GW_HWNDNEXT = 2 返回的句柄标识了在Z序中指定窗口下的相同类型的窗口。 如果指定窗口是最高端窗口,则该句柄标识了在指定窗口下的最高端窗口： 如果指定窗口是顶层窗口,则该句柄标识了在指定窗口下的顶层窗口； 如果指定窗口是子窗口,则句柄标识了在指定窗口下的同属窗口。 GW_HWNDPREV = 3 返回的句柄标识了在Z序中指定窗口上的相同类型的窗口。 如果指定窗口是最高端窗口,则该句柄标识了在指定窗口上的最高端窗口； 如果指定窗口是顶层窗口,则该句柄标识了在指定窗口上的顶层窗口； 如果指定窗口是子窗口,则句柄标识了在指定窗口上的同属窗口。 GW_OWNER = 4 返回的句柄标识了指定窗口的所有者窗口（如果存在）。 GW_OWNER与GW_CHILD不是相对的参数,没有父窗口的含义,如果想得到父窗口请使用GetParent()。 例如：例如有时对话框的控件的GW_OWNER,是不存在的。"
  },
  "api/IFoxCAD.Basal.HookType.html": {
    "href": "api/IFoxCAD.Basal.HookType.html",
    "title": "Enum HookType",
    "keywords": "Enum HookType Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 设置的钩子类型 [Flags] public enum HookType Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields WH_CALLWNDPROC = 4 监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之前调用 WH_CALLWNDPROCRET = WH_CALLWNDPROC | WH_HARDWARE 监视发送到窗口过程的消息,系统在消息发送到接收窗口过程之后调用 WH_CBT = WH_JOURNALPLAYBACK | WH_CALLWNDPROC 在以下事件之前,系统都会调用WH_CBT Hook子过程,这些事件包括： 激活,建立,销毁,最小化,最大化,移动,改变尺寸等窗口事件； 完成系统指令； 来自系统消息队列中的移动鼠标,键盘事件； 设置输入焦点事件； 同步系统消息队列事件。 Hook子过程的返回值确定系统是否允许或者防止这些操作中的一个 WH_DEBUG = WH_JOURNALPLAYBACK | WH_HARDWARE 在系统调用系统中与其它Hook关联的Hook子过程之前,系统会调用 WH_DEBUG Hook子过程。你可以使用这个Hook来决定是否允许系统调用与其它 Hook关联的Hook子过程 WH_FOREGROUNDIDLE = WH_JOURNALPLAYBACK | WH_SHELL 当应用程序的前台线程处于空闲状态时,可以使用WH_FOREGROUNDIDLE Hook执行低优先级的任务。当应用程序的前台线程大概要变成空闲状态时,系统就 会调用WH_FOREGROUNDIDLE Hook子过程 WH_GETMESSAGE = WH_JOURNALPLAYBACK | WH_KEYBOARD 应用程序使用WH_GETMESSAGE Hook来监视从GetMessage or PeekMessage函 数返回的消息。你可以使用WH_GETMESSAGE Hook去监视鼠标和键盘输入,以及 其它发送到消息队列中的消息 WH_HARDWARE = 8 当调用GetMessage 或 PeekMessage 来从消息队列种查询非鼠标、键盘消息时 WH_JOURNALPLAYBACK = 1 WH_JOURNALPLAYBACK Hook使应用程序可以插入消息到系统消息队列。可 以使用这个Hook回放通过使用WH_JOURNALRECORD Hook记录下来的连续的鼠 标和键盘事件。只要WH_JOURNALPLAYBACK Hook已经安装,正常的鼠标和键盘 事件就是无效的。WH_JOURNALPLAYBACK Hook是全局Hook,它不能象线程特定 Hook一样使用。WH_JOURNALPLAYBACK Hook返回超时值,这个值告诉系统在处 理来自回放Hook当前消息之前需要等待多长时间（毫秒）。这就使Hook可以控制实 时事件的回放。WH_JOURNALPLAYBACK是system-wide local hooks,它们不会被 注射到任何行程地址空间 WH_JOURNALRECORD = 0 WH_JOURNALRECORD Hook用来监视和记录输入事件。典型的,可以使用这 个Hook记录连续的鼠标和键盘事件,然后通过使用WH_JOURNALPLAYBACK Hook 来回放。WH_JOURNALRECORD Hook是全局Hook,它不能象线程特定Hook一样 使用。WH_JOURNALRECORD是system-wide local hooks,它们不会被注射到任何行 程地址空间 WH_KEYBOARD = 2 在应用程序中,WH_KEYBOARD Hook用来监视WM_KEYDOWN and WM_KEYUP消息,这些消息通过GetMessage or PeekMessage function返回。可以使 用这个Hook来监视输入到消息队列中的键盘消息 WH_KEYBOARD_LL = WH_JOURNALPLAYBACK | WH_CALLWNDPROCRET 监视键盘消息 WH_MOUSE = WH_JOURNALPLAYBACK | WH_SYSMSGFILTER WH_MOUSE Hook监视从GetMessage 或者 PeekMessage 函数返回的鼠标消息。 使用这个Hook监视输入到消息队列中的鼠标消息 WH_MOUSE_LL = WH_KEYBOARD | WH_CALLWNDPROCRET 监视鼠标消息 WH_MSGFILTER = -1 WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动 条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。 WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通 过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook 监视所有应用程序消息。 WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间 过滤消息,这等价于在主消息循环中过滤消息。 通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这 个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循 环里一样 WH_SHELL = WH_KEYBOARD | WH_HARDWARE 外壳应用程序可以使用WH_SHELL Hook去接收重要的通知。当外壳应用程序是 激活的并且当顶层窗口建立或者销毁时,系统调用WH_SHELL Hook子过程。 WH_SHELL 共有５钟情况： 只要有个top-level、unowned 窗口被产生、起作用、或是被摧毁； 当Taskbar需要重画某个按钮； 当系统需要显示关于Taskbar的一个程序的最小化形式； 当目前的键盘布局状态改变； 当使用者按Ctrl+Esc去执行Task Manager（或相同级别的程序）。 按照惯例,外壳应用程序都不接收WH_SHELL消息。所以,在应用程序能够接 收WH_SHELL消息之前,应用程序必须调用SystemParametersInfo function注册它自 己 WH_SYSMSGFILTER = WH_KEYBOARD | WH_CALLWNDPROC WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单,滚动 条,消息框,对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。 WH_MSGFILTER Hook只能监视传递到菜单,滚动条,消息框的消息,以及传递到通 过安装了Hook子过程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook 监视所有应用程序消息。 WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间 过滤消息,这等价于在主消息循环中过滤消息。 通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这 个函数,应用程序能够在模式循环期间使用相同的代码去过滤消息,如同在主消息循 环里一样"
  },
  "api/IFoxCAD.Basal.LinkedHashMap-2.html": {
    "href": "api/IFoxCAD.Basal.LinkedHashMap-2.html",
    "title": "Class LinkedHashMap<TKey, TValue>",
    "keywords": "Class LinkedHashMap<TKey, TValue> Namespace IFoxCAD.Basal Assembly IFox.Basal.dll A least-recently-used cache stored like a dictionary. public class LinkedHashMap<TKey, TValue> Type Parameters TKey The type of the key to the cached item TValue The type of the cached item. Inheritance object LinkedHashMap<TKey, TValue> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Remarks Derived from https://stackoverflow.com/a/3719378/240845 https://stackoverflow.com/users/240845/mheyman Constructors LinkedHashMap(int, Action<TValue>?) Initializes a new instance of the LinkedHashMap<TKey, TValue> class. public LinkedHashMap(int capacity, Action<TValue>? dispose = null) Parameters capacity int Maximum number of elements to cache. dispose Action<TValue> When elements cycle out of the cache, disposes them. May be null. Properties Capacity Gets the capacity of the cache. public int Capacity { get; } Property Value int Methods Add(TKey, TValue) Adds the specified key and value to the dictionary. public void Add(TKey key, TValue value) Parameters key TKey The key of the element to add. value TValue The value of the element to add. The value can be null for reference types. Get(TKey, Func<TValue>) Looks for a value for the matching key. If not found, calls valueGenerator to retrieve the value and add it to the cache. public TValue Get(TKey key, Func<TValue> valueGenerator) Parameters key TKey The key of the value to look up. valueGenerator Func<TValue> Generates a value if one isn't found. Returns TValue The requested value. TryGetValue(TKey, out TValue?) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue? value) Parameters key TKey The key of the value to get. value TValue When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the Dictionary<TKey, TValue> contains an element with the specified key; otherwise, false."
  },
  "api/IFoxCAD.Basal.LinkedHashSet-1.html": {
    "href": "api/IFoxCAD.Basal.LinkedHashSet-1.html",
    "title": "Class LinkedHashSet<T>",
    "keywords": "Class LinkedHashSet<T> Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public class LinkedHashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : IComparable Type Parameters T Inheritance object LinkedHashSet<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods LinqEx.FindByExt<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMax<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByMax<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMax<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) LinqEx.FindByMin<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByMin<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMin<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) LinqEx.FindExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.OrderBy<T, TKey>(IEnumerable<T>, Func<T, TKey>, Comparison<TKey>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LinkedHashSet() public LinkedHashSet() Properties Count public int Count { get; } Property Value int First public LoopListNode<T>? First { get; } Property Value LoopListNode<T> IsReadOnly public virtual bool IsReadOnly { get; } Property Value bool Last public LoopListNode<T>? Last { get; } Property Value LoopListNode<T> MinNode public LoopListNode<T>? MinNode { get; set; } Property Value LoopListNode<T> Methods Add(T) public bool Add(T item) Parameters item T Returns bool AddFirst(T) public LoopListNode<T> AddFirst(T value) Parameters value T Returns LoopListNode<T> AddRange(IEnumerable<T>) public void AddRange(IEnumerable<T> collection) Parameters collection IEnumerable<T> Clear() public void Clear() Clone() public LinkedHashSet<T> Clone() Returns LinkedHashSet<T> Contains(T) public bool Contains(T item) Parameters item T Returns bool CopyTo(T[], int) public void CopyTo(T[] array, int arrayIndex) Parameters array T[] arrayIndex int ExceptWith(IEnumerable<T>) public void ExceptWith(IEnumerable<T> other) Parameters other IEnumerable<T> For(LoopListNode<T>, Action<int, T, T>) public void For(LoopListNode<T> from, Action<int, T, T> action) Parameters from LoopListNode<T> action Action<int, T, T> GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> IntersectWith(IEnumerable<T>) public void IntersectWith(IEnumerable<T> other) Parameters other IEnumerable<T> IsProperSubsetOf(IEnumerable<T>) public bool IsProperSubsetOf(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool IsProperSupersetOf(IEnumerable<T>) public bool IsProperSupersetOf(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool IsSubsetOf(IEnumerable<T>) public bool IsSubsetOf(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool IsSupersetOf(IEnumerable<T>) public bool IsSupersetOf(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool Overlaps(IEnumerable<T>) public bool Overlaps(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool Remove(T) public bool Remove(T item) Parameters item T Returns bool SetEquals(IEnumerable<T>) public bool SetEquals(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool SetFirst(LoopListNode<T>) public bool SetFirst(LoopListNode<T> node) Parameters node LoopListNode<T> Returns bool SymmetricExceptWith(IEnumerable<T>) public void SymmetricExceptWith(IEnumerable<T> other) Parameters other IEnumerable<T> ToList() public List<T> ToList() Returns List<T> ToString() public override string ToString() Returns string UnionWith(IEnumerable<T>) public void UnionWith(IEnumerable<T> other) Parameters other IEnumerable<T>"
  },
  "api/IFoxCAD.Basal.LinqEx.html": {
    "href": "api/IFoxCAD.Basal.LinqEx.html",
    "title": "Class LinqEx",
    "keywords": "Class LinqEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll linq 扩展类 public static class LinqEx Inheritance object LinqEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods FindByExt<TValue>(IEnumerable<TValue>, Comparison<TValue>) 按比较器找出序列中最(小/大)键值的对应值 public static TValue[] FindByExt<TValue>(this IEnumerable<TValue> source, Comparison<TValue> comparison) Parameters source IEnumerable<TValue> 序列 comparison Comparison<TValue> 比较器 Returns TValue[] 最(小/大)键值的对应值 Type Parameters TValue 值 FindByExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) 按转换函数找出序列中最(小/大)键值的对应值 public static TValue[] FindByExt<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 func Func<TValue, TKey> 转换函数 Returns TValue[] 最(小/大)键值的对应值 Type Parameters TValue 值 TKey 键 FindByMax<TValue>(IEnumerable<TValue>, Comparison<TValue>) 按比较器找出序列中最大键值的对应值 public static TValue FindByMax<TValue>(this IEnumerable<TValue> source, Comparison<TValue> comparison) Parameters source IEnumerable<TValue> 序列 comparison Comparison<TValue> 比较器 Returns TValue 最大键值的对应值 Type Parameters TValue 值 FindByMax<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) 按转换函数找出序列中最大键值的对应值 public static TValue FindByMax<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 func Func<TValue, TKey> 转换函数 Returns TValue 最大键值的对应值 Type Parameters TValue 值 TKey 键 FindByMax<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) 按转换函数找出序列中最大键值的对应值 public static TValue FindByMax<TValue, TKey>(this IEnumerable<TValue> source, out TKey maxResult, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 maxResult TKey 对应的最大键值 func Func<TValue, TKey> 转换函数 Returns TValue 最大键值的对应值 Type Parameters TValue 值 TKey 键 FindByMin<TValue>(IEnumerable<TValue>, Comparison<TValue>) 按比较器找出序列中最小键值的对应值 public static TValue FindByMin<TValue>(this IEnumerable<TValue> source, Comparison<TValue> comparison) Parameters source IEnumerable<TValue> 序列 comparison Comparison<TValue> 比较器 Returns TValue 最小键值的对应值 Type Parameters TValue 值 FindByMin<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) 按转换函数找出序列中最小键值的对应值 public static TValue FindByMin<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 func Func<TValue, TKey> 转换函数 Returns TValue 最小键值的对应值 Type Parameters TValue 值 TKey 键 FindByMin<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) 按转换函数找出序列中最小键值的对应值 public static TValue FindByMin<TValue, TKey>(this IEnumerable<TValue> source, out TKey minKey, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 minKey TKey 对应的最小键值 func Func<TValue, TKey> 转换函数 Returns TValue 最小键值的对应值 Type Parameters TValue 值 TKey 键 FindExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) 按转换函数找出序列中最(小/大)键值的对应键值 public static TKey[] FindExt<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> func) where TKey : IComparable<TKey> Parameters source IEnumerable<TValue> 序列 func Func<TValue, TKey> 转换函数 Returns TKey[] 最(小/大)键值 Type Parameters TValue 值 TKey 键 OrderBy<T, TKey>(IEnumerable<T>, Func<T, TKey>, Comparison<TKey>) 使用指定的比较器将序列按升序排序 public static IOrderedEnumerable<T> OrderBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, Comparison<TKey> comparison) Parameters source IEnumerable<T> 序列 keySelector Func<T, TKey> 用于从元素中提取键的函数 comparison Comparison<TKey> 比较器 Returns IOrderedEnumerable<T> 排序的序列 Type Parameters T 输入泛型 TKey 输出泛型 ThenBy<T, TKey>(IOrderedEnumerable<T>, Func<T, TKey>, Comparison<TKey>) 使用指定的比较器将其后的序列按升序排序 public static IOrderedEnumerable<T> ThenBy<T, TKey>(this IOrderedEnumerable<T> source, Func<T, TKey> keySelector, Comparison<TKey> comparison) Parameters source IOrderedEnumerable<T> 序列 keySelector Func<T, TKey> 用于从元素中提取键的函数 comparison Comparison<TKey> 比较器 Returns IOrderedEnumerable<T> 排序的序列 Type Parameters T 输入泛型 TKey 输出泛型"
  },
  "api/IFoxCAD.Basal.ListEx.html": {
    "href": "api/IFoxCAD.Basal.ListEx.html",
    "title": "Class ListEx",
    "keywords": "Class ListEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public static class ListEx Inheritance object ListEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods EqualsAll<T>(IList<T>, IList<T>) public static bool EqualsAll<T>(this IList<T> a, IList<T> b) Parameters a IList<T> b IList<T> Returns bool Type Parameters T EqualsAll<T>(IList<T>, IList<T>, IEqualityComparer<T>?) public static bool EqualsAll<T>(this IList<T> a, IList<T> b, IEqualityComparer<T>? comparer) Parameters a IList<T> b IList<T> comparer IEqualityComparer<T> Returns bool Type Parameters T"
  },
  "api/IFoxCAD.Basal.LoopList-1.html": {
    "href": "api/IFoxCAD.Basal.LoopList-1.html",
    "title": "Class LoopList<T>",
    "keywords": "Class LoopList<T> Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 环链表 public class LoopList<T> : IEnumerable<T>, IEnumerable, IFormattable Type Parameters T Inheritance object LoopList<T> Implements IEnumerable<T> IEnumerable IFormattable Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods LinqEx.FindByExt<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMax<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByMax<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMax<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) LinqEx.FindByMin<TValue>(IEnumerable<TValue>, Comparison<TValue>) LinqEx.FindByMin<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.FindByMin<TValue, TKey>(IEnumerable<TValue>, out TKey, Func<TValue, TKey>) LinqEx.FindExt<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) LinqEx.OrderBy<T, TKey>(IEnumerable<T>, Func<T, TKey>, Comparison<TKey>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LoopList() 默认构造函数 public LoopList() LoopList(IEnumerable<T>) 环链表构造函数 public LoopList(IEnumerable<T> values) Parameters values IEnumerable<T> 节点迭代器 Properties Count 节点数 public int Count { get; } Property Value int First 首节点 public LoopListNode<T>? First { get; } Property Value LoopListNode<T> Last 尾节点 public LoopListNode<T>? Last { get; } Property Value LoopListNode<T> Methods Add(T) 在尾节点之后插入节点,并设置新节点为尾节点 public LoopListNode<T> Add(T value) Parameters value T Returns LoopListNode<T> AddAfter(LoopListNode<T>, T) 后面增加节点 public LoopListNode<T> AddAfter(LoopListNode<T> node, T value) Parameters node LoopListNode<T> value T Returns LoopListNode<T> AddBefore(LoopListNode<T>, T) 前面增加节点 public LoopListNode<T> AddBefore(LoopListNode<T> node, T value) Parameters node LoopListNode<T> value T Returns LoopListNode<T> AddFirst(T) 在首节点之前插入节点,并设置新节点为首节点 public LoopListNode<T> AddFirst(T value) Parameters value T Returns LoopListNode<T> AddLast(T) 在尾节点之后插入节点,并设置新节点为尾节点_此函数仅为与LinkedList同名方法 public LoopListNode<T> AddLast(T value) Parameters value T Returns LoopListNode<T> AddRange(IEnumerable<T>) 容器内容全部加入到末尾 public void AddRange(IEnumerable<T> list) Parameters list IEnumerable<T> Clear() 清理 public void Clear() Contains(LoopListNode<T>) 是否包含节点 public bool Contains(LoopListNode<T> node) Parameters node LoopListNode<T> Returns bool Contains(T) 是否包含值 public bool Contains(T value) Parameters value T Returns bool Find(T) 查找第一个出现的节点 public LoopListNode<T>? Find(T value) Parameters value T Returns LoopListNode<T> Finds(T) 查找所有出现的节点 public IEnumerable<LoopListNode<T>>? Finds(T value) Parameters value T Returns IEnumerable<LoopListNode<T>> For(Func<int, LoopListNode<T>, bool>) 从头遍历_非迭代器(扔出计数) public void For(Func<int, LoopListNode<T>, bool> action) Parameters action Func<int, LoopListNode<T>, bool> GetEnumerator() 获取节点值的查询器 public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> GetNode(Func<T, bool>) 获取节点 public LoopListNode<T>? GetNode(Func<T, bool> func) Parameters func Func<T, bool> Returns LoopListNode<T> GetNodes() 获取节点的查询器 public IEnumerable<LoopListNode<T>> GetNodes() Returns IEnumerable<LoopListNode<T>> GetNodes(LoopListNode<T>) 获取节点的查询器 public IEnumerable<LoopListNode<T>> GetNodes(LoopListNode<T> from) Parameters from LoopListNode<T> Returns IEnumerable<LoopListNode<T>> LinkTo(LoopListNode<T>, LoopListNode<T>) 链接两节点,并去除这两个节点间的所有节点 public void LinkTo(LoopListNode<T> from, LoopListNode<T> to) Parameters from LoopListNode<T> to LoopListNode<T> LinkTo(LoopListNode<T>, LoopListNode<T>, int) 链接两节点,并去除这两个节点间的所有节点 public void LinkTo(LoopListNode<T> from, LoopListNode<T> to, int number) Parameters from LoopListNode<T> to LoopListNode<T> number int LinkTo(LoopListNode<T>, LoopListNode<T>, int, bool) 链接两节点,并去除这两个节点间的所有节点 public void LinkTo(LoopListNode<T> from, LoopListNode<T> to, int number, bool isFirstChanged) Parameters from LoopListNode<T> to LoopListNode<T> number int isFirstChanged bool Remove(LoopListNode<T>) 删除此参数节点(唯一) public bool Remove(LoopListNode<T> node) Parameters node LoopListNode<T> 指定节点 Returns bool Remove(T) 删除含有此参数节点(所有) public bool Remove(T value) Parameters value T 将移除所有含有此值 Returns bool RemoveFirst() 删除首节点 public bool RemoveFirst() Returns bool RemoveLast() 删除尾节点 public bool RemoveLast() Returns bool Reverse() 链内翻转 public void Reverse() SetFirst(LoopListNode<T>) 设置首节点 public bool SetFirst(LoopListNode<T> node) Parameters node LoopListNode<T> 节点 Returns bool Swap(LoopListNode<T>, LoopListNode<T>) 交换两个节点的值 public void Swap(LoopListNode<T> node1, LoopListNode<T> node2) Parameters node1 LoopListNode<T> 第一个节点 node2 LoopListNode<T> 第二个节点 ToString() 转换为字符串_无参调用 public override string ToString() Returns string ToString(string?, IFormatProvider?) 转换为字符串_有参调用 public string ToString(string? format, IFormatProvider? formatProvider = null) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/IFoxCAD.Basal.LoopListNode-1.html": {
    "href": "api/IFoxCAD.Basal.LoopListNode-1.html",
    "title": "Class LoopListNode<T>",
    "keywords": "Class LoopListNode<T> Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 环链表节点 public class LoopListNode<T> Type Parameters T Inheritance object LoopListNode<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LoopListNode(T, LoopList<T>) 环链表节点构造函数 public LoopListNode(T value, LoopList<T> ts) Parameters value T 节点值 ts LoopList<T> Fields Value 取值 public T Value Field Value T Properties List 环链表序列 public LoopList<T>? List { get; } Property Value LoopList<T> Next 下一个节点 public LoopListNode<T>? Next { get; } Property Value LoopListNode<T> Previous 上一个节点 public LoopListNode<T>? Previous { get; } Property Value LoopListNode<T> Methods GetNext(bool) 获取当前节点的临近节点 public LoopListNode<T>? GetNext(bool forward) Parameters forward bool 搜索方向标志,true为向前搜索,false为向后搜索 Returns LoopListNode<T>"
  },
  "api/IFoxCAD.Basal.LoopState.html": {
    "href": "api/IFoxCAD.Basal.LoopState.html",
    "title": "Class LoopState",
    "keywords": "Class LoopState Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 控制循环结束 public class LoopState Inheritance object LoopState Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LoopState() public LoopState() Properties IsBreak public bool IsBreak { get; } Property Value bool IsCancel public bool IsCancel { get; } Property Value bool IsExceptional public bool IsExceptional { get; } Property Value bool IsRun public bool IsRun { get; } Property Value bool IsStop public bool IsStop { get; } Property Value bool Methods Break() public void Break() Cancel() public void Cancel() Exceptional() public void Exceptional() Reset() public void Reset() Stop() public void Stop()"
  },
  "api/IFoxCAD.Basal.MOUSEEVENTF.html": {
    "href": "api/IFoxCAD.Basal.MOUSEEVENTF.html",
    "title": "Enum MOUSEEVENTF",
    "keywords": "Enum MOUSEEVENTF Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public enum MOUSEEVENTF Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields ABSOLUTE = 32768 标示是否采用绝对坐标 LEFTDOWN = 2 模拟鼠标左键按下 LEFTUP = 4 模拟鼠标左键抬起 MIDDLEDOWN = 32 模拟鼠标中键按下 MIDDLEUP = 64 模拟鼠标中键抬起 MOVE = 1 移动鼠标 RIGHTDOWN = 8 模拟鼠标右键按下 RIGHTUP = 16 模拟鼠标右键抬起 WHEEL = 2048 模拟鼠标滚轮滚动操作,必须配合dwData参数"
  },
  "api/IFoxCAD.Basal.MouseHook.MouseHookStruct.html": {
    "href": "api/IFoxCAD.Basal.MouseHook.MouseHookStruct.html",
    "title": "Struct MouseHook.MouseHookStruct",
    "keywords": "Struct MouseHook.MouseHookStruct Namespace IFoxCAD.Basal Assembly IFox.Basal.dll Hook鼠标数据结构 public struct MouseHook.MouseHookStruct Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Fields Point 鼠标在屏幕上的x,y坐标 public Point Point Field Value Point dwExtraInfo 扩展信息,可以使用GetMessageExtraInfo的返回值 public int dwExtraInfo Field Value int hWnd 点击窗体的句柄 public nint hWnd Field Value nint wHitTestCode WM_NCHITTEST 消息 public int wHitTestCode Field Value int Methods Create(nint) public static MouseHook.MouseHookStruct Create(nint lParam) Parameters lParam nint Returns MouseHook.MouseHookStruct ToPtr(nint) public void ToPtr(nint lParam) Parameters lParam nint"
  },
  "api/IFoxCAD.Basal.MouseHook.html": {
    "href": "api/IFoxCAD.Basal.MouseHook.html",
    "title": "Class MouseHook",
    "keywords": "Class MouseHook Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public class MouseHook Inheritance object MouseHook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors MouseHook(int) 安装鼠标钩子 public MouseHook(int setLowLevel = 25000) Parameters setLowLevel int 低级钩子超时时间 Fields Process public readonly Process Process Field Value Process Properties IsDisposed public bool IsDisposed { get; } Property Value bool Methods Dispose() 手动调用释放 public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool ~MouseHook() 析构函数调用释放 protected ~MouseHook() GetDoubleClickTime() public static extern int GetDoubleClickTime() Returns int SetHook(bool) 设置钩子 public void SetHook(bool processHook = false) Parameters processHook bool false进程钩子,true全局钩子 Vote() 否决本次输入:设置不向下回调 public void Vote() Events Click 鼠标单击事件 public event EventHandler? Click Event Type EventHandler DoubleClick 鼠标双击事件 public event EventHandler? DoubleClick Event Type EventHandler MouseDown 鼠标按下事件 public event MouseEventHandler? MouseDown Event Type MouseEventHandler MouseMove 鼠标移动事件 public event MouseEventHandler? MouseMove Event Type MouseEventHandler MouseUp 松开鼠标事件 public event MouseEventHandler? MouseUp Event Type MouseEventHandler MouseWheel 鼠标滚轮事件 public event MouseEventHandler? MouseWheel Event Type MouseEventHandler"
  },
  "api/IFoxCAD.Basal.NCmdShow.html": {
    "href": "api/IFoxCAD.Basal.NCmdShow.html",
    "title": "Enum NCmdShow",
    "keywords": "Enum NCmdShow Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [Flags] public enum NCmdShow : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields SW_FORCEMINIMIZE = SW_SHOWNORMAL | SW_SHOWDEFAULT 在WindowNT5.0中最小化窗口,即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数 SW_HIDE = 0 隐藏窗口并激活其他窗口。nCmdShow SW_MAXIMIZE = SW_SHOWNORMAL | SW_SHOWMINIMIZED 最大化指定的窗口 SW_MINIMIZE = SW_SHOWMINIMIZED | SW_SHOWNOACTIVATE 最小化指定的窗口并且激活在Z序中的下一个顶层窗口 SW_RESTORE = SW_SHOWNORMAL | SW_SHOWNA 激活并显示窗口。如果窗口最小化或最大化,则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时,应用程序应该指定这个标志 SW_SHOW = SW_SHOWNORMAL | SW_SHOWNOACTIVATE 在窗口原来的位置以原来的尺寸激活和显示窗口 SW_SHOWDEFAULT = SW_SHOWMINIMIZED | SW_SHOWNA 依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态,STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的 SW_SHOWMAXIMIZED = SW_SHOWNORMAL | SW_SHOWMINIMIZED 激活窗口并将其最大化 SW_SHOWMINIMIZED = 2 激活窗口并将其最小化 SW_SHOWMINNOACTIVE = SW_SHOWNORMAL | SW_MINIMIZE 窗口最小化,激活窗口仍然维持激活状态 SW_SHOWNA = 8 以窗口原来的状态显示窗口。激活窗口仍然维持激活状态 SW_SHOWNOACTIVATE = 4 以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态 SW_SHOWNORMAL = 1 正常态的窗口(非最大化和非最小化) 激活并显示一个窗口。如果窗口被最小化或最大化,系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志"
  },
  "api/IFoxCAD.Basal.ParameterRebinder.html": {
    "href": "api/IFoxCAD.Basal.ParameterRebinder.html",
    "title": "Class ParameterRebinder",
    "keywords": "Class ParameterRebinder Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 参数重绑定 public class ParameterRebinder : SqlExpressionVisitor Inheritance object SqlExpressionVisitor ParameterRebinder Inherited Members SqlExpressionVisitor.Visit(Expression) SqlExpressionVisitor.VisitBinding(MemberBinding) SqlExpressionVisitor.VisitElementInitializer(ElementInit) SqlExpressionVisitor.VisitUnary(UnaryExpression) SqlExpressionVisitor.VisitBinary(BinaryExpression) SqlExpressionVisitor.VisitTypeIs(TypeBinaryExpression) SqlExpressionVisitor.VisitConstant(ConstantExpression) SqlExpressionVisitor.VisitConditional(ConditionalExpression) SqlExpressionVisitor.VisitMemberAccess(MemberExpression) SqlExpressionVisitor.VisitMethodCall(MethodCallExpression) SqlExpressionVisitor.VisitExpressionList(ReadOnlyCollection<Expression>) SqlExpressionVisitor.VisitMemberAssignment(MemberAssignment) SqlExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) SqlExpressionVisitor.VisitMemberListBinding(MemberListBinding) SqlExpressionVisitor.VisitBindingList(ReadOnlyCollection<MemberBinding>) SqlExpressionVisitor.VisitElementInitializerList(ReadOnlyCollection<ElementInit>) SqlExpressionVisitor.VisitLambda(LambdaExpression) SqlExpressionVisitor.VisitNew(NewExpression) SqlExpressionVisitor.VisitMemberInit(MemberInitExpression) SqlExpressionVisitor.VisitListInit(ListInitExpression) SqlExpressionVisitor.VisitNewArray(NewArrayExpression) SqlExpressionVisitor.VisitInvocation(InvocationExpression) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ParameterRebinder(Dictionary<ParameterExpression, ParameterExpression>) 参数重绑定 public ParameterRebinder(Dictionary<ParameterExpression, ParameterExpression> map) Parameters map Dictionary<ParameterExpression, ParameterExpression> 字典 Methods ReplaceParameters(Dictionary<ParameterExpression, ParameterExpression>, Expression) 替换参数 public static Expression? ReplaceParameters(Dictionary<ParameterExpression, ParameterExpression> map, Expression expression) Parameters map Dictionary<ParameterExpression, ParameterExpression> 字典 expression Expression 表达式 Returns Expression 表达式 VisitParameter(ParameterExpression) 访问参数 protected override Expression VisitParameter(ParameterExpression expression) Parameters expression ParameterExpression 参数表达式 Returns Expression 表达式"
  },
  "api/IFoxCAD.Basal.PredicateBuilder.html": {
    "href": "api/IFoxCAD.Basal.PredicateBuilder.html",
    "title": "Class PredicateBuilder",
    "keywords": "Class PredicateBuilder Namespace IFoxCAD.Basal Assembly IFox.Basal.dll Predicate委托构造器 public static class PredicateBuilder Inheritance object PredicateBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 表示并的表达式 public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters first Expression<Func<T, bool>> 第一个参数 second Expression<Func<T, bool>> 第二个 Returns Expression<Func<T, bool>> 表达式 Type Parameters T 传入参数类型 Create<T>(Expression<Func<T, bool>>) 创建predicate委托 public static Expression<Func<T, bool>> Create<T>(Expression<Func<T, bool>> predicate) Parameters predicate Expression<Func<T, bool>> 委托表达式 Returns Expression<Func<T, bool>> 委托表达式 Type Parameters T 传入参数类型 False<T>() 返回假的委托表达式 public static Expression<Func<T, bool>> False<T>() Returns Expression<Func<T, bool>> 假 Type Parameters T 传入参数的泛型 Not<T>(Expression<Func<T, bool>>) 表是否的表达式 public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expression) Parameters expression Expression<Func<T, bool>> 表达式 Returns Expression<Func<T, bool>> 表达式 Type Parameters T 传入参数类型 Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 表示或的表达式 public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters first Expression<Func<T, bool>> 第一个参数 second Expression<Func<T, bool>> 第二个 Returns Expression<Func<T, bool>> 表达式 Type Parameters T 传入参数类型 True<T>() 返回真的委托表达式 public static Expression<Func<T, bool>> True<T>() Returns Expression<Func<T, bool>> 真 Type Parameters T 传入参数的泛型"
  },
  "api/IFoxCAD.Basal.ProState.html": {
    "href": "api/IFoxCAD.Basal.ProState.html",
    "title": "Class ProState",
    "keywords": "Class ProState Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 控制程序流程 public class ProState Inheritance object ProState Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ProState() public ProState() Properties IsBreak public bool IsBreak { get; } Property Value bool IsCancel public bool IsCancel { get; } Property Value bool IsExceptional public bool IsExceptional { get; } Property Value bool IsNone public bool IsNone { get; } Property Value bool IsRun public bool IsRun { get; } Property Value bool IsStop public bool IsStop { get; } Property Value bool Methods Break() public void Break() Cancel() public void Cancel() Exceptional() public void Exceptional() None() public void None() Start() public void Start() Stop() public void Stop()"
  },
  "api/IFoxCAD.Basal.RandomEx.html": {
    "href": "api/IFoxCAD.Basal.RandomEx.html",
    "title": "Class RandomEx",
    "keywords": "Class RandomEx Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 随机值扩展类 public static class RandomEx Inheritance object RandomEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetRandom() 带有随机种子的随机数 为什么这样写随机种子呢 public static Random GetRandom() Returns Random NextBool() 生成一个布尔随机数 public static bool NextBool() Returns bool NextBool(Random) 生成一个布尔随机数 public static bool NextBool(Random ran) Parameters ran Random Returns bool NextColor() 生成一个随机颜色 public static Color NextColor() Returns Color 返回Color NextColor(Random) 生成一个随机颜色 public static Color NextColor(Random ran) Parameters ran Random Returns Color NextDouble(double, double) 生成一个指定范围的浮点数值 public static double NextDouble(double minValue, double maxValue) Parameters minValue double 范围最小浮点数值 maxValue double 范围最大浮点数值 Returns double NextDouble(double[]) 生成一个不连续或指定值的随机值 public static double NextDouble(double[] arr) Parameters arr double[] 一个双精度值数组 Returns double NextDouble(Random, double, double) 生成一个指定范围的浮点数值 相关链接 public static double NextDouble(Random ran, double minValue, double maxValue) Parameters ran Random 一个随机值产生器 minValue double 范围最小浮点数值 maxValue double 范围最大浮点数值 Returns double NextDouble(Random, double[]) 生成不连续或指定值的随机值 public static double NextDouble(Random ran, double[] arr) Parameters ran Random 一个随机值产生器 arr double[] 一个双精度值数组 Returns double NextInt(int) 生成指定范围内的整数 public static int NextInt(int max) Parameters max int 范围最大整数值 Returns int NextInt(int, int) 生成指定范围内的整数 public static int NextInt(int min, int max) Parameters min int 范围的最小整数 max int 范围的最大整数 Returns int 返回一个介于min与max之间的整数 NextInt(Random, int) 生成指定范围内的整数 public static int NextInt(Random ran, int max) Parameters ran Random 一个随机值产生器 max int 范围最大整数值 Returns int NextInt(Random, int, int) 生成指定范围内的整数 public static int NextInt(Random ran, int min, int max) Parameters ran Random 一个随机值产生器 min int 范围的最小整数 max int 范围的最大整数 Returns int 返回一个介于min与max之间的整数 NextString(Random, string[]) 生成一个不连续或指定值的随机值 public static string NextString(Random ran, string[] arr) Parameters ran Random 一个随机值产生器 arr string[] 一个字符串数组 Returns string NextString(string[]) 生成一个不连续或指定值的随机值 public static string NextString(string[] arr) Parameters arr string[] 一个字符串数组 Returns string"
  },
  "api/IFoxCAD.Basal.SC.html": {
    "href": "api/IFoxCAD.Basal.SC.html",
    "title": "Enum SC",
    "keywords": "Enum SC Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [Flags] public enum SC : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields SC_CLOSE = 61536 SC_MAXIMIZE = 61488 SC_MINIMIZE = 61472 SC_NOMAL = 61728"
  },
  "api/IFoxCAD.Basal.SqlExpressionVisitor.html": {
    "href": "api/IFoxCAD.Basal.SqlExpressionVisitor.html",
    "title": "Class SqlExpressionVisitor",
    "keywords": "Class SqlExpressionVisitor Namespace IFoxCAD.Basal Assembly IFox.Basal.dll sql表达式访问者类 public abstract class SqlExpressionVisitor Inheritance object SqlExpressionVisitor Derived ParameterRebinder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors SqlExpressionVisitor() protected SqlExpressionVisitor() Methods Visit(Expression) 访问 protected virtual Expression? Visit(Expression expression) Parameters expression Expression 表达式 Returns Expression 表达式 Exceptions RuntimeBinderException VisitBinary(BinaryExpression) 访问二进制运算符 protected virtual Expression VisitBinary(BinaryExpression binary) Parameters binary BinaryExpression 二进制运算符 Returns Expression 表达式 VisitBinding(MemberBinding) 访问者绑定 protected virtual MemberBinding VisitBinding(MemberBinding binding) Parameters binding MemberBinding 绑定的类 Returns MemberBinding 绑定的类 Exceptions RuntimeBinderException VisitBindingList(ReadOnlyCollection<MemberBinding>) 访问成员初始化列表 protected virtual IEnumerable<MemberBinding> VisitBindingList(ReadOnlyCollection<MemberBinding> original) Parameters original ReadOnlyCollection<MemberBinding> 成员初始化列表 Returns IEnumerable<MemberBinding> 成员初始化列表 VisitConditional(ConditionalExpression) 访问条件运算符 protected virtual Expression VisitConditional(ConditionalExpression conditional) Parameters conditional ConditionalExpression 条件运算符 Returns Expression 表达式 VisitConstant(ConstantExpression) 访问常数值 protected virtual Expression VisitConstant(ConstantExpression constant) Parameters constant ConstantExpression 常数值 Returns Expression 表达式 VisitElementInitializer(ElementInit) 访问集合初始设定项 protected virtual ElementInit VisitElementInitializer(ElementInit initializer) Parameters initializer ElementInit 集合初始设定项 Returns ElementInit 集合初始设定项 VisitElementInitializerList(ReadOnlyCollection<ElementInit>) 访问集合设定项集合 protected virtual IEnumerable<ElementInit> VisitElementInitializerList(ReadOnlyCollection<ElementInit> original) Parameters original ReadOnlyCollection<ElementInit> 集合设定项集合 Returns IEnumerable<ElementInit> 集合设定项集合 VisitExpressionList(ReadOnlyCollection<Expression>) 访问表达式集合 protected virtual ReadOnlyCollection<Expression> VisitExpressionList(ReadOnlyCollection<Expression> original) Parameters original ReadOnlyCollection<Expression> 表达式集合 Returns ReadOnlyCollection<Expression> 表达式只读集合 VisitInvocation(InvocationExpression) 访问委托调用表达式 protected virtual Expression VisitInvocation(InvocationExpression invocation) Parameters invocation InvocationExpression 委托调用表达式 Returns Expression 表达式 VisitLambda(LambdaExpression) 访问lambda表达式 protected virtual Expression VisitLambda(LambdaExpression lambda) Parameters lambda LambdaExpression lambda表达式 Returns Expression 表达式 VisitListInit(ListInitExpression) 访问集合初始化 protected virtual Expression VisitListInit(ListInitExpression listInit) Parameters listInit ListInitExpression 集合初始化 Returns Expression 表达式 VisitMemberAccess(MemberExpression) 访问成员 protected virtual Expression VisitMemberAccess(MemberExpression member) Parameters member MemberExpression 成员 Returns Expression 表达式 VisitMemberAssignment(MemberAssignment) 访问成员赋值 protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment) Parameters assignment MemberAssignment 成员赋值 Returns MemberAssignment VisitMemberInit(MemberInitExpression) 访问成员初始化 protected virtual Expression VisitMemberInit(MemberInitExpression memberInit) Parameters memberInit MemberInitExpression 成员初始化 Returns Expression 表达式 VisitMemberListBinding(MemberListBinding) 访问成员初始化 protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding) Parameters binding MemberListBinding 成员初始化 Returns MemberListBinding 成员初始化 VisitMemberMemberBinding(MemberMemberBinding) 访问新对象成员的成员 protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding) Parameters binding MemberMemberBinding 新对象成员的成员 Returns MemberMemberBinding 新对象成员的成员 VisitMethodCall(MethodCallExpression) 访问方法调用 protected virtual Expression VisitMethodCall(MethodCallExpression methodCall) Parameters methodCall MethodCallExpression 方法调用 Returns Expression 表达式 VisitNew(NewExpression) 访问构造函数 protected virtual NewExpression VisitNew(NewExpression expression) Parameters expression NewExpression 构造函数 Returns NewExpression 构造函数 VisitNewArray(NewArrayExpression) 访问新数组 protected virtual Expression VisitNewArray(NewArrayExpression newArray) Parameters newArray NewArrayExpression 新数组 Returns Expression 表达式 VisitParameter(ParameterExpression) 访问参数 protected virtual Expression VisitParameter(ParameterExpression parameter) Parameters parameter ParameterExpression 参数 Returns Expression 表达式 VisitTypeIs(TypeBinaryExpression) 访问类型 protected virtual Expression VisitTypeIs(TypeBinaryExpression typeBinary) Parameters typeBinary TypeBinaryExpression 类型 Returns Expression 表达式 VisitUnary(UnaryExpression) 访问一元运算符 protected virtual Expression VisitUnary(UnaryExpression unary) Parameters unary UnaryExpression 一元运算符 Returns Expression 表达式"
  },
  "api/IFoxCAD.Basal.TH32CS.html": {
    "href": "api/IFoxCAD.Basal.TH32CS.html",
    "title": "Enum TH32CS",
    "keywords": "Enum TH32CS Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [Flags] public enum TH32CS : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields TH32CS_INHERIT = 2147483648 声明快照句柄是可继承的 TH32CS_SNAPALL = TH32CS_SNAPHEAPLIST | TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD | TH32CS_SNAPMODULE 在快照中包含系统中所有的进程和线程 TH32CS_SNAPHEAPLIST = 1 在快照中包含在th32ProcessID中指定的进程的所有的堆 TH32CS_SNAPMODULE = 8 在快照中包含在th32ProcessID中指定的进程的所有的模块 TH32CS_SNAPNOHEAPS = 1073741824 原因在于如果不采用改参数的话,有可能快照会占用整个堆的空间 TH32CS_SNAPPROCESS = 2 在快照中包含系统中所有的进程 TH32CS_SNAPTHREAD = 4 在快照中包含系统中所有的线程"
  },
  "api/IFoxCAD.Basal.Timer.TimeEnum.html": {
    "href": "api/IFoxCAD.Basal.Timer.TimeEnum.html",
    "title": "Enum Timer.TimeEnum",
    "keywords": "Enum Timer.TimeEnum Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 时间单位枚举 [Flags] public enum Timer.TimeEnum Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields Microsecond = 2 微秒 Millisecond = 1 毫秒 Nanosecond = Millisecond | Microsecond 纳秒 Second = 0 秒"
  },
  "api/IFoxCAD.Basal.Timer.html": {
    "href": "api/IFoxCAD.Basal.Timer.html",
    "title": "Class Timer",
    "keywords": "Class Timer Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 时间定时类 public class Timer Inheritance object Timer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors Timer() 构造函数 public Timer() Exceptions Win32Exception Properties Microsecond 微秒 public double Microsecond { get; } Property Value double Millisecond 毫秒 public double Millisecond { get; } Property Value double Nanosecond 纳秒 public double Nanosecond { get; } Property Value double Second 秒 public double Second { get; } Property Value double Methods RunTime(Action, TimeEnum) 计算执行委托的时间 public static double RunTime(Action action, Timer.TimeEnum timeEnum = TimeEnum.Millisecond) Parameters action Action 要执行的委托 timeEnum Timer.TimeEnum 时间单位 Returns double 执行委托的时间 Start() 开始计时器 public void Start() Stop() 停止计时器 public void Stop()"
  },
  "api/IFoxCAD.Basal.VK.html": {
    "href": "api/IFoxCAD.Basal.VK.html",
    "title": "Enum VK",
    "keywords": "Enum VK Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [Flags] public enum VK Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields VK_0 = VK_SHIFT | VK_SPACE VK_1 = VK_LBUTTON | VK_0 VK_2 = VK_RBUTTON | VK_0 VK_3 = VK_LBUTTON | VK_2 VK_4 = VK_MBUTTON | VK_0 VK_5 = VK_LBUTTON | VK_4 VK_6 = VK_RBUTTON | VK_4 VK_7 = VK_LBUTTON | VK_6 VK_8 = VK_BACK | VK_0 VK_9 = VK_LBUTTON | VK_8 VK_A = 65 VK_ADD = VK_LBUTTON | VK_MULTIPLY VK_ALT = VK_RBUTTON | VK_SHIFT VK_ATTN = VK_RBUTTON | VK_OEM_ENLW VK_B = 66 VK_BACK = 8 VK_C = VK_LBUTTON | VK_B VK_CANCEL = VK_LBUTTON | VK_RBUTTON VK_CAPITAL = VK_MBUTTON | VK_SHIFT VK_CLEAR = VK_MBUTTON | VK_BACK VK_CONTEXTKEY = VK_MBUTTON | VK_Y VK_CONTROL = VK_LBUTTON | VK_SHIFT VK_CRSEL = VK_LBUTTON | VK_ATTN VK_D = 68 VK_DECIMAL = VK_RBUTTON | VK_SEPARATOR VK_DIVIDE = VK_LBUTTON | VK_DECIMAL VK_DOWN = VK_BACK | VK_SPACE VK_Delete = VK_RBUTTON | VK_SNAPSHOT VK_E = VK_LBUTTON | VK_D VK_END = VK_LBUTTON | VK_NEXT VK_EREOF = VK_LBUTTON | VK_EXSEL VK_ESCAPE = VK_BACK | VK_PAUSE VK_EXECUTE = VK_LBUTTON | VK_PRINT VK_EXSEL = VK_BACK | VK_OEM_ATTN VK_F = VK_RBUTTON | VK_D VK_F1 = VK_SHIFT | VK_NUMPAD0 VK_F10 = VK_LBUTTON | VK_F9 VK_F11 = VK_RBUTTON | VK_F9 VK_F12 = VK_LBUTTON | VK_F11 VK_F13 = VK_MBUTTON | VK_F9 VK_F14 = VK_LBUTTON | VK_F13 VK_F15 = VK_RBUTTON | VK_F13 VK_F16 = VK_LBUTTON | VK_F15 VK_F17 = 128 VK_F18 = VK_LBUTTON | VK_F17 VK_F19 = VK_RBUTTON | VK_F17 VK_F2 = VK_LBUTTON | VK_F1 VK_F20 = VK_LBUTTON | VK_F19 VK_F21 = VK_MBUTTON | VK_F17 VK_F22 = VK_LBUTTON | VK_F21 VK_F23 = VK_RBUTTON | VK_F21 VK_F24 = VK_LBUTTON | VK_F23 VK_F3 = VK_RBUTTON | VK_F1 VK_F4 = VK_LBUTTON | VK_F3 VK_F5 = VK_MBUTTON | VK_F1 VK_F6 = VK_LBUTTON | VK_F5 VK_F7 = VK_RBUTTON | VK_F5 VK_F8 = VK_LBUTTON | VK_F7 VK_F9 = VK_BACK | VK_F1 VK_G = VK_LBUTTON | VK_F VK_H = 72 VK_HELP = VK_LBUTTON | VK_Delete VK_HOME = VK_MBUTTON | VK_SPACE VK_I = VK_LBUTTON | VK_H VK_ICO_00 = VK_MBUTTON | VK_ICO_F17 VK_ICO_CLEAR = VK_RBUTTON | VK_ICO_00 VK_ICO_F17 = VK_SPACE | VK_OEM_3 VK_ICO_F18 = VK_LBUTTON | VK_ICO_F17 VK_ICO_HELP = VK_LBUTTON | VK_OEM102 VK_Insert = VK_LBUTTON | VK_SNAPSHOT VK_J = VK_RBUTTON | VK_H VK_K = VK_LBUTTON | VK_J VK_L = VK_MBUTTON | VK_H VK_LBUTTON = 1 VK_LEFT = VK_LBUTTON | VK_HOME VK_M = VK_LBUTTON | VK_L VK_MBUTTON = 4 VK_MENU = VK_RBUTTON | VK_SHIFT VK_MULTIPLY = VK_RBUTTON | VK_NUMPAD8 VK_N = VK_RBUTTON | VK_L VK_NEXT = VK_RBUTTON | VK_SPACE VK_NONAME = VK_MBUTTON | VK_EXSEL VK_NUMLOCK = VK_SHIFT | VK_F17 VK_NUMPAD0 = 96 VK_NUMPAD1 = VK_LBUTTON | VK_NUMPAD0 VK_NUMPAD2 = VK_RBUTTON | VK_NUMPAD0 VK_NUMPAD3 = VK_LBUTTON | VK_NUMPAD2 VK_NUMPAD4 = VK_MBUTTON | VK_NUMPAD0 VK_NUMPAD5 = VK_LBUTTON | VK_NUMPAD4 VK_NUMPAD6 = VK_RBUTTON | VK_NUMPAD4 VK_NUMPAD7 = VK_LBUTTON | VK_NUMPAD6 VK_NUMPAD8 = VK_BACK | VK_NUMPAD0 VK_NUMPAD9 = VK_LBUTTON | VK_NUMPAD8 VK_O = VK_LBUTTON | VK_N VK_OEM102 = VK_RBUTTON | VK_ICO_F17 VK_OEM_1 = VK_PRINT | VK_NUMLOCK VK_OEM_2 = VK_LBUTTON | VK_OEM_PERIOD VK_OEM_3 = 192 VK_OEM_4 = VK_ESCAPE | VK_OEM_3 VK_OEM_5 = VK_BACK | VK_CAPITAL | VK_OEM_3 VK_OEM_6 = VK_LBUTTON | VK_OEM_5 VK_OEM_7 = VK_RBUTTON | VK_OEM_5 VK_OEM_8 = VK_LBUTTON | VK_OEM_7 VK_OEM_ATTN = VK_SHIFT | VK_ICO_F17 VK_OEM_AUTO = VK_LBUTTON | VK_OEM_COPY VK_OEM_BACKTAB = VK_LBUTTON | VK_OEM_ENLW VK_OEM_CLEAR = VK_RBUTTON | VK_NONAME VK_OEM_COMMA = VK_SNAPSHOT | VK_NUMLOCK VK_OEM_COPY = VK_RBUTTON | VK_OEM_ATTN VK_OEM_CUSEL = VK_LBUTTON | VK_OEM_WSCTRL VK_OEM_ENLW = VK_MBUTTON | VK_OEM_ATTN VK_OEM_FINNISH = VK_LBUTTON | VK_OEM_ATTN VK_OEM_JUMP = VK_BACK | VK_OEM102 VK_OEM_MINUS = VK_LBUTTON | VK_OEM_COMMA VK_OEM_PA1 = VK_LBUTTON | VK_OEM_JUMP VK_OEM_PA2 = VK_BACK | VK_ICO_00 VK_OEM_PA3 = VK_LBUTTON | VK_OEM_PA2 VK_OEM_PERIOD = VK_RBUTTON | VK_OEM_COMMA VK_OEM_PLUS = VK_LBUTTON | VK_OEM_1 VK_OEM_RESET = VK_BACK | VK_ICO_F18 VK_OEM_SCROLL = VK_LBUTTON | VK_NUMLOCK VK_OEM_WSCTRL = VK_RBUTTON | VK_OEM_PA2 VK_P = 80 VK_PA1 = VK_LBUTTON | VK_NONAME VK_PAUSE = VK_LBUTTON | VK_ALT VK_PLAY = VK_RBUTTON | VK_EXSEL VK_PRINT = VK_RBUTTON | VK_DOWN VK_PRIOR = VK_LBUTTON | VK_SPACE VK_Q = VK_LBUTTON | VK_P VK_R = VK_RBUTTON | VK_P VK_RBUTTON = 2 VK_RETURN = VK_LBUTTON | VK_CLEAR VK_RIGHT = VK_LBUTTON | VK_UP VK_S = VK_LBUTTON | VK_R VK_SEPARATOR = VK_MBUTTON | VK_NUMPAD8 VK_SHIFT = 16 VK_SNAPSHOT = VK_MBUTTON | VK_DOWN VK_SPACE = 32 VK_STARTKEY = VK_LBUTTON | VK_Z VK_SUBTRACT = VK_LBUTTON | VK_SEPARATOR VK_Select = VK_LBUTTON | VK_DOWN VK_T = VK_MBUTTON | VK_P VK_TAB = VK_LBUTTON | VK_BACK VK_U = VK_LBUTTON | VK_T VK_UP = VK_RBUTTON | VK_HOME VK_V = VK_RBUTTON | VK_T VK_W = VK_LBUTTON | VK_V VK_X = VK_BACK | VK_P VK_Y = VK_LBUTTON | VK_X VK_Z = VK_RBUTTON | VK_X VK_ZOOM = VK_LBUTTON | VK_PLAY"
  },
  "api/IFoxCAD.Basal.WM.html": {
    "href": "api/IFoxCAD.Basal.WM.html",
    "title": "Enum WM",
    "keywords": "Enum WM Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 消息类型 作为SendMessage和PostMessage的参数 [Flags] public enum WM : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields WM_ACTIVATE = 6 一个窗口被激活或失去激活状态 WM_ACTIVATEAPP = 28 发此消息给应用程序哪个窗口是激活的,哪个是非激活的 WM_CANCELJOURNA = WM_CREATE | WM_COPYDATA 当某个用户取消程序日志激活状态,提交此消息给程序 WM_CANCELMODE = WM_CREATE | WM_TIMECHANGE 发送此消息来取消某种正在进行的摸态（操作） WM_CHAR = WM_DESTROY | WM_KEYDOWN 按下某键,并已发出WM_KEYDOWN, WM_KEYUP消息 WM_CHARTOITEM = WM_CREATE | WM_VKEYTOITEM 此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息 WM_CHILDACTIVATE = WM_DESTROY | WM_SETCURSOR 发送此消息给MDI子窗口当用户点击此窗口的标题栏或当窗口被激活,移动,改变大小 WM_CLIPBOARDUPDATE = WM_HSCROLL | WM_MBUTTONDBLCLK 执行复制成功 WM_CLOSE = 16 当一个窗口或应用程序要关闭时发送一个信号 WM_COMMAND = WM_CREATE | WM_INITDIALOG 当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口 WM_COMPACTING = 65 显示内存已经很少了 WM_COMPAREITEM = WM_KILLFOCUS | WM_GETFONT 发送此消息来判定combobox或listbox新增加的项的相对位置 WM_CONTEXTMENU = WM_NEXTDLGCTL | WM_HELP 当用户某个窗口中点击了一下右键就发送此消息给这个窗口 WM_COPYDATA = WM_DESTROY | WM_POWER 当一个应用程序传递数据给另一个应用程序时发送此消息 WM_CREATE = 1 创建一个窗口 WM_CTLCOLORBTN = WM_CREATE | WM_CTLCOLORLISTBOX 当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色 WM_CTLCOLORDLG = WM_DESTROY | WM_CTLCOLORLISTBOX 当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色 WM_CTLCOLOREDIT = WM_CREATE | WM_CTLCOLORMSGBOX 当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色 WM_CTLCOLORLISTBOX = WM_ERASEBKGND | WM_MENUCHAR 当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色 WM_CTLCOLORMSGBOX = WM_QUIT | WM_MENUCHAR 在windows绘制消息框前发送此消息给消息框的所有者窗口,通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色 WM_CTLCOLORSCROLLBAR = WM_CREATE | WM_CTLCOLORDLG 当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色 WM_CTLCOLORSTATIC = WM_SHOWWINDOW | WM_MENUCHAR 当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息,所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色 WM_DEADCHAR = WM_CREATE | WM_CHAR 当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口 WM_DESTROY = 2 当一个窗口被破坏时发送 WM_DISPLAYCHANGE = WM_DESTROY | WM_STYLECHANGING 当显示器的分辨率改变后发送此消息给所有的窗口 WM_DRAWITEM = WM_CREATE | WM_SPOOLERSTATUS 当button,combobox,listbox,menu的可视外观改变时发送 WM_ENABLE = WM_DESTROY | WM_KILLFOCUS 一个窗口改变成Enable状态 WM_ENDSESSION = WM_DESTROY | WM_ERASEBKGND 当系统进程发出WM_QUERYENDSESSION消息后,此消息发送给应用程序,通知它对话是否结束 WM_ENTERIDLE = WM_CREATE | WM_MENUCHAR 当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者,一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待 WM_ERASEBKGND = 20 当窗口背景必须被擦除时（例在窗口改变大小时） WM_FONTCHANGE = WM_CREATE | WM_ACTIVATEAPP 当系统的字体资源库变化时发送此消息给所有顶级窗口 WM_GETDLGCODE = WM_CREATE | WM_NCACTIVATE 发送此消息给某个与对话框程序关联的控件,widdows控制方位键和TAB键使输入进入此控件通过应 WM_GETFONT = WM_CREATE | WM_SETFONT 应用程序发送此消息得到当前控件绘制文本的字体 WM_GETHOTKEY = WM_CREATE | WM_SETHOTKEY 应用程序发送此消息来判断热键与某个窗口是否有关联 WM_GETICON = WM_CREATE | WM_DISPLAYCHANGE 此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄 WM_GETMINMAXINFO = 36 此消息发送给窗口当它将要改变大小或位置 WM_GETTEXT = WM_CREATE | WM_SETTEXT 应用程序发送此消息来复制对应窗口的文本到缓冲区 WM_GETTEXTLENGTH = WM_DESTROY | WM_SETTEXT 得到与一个窗口有关的文本的长度（不包含空字符） WM_HELP = WM_CREATE | WM_TCARD 此消息显示用户按下了F1,如果某个菜单是激活的,就发送此消息个此窗口关联的菜单,否则就发送给有焦点的窗口,如果当前都没有焦点,就把此消息发送给当前激活的窗口 WM_HSCROLL = 276 当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口,也发送给拥有它的控件 WM_ICONERASEBKGND = WM_CREATE | WM_PAINTICON 此消息发送给某个最小化窗口,仅当它在画图标前它的背景必须被重画 WM_INITDIALOG = WM_CLOSE | WM_KEYDOWN 在一个对话框程序被显示前发送此消息给它,通常用此消息初始化控件和执行其它任务 WM_INITMENU = WM_DESTROY | WM_HSCROLL 当一个菜单将要被激活时发送此消息,它发生在用户菜单条中的某项或按下某个菜单键,它允许程序在显示前更改菜单 WM_INITMENUPOPUP = WM_CREATE | WM_INITMENU 当一个下拉菜单或子菜单将要被激活时发送此消息,它允许程序在它显示前更改菜单,而不要改变全部 WM_INPUTLANGCHANGE = WM_CREATE | WM_INPUTLANGCHANGEREQUEST 当平台现场已经被改变后发送此消息给受影响的最顶级窗口 WM_INPUTLANGCHANGEREQUEST = 80 当用户选择某种输入语言,或输入语言的热键改变 WM_KEYDOWN = 256 按下一个键 WM_KEYFIRST = 256 按下一个键 == WM_KEYDOWN WM_KEYUP = WM_CREATE | WM_KEYDOWN 释放一个键 WM_KILLFOCUS = 8 一个窗口失去焦点 WM_LBUTTONDBLCLK = WM_CREATE | WM_LBUTTONUP 双击鼠标左键 WM_LBUTTONDOWN = WM_CREATE | WM_MOUSEMOVE 按下鼠标左键 WM_LBUTTONUP = WM_DESTROY | WM_MOUSEMOVE 释放鼠标左键 WM_MBUTTONDBLCLK = WM_CREATE | WM_MBUTTONUP 双击鼠标中键 WM_MBUTTONDOWN = WM_CREATE | WM_RBUTTONDBLCLK 按下鼠标中键 WM_MBUTTONUP = WM_KILLFOCUS | WM_MOUSEMOVE 释放鼠标中键 WM_MEASUREITEM = 44 当button, combo box, list box, list view control, or menu item 被创建时 WM_MENUCHAR = WM_SETCURSOR | WM_KEYDOWN 当菜单已被激活用户按下了某个键（不同于加速键）,发送此消息给菜单的所有者 WM_MENUSELECT = WM_KILLFOCUS | WM_INITMENUPOPUP 当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口） WM_MOUSEACTIVATE = WM_CREATE | WM_SETCURSOR 当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口 WM_MOUSEMOVE = 512 移动鼠标时发生,同WM_MOUSEFIRST WM_MOUSEWHEEL = WM_DESTROY | WM_MBUTTONUP 当鼠标轮子转动时发送此消息个当前有焦点的控件 WM_MOVE = WM_CREATE | WM_DESTROY 移动一个窗口 WM_NCACTIVATE = WM_DESTROY | WM_NCHITTEST 此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态 WM_NCCALCSIZE = WM_CREATE | WM_NCDESTROY 当某个窗口的客户区域必须被核算时发送此消息 WM_NCCREATE = WM_CREATE | WM_SETICON 当某个窗口第一次被创建时,此消息在WM_CREATE消息发送前发送 WM_NCDESTROY = WM_DESTROY | WM_SETICON 此消息通知某个窗口,非客户区正在销毁 WM_NCHITTEST = 132 移动鼠标/按住/释放鼠标时 WM_NCLBUTTONDBLCLK = WM_CREATE | WM_NCLBUTTONUP 当用户双击鼠标左键同时光标某个窗口在非客户区时发送此消息 WM_NCLBUTTONDOWN = WM_CREATE | WM_NCMOUSEMOVE 当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息 WM_NCLBUTTONUP = WM_DESTROY | WM_NCMOUSEMOVE 当用户释放鼠标左键同时光标某个窗口在非客户区时发送此消息 WM_NCMBUTTONDBLCLK = WM_CREATE | WM_NCMBUTTONUP 当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_NCMBUTTONDOWN = WM_CREATE | WM_NCRBUTTONDBLCLK 当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_NCMBUTTONUP = WM_KILLFOCUS | WM_NCMOUSEMOVE 当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_NCMOUSEMOVE = WM_SETCURSOR | WM_SETICON 当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗的边框体 WM_NCPAINT = WM_CREATE | WM_NCHITTEST 程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时 WM_NCRBUTTONDBLCLK = WM_DESTROY | WM_NCRBUTTONDOWN 当用户双击鼠标右键同时光标某个窗口在非客户区时发送此消息 WM_NCRBUTTONDOWN = 164 当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息 WM_NCRBUTTONUP = WM_CREATE | WM_NCRBUTTONDOWN 当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息 WM_NEXTDLGCTL = WM_KILLFOCUS | WM_SETCURSOR 发送此消息给一个对话框程序去更改焦点位置 WM_NOTIFY = 78 当某个控件的某个事件已经发生或这个控件需要得到一些信息时,发送此消息给它的父窗口 WM_NOTIFYFORMAT = WM_CREATE | WM_USERCHANGED 公用控件,自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构 WM_PAINT = WM_CREATE | WM_GETTEXTLENGTH 要求一个窗口重画自己 WM_PAINTICON = WM_DESTROY | WM_GETMINMAXINFO 发送给最小化窗口当它图标将要被重画 WM_POWER = 72 当系统将要进入暂停状态时发送此消息 WM_QUERYDRAGICON = 55 此消息发送给最小化窗口,当此窗口将要被拖放而它的类中没有定义图标,应用程序能返回一个图标或光标的句柄,当用户拖放图标时系统显示这个图标或光标 WM_QUERYENDSESSION = WM_CREATE | WM_CLOSE 当用户选择结束对话框或程序自己调用ExitWindows函数 WM_QUERYOPEN = WM_CREATE | WM_QUIT 当用户窗口恢复以前的大小位置时,把此消息发送给某个图标 WM_QUEUESYNC = WM_CREATE | WM_CHILDACTIVATE 此消息由基于计算机的训练程序发送,通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息 WM_QUIT = WM_DESTROY | WM_CLOSE 用来结束程序运行 WM_RBUTTONDBLCLK = WM_DESTROY | WM_RBUTTONDOWN 双击鼠标右键 WM_RBUTTONDOWN = 516 按下鼠标右键 WM_RBUTTONUP = WM_CREATE | WM_RBUTTONDOWN 释放鼠标右键 WM_SETCURSOR = 32 如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时,就发消息给某个窗口 WM_SETFOCUS = WM_CREATE | WM_ACTIVATE 一个窗口获得焦点 WM_SETFONT = WM_CLOSE | WM_SETCURSOR 当绘制文本时程序发送此消息得到控件要用的颜色 WM_SETHOTKEY = WM_DESTROY | WM_SETFONT 应用程序发送此消息让一个窗口与一个热键相关连 WM_SETICON = 128 程序发送此消息让一个新的大图标或小图标与某个窗口关联 WM_SETREDRAW = WM_CREATE | WM_ENABLE 设置窗口是否能重画 WM_SETTEXT = 12 应用程序发送此消息来设置一个窗口的文本 WM_SHOWWINDOW = WM_KILLFOCUS | WM_CLOSE 当隐藏或显示窗口是发送此消息给这个窗口 WM_SIZE = 5 改变一个窗口的大小 WM_SPOOLERSTATUS = WM_DESTROY | WM_NEXTDLGCTL 每当打印管理列队增加或减少一条作业时发出此消息 WM_STYLECHANGED = WM_CREATE | WM_STYLECHANGING 当调用SETWINDOWLONG函数一个或多个窗口的风格后发送此消息给那个窗口 WM_STYLECHANGING = WM_NEXTDLGCTL | WM_USERCHANGED 当调用SETWINDOWLONG函数将要改变一个或多个窗口的风格时发送此消息给那个窗口 WM_SYSCHAR = WM_DESTROY | WM_SYSKEYDOWN 当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口 WM_SYSCOLORCHANGE = WM_CREATE | WM_ERASEBKGND 当系统颜色改变时,发送此消息给所有顶级窗口 WM_SYSCOMMAND = WM_DESTROY | WM_INITDIALOG 当用户选择窗口菜单的一条命令或最大化最小化时窗口前会收到此消息 WM_SYSDEADCHAR = WM_CREATE | WM_SYSCHAR 当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口 WM_SYSKEYDOWN = 260 当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口 WM_SYSKEYUP = WM_CREATE | WM_SYSKEYDOWN 当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口 WM_TCARD = WM_DESTROY | WM_INPUTLANGCHANGEREQUEST 当程序已经初始化windows帮助例程时发送此消息给应用程序 WM_TIMECHANGE = WM_DESTROY | WM_ACTIVATEAPP 当系统的时间变化时发送此消息给所有顶级窗口 WM_TIMER = WM_CREATE | WM_SYSCOMMAND 发生了定时器事件 WM_USER = 1024 WM_USERCHANGED = 84 当用户已经登入或退出后发送此消息给所有的窗口,当用户登入或退出时系统更新用户的具体设置信息,在用户更新设置时系统马上发送此消息 WM_VKEYTOITEM = WM_DESTROY | WM_MEASUREITEM 此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息 WM_VSCROLL = WM_CREATE | WM_HSCROLL 当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也,发送给拥有它的控件 WM_WINDOWPOSCHANGED = WM_CREATE | WM_WINDOWPOSCHANGING 窗口大小和位置已经被改变后,来调用Setwindowpos函数或其它窗口管理函数 WM_WINDOWPOSCHANGING = 70 窗口大小和位置将要被改变时,来调用Setwindowpos函数或其它窗口管理函数"
  },
  "api/IFoxCAD.Basal.WS.html": {
    "href": "api/IFoxCAD.Basal.WS.html",
    "title": "Enum WS",
    "keywords": "Enum WS Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public enum WS : uint Extension Methods EnumEx.GetAttribute<T>(Enum, bool) EnumEx.GetDesc(Enum) EnumEx.PrintNote(Enum, bool) ArgumentNullEx.NotNull(object?, string) Fields WS_BORDER = 8388608 WS_CAPTION = 12582912 WS_CHILD = 1073741824 WS_CHILDWINDOW = 1073741824 WS_CLIPCHILDREN = 33554432 WS_CLIPSIBLINGS = 67108864 WS_DISABLED = 134217728 WS_DLGFRAME = 4194304 WS_EX_ACCEPTFILES = 16 WS_EX_APPWINDOW = 262144 WS_EX_CLIENTEDGE = 512 WS_EX_COMPOSITED = 33554432 WS_EX_CONTEXTHELP = 1024 WS_EX_CONTROLPARENT = 65536 WS_EX_DLGMODALFRAME = 1 WS_EX_LAYERED = 524288 WS_EX_LAYOUTRTL = 4194304 WS_EX_LEFT = 0 WS_EX_LEFTSCROLLBAR = 16384 WS_EX_LTRREADING = 0 WS_EX_MDICHILD = 64 WS_EX_NOACTIVATE = 134217728 WS_EX_NOINHERITLAYOUT = 1048576 WS_EX_NOPARENTNOTIFY = 4 WS_EX_OVERLAPPEDWINDOW = 768 WS_EX_PALETTEWINDOW = 392 WS_EX_RIGHT = 4096 WS_EX_RIGHTSCROLLBAR = 0 WS_EX_RTLREADING = 8192 WS_EX_STATICEDGE = 131072 WS_EX_TOOLWINDOW = 128 WS_EX_TOPMOST = 8 WS_EX_TRANSPARENT = 32 WS_EX_WINDOWEDGE = 256 WS_GROUP = 131072 WS_HSCROLL = 1048576 WS_MAXIMIZE = 16777216 WS_MAXIMIZEBOX = 65536 WS_MINIMIZE = 536870912 WS_MINIMIZEBOX = 131072 WS_OVERLAPPED = 0 WS_OVERLAPPEDWINDOW = 13565952 WS_POPUP = 2147483648 WS_POPUPWINDOW = 2156396544 WS_SYSMENU = 524288 WS_TABSTOP = 65536 WS_THICKFRAME = 262144 WS_VISIBLE = 268435456 WS_VSCROLL = 2097152"
  },
  "api/IFoxCAD.Basal.WindowsAPI.CallBack.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.CallBack.html",
    "title": "Delegate WindowsAPI.CallBack",
    "keywords": "Delegate WindowsAPI.CallBack Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public delegate nint WindowsAPI.CallBack(int nCode, int wParam, nint lParam) Parameters nCode int wParam int lParam nint Returns nint Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors CallBack(object, nint) public CallBack(object @object, nint method) Parameters object object method nint Methods BeginInvoke(int, int, nint, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(int nCode, int wParam, nint lParam, AsyncCallback callback, object @object) Parameters nCode int wParam int lParam nint callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual nint EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns nint Invoke(int, int, nint) public virtual nint Invoke(int nCode, int wParam, nint lParam) Parameters nCode int wParam int lParam nint Returns nint"
  },
  "api/IFoxCAD.Basal.WindowsAPI.GuiThreadInfo.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.GuiThreadInfo.html",
    "title": "Struct WindowsAPI.GuiThreadInfo",
    "keywords": "Struct WindowsAPI.GuiThreadInfo Namespace IFoxCAD.Basal Assembly IFox.Basal.dll 获取线程对应的窗体信息 public struct WindowsAPI.GuiThreadInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Fields cbSize public int cbSize Field Value int flags public int flags Field Value int hwndActive public nint hwndActive Field Value nint hwndCapture public nint hwndCapture Field Value nint hwndCaret public nint hwndCaret Field Value nint hwndFocus public nint hwndFocus Field Value nint hwndMenuOwner public nint hwndMenuOwner Field Value nint hwndMoveSize public nint hwndMoveSize Field Value nint rcCaret public Rectangle rcCaret Field Value Rectangle Methods Create(uint) public static WindowsAPI.GuiThreadInfo Create(uint windowThreadProcessId) Parameters windowThreadProcessId uint Returns WindowsAPI.GuiThreadInfo"
  },
  "api/IFoxCAD.Basal.WindowsAPI.IntRect.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.IntRect.html",
    "title": "Struct WindowsAPI.IntRect",
    "keywords": "Struct WindowsAPI.IntRect Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [ComVisible(true)] public struct WindowsAPI.IntRect Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Constructors IntRect(int, int, int, int) public IntRect(int left, int top, int right, int bottom) Parameters left int top int right int bottom int Properties Bottom public int Bottom { get; } Property Value int Height public int Height { get; } Property Value int Left public int Left { get; } Property Value int Right public int Right { get; } Property Value int Top public int Top { get; } Property Value int Width public int Width { get; } Property Value int Zero public static WindowsAPI.IntRect Zero { get; } Property Value WindowsAPI.IntRect Methods Clone() public WindowsAPI.IntRect Clone() Returns WindowsAPI.IntRect Equals(IntRect) public bool Equals(WindowsAPI.IntRect other) Parameters other WindowsAPI.IntRect Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(IntRect, IntRect) public static bool operator ==(WindowsAPI.IntRect a, WindowsAPI.IntRect b) Parameters a WindowsAPI.IntRect b WindowsAPI.IntRect Returns bool operator !=(IntRect, IntRect) public static bool operator !=(WindowsAPI.IntRect a, WindowsAPI.IntRect b) Parameters a WindowsAPI.IntRect b WindowsAPI.IntRect Returns bool"
  },
  "api/IFoxCAD.Basal.WindowsAPI.IntSize.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.IntSize.html",
    "title": "Struct WindowsAPI.IntSize",
    "keywords": "Struct WindowsAPI.IntSize Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [ComVisible(true)] public struct WindowsAPI.IntSize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Constructors IntSize(int, int) public IntSize(int cx, int cy) Parameters cx int cy int Fields Hight public int Hight Field Value int Width public int Width Field Value int Methods ToString() public override string ToString() Returns string"
  },
  "api/IFoxCAD.Basal.WindowsAPI.KeyboardHookStruct.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.KeyboardHookStruct.html",
    "title": "Struct WindowsAPI.KeyboardHookStruct",
    "keywords": "Struct WindowsAPI.KeyboardHookStruct Namespace IFoxCAD.Basal Assembly IFox.Basal.dll Hook键盘数据结构 [ComVisible(true)] public struct WindowsAPI.KeyboardHookStruct Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Fields DwExtraInfo public int DwExtraInfo Field Value int Flags public int Flags Field Value int ScanCode public int ScanCode Field Value int Time public int Time Field Value int VkCode public int VkCode Field Value int Methods Create(nint) public static WindowsAPI.KeyboardHookStruct Create(nint lParam) Parameters lParam nint Returns WindowsAPI.KeyboardHookStruct ToPtr(nint) public void ToPtr(nint lParam) Parameters lParam nint"
  },
  "api/IFoxCAD.Basal.WindowsAPI.Point3D.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.Point3D.html",
    "title": "Struct WindowsAPI.Point3D",
    "keywords": "Struct WindowsAPI.Point3D Namespace IFoxCAD.Basal Assembly IFox.Basal.dll [ComVisible(true)] public struct WindowsAPI.Point3D : IEquatable<WindowsAPI.Point3D> Implements IEquatable<WindowsAPI.Point3D> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Constructors Point3D(double, double, double) public Point3D(double x, double y, double z) Parameters x double y double z double Fields X public double X Field Value double Y public double Y Field Value double Z public double Z Field Value double Methods Create(nint) public static WindowsAPI.Point3D Create(nint lParam) Parameters lParam nint Returns WindowsAPI.Point3D Equals(Point3D) public bool Equals(WindowsAPI.Point3D other) Parameters other WindowsAPI.Point3D Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToPtr(nint) public void ToPtr(nint lParam) Parameters lParam nint ToString() public override string ToString() Returns string Operators operator ==(Point3D, Point3D) public static bool operator ==(WindowsAPI.Point3D a, WindowsAPI.Point3D b) Parameters a WindowsAPI.Point3D b WindowsAPI.Point3D Returns bool operator !=(Point3D, Point3D) public static bool operator !=(WindowsAPI.Point3D a, WindowsAPI.Point3D b) Parameters a WindowsAPI.Point3D b WindowsAPI.Point3D Returns bool"
  },
  "api/IFoxCAD.Basal.WindowsAPI.html": {
    "href": "api/IFoxCAD.Basal.WindowsAPI.html",
    "title": "Class WindowsAPI",
    "keywords": "Class WindowsAPI Namespace IFoxCAD.Basal Assembly IFox.Basal.dll public class WindowsAPI Inheritance object WindowsAPI Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors WindowsAPI() public WindowsAPI() Methods BytesToStruct<T>(byte[]) byte数组转结构体 public static T? BytesToStruct<T>(byte[] bytes) Parameters bytes byte[] byte数组 Returns T 返回的结构体 Type Parameters T BytesToStruct<T>(byte[], out int) byte数组转结构体 [Obsolete(\"效率太低\", true)] public static T? BytesToStruct<T>(byte[] bytes, out int typeSize) Parameters bytes byte[] byte数组 typeSize int 返回的结构大小 Returns T 返回的结构体 Type Parameters T CallNextHookEx(nint, int, int, nint) public static extern nint CallNextHookEx(nint hHook, int ncode, int wParam, nint lParam) Parameters hHook nint ncode int wParam int lParam nint Returns nint CheckLowLevelHooksTimeout(int) 注册表增加低级钩子超时处理,防止系统不允许, 否则:偶发性出现 键盘钩子不能用了,而且退出时产生 1404 错误 https://www.cnblogs.com/songr/p/5131655.html public static void CheckLowLevelHooksTimeout(int setLowLevel = 25000) Parameters setLowLevel int GetActiveWindow() public static extern nint GetActiveWindow() Returns nint GetClassName(nint, StringBuilder, int) 检索指定窗口所属的类的名称。 public static extern int GetClassName(nint hWnd, StringBuilder lpClassName, int nMaxCount) Parameters hWnd nint 窗口标识符 lpClassName StringBuilder nMaxCount int Returns int GetClientRect(nint, out IntRect) 获取窗口客户区的大小,客户区为窗口中除标题栏,菜单栏之外的地方 public static extern bool GetClientRect(nint hwnd, out WindowsAPI.IntRect lpRect) Parameters hwnd nint lpRect WindowsAPI.IntRect Returns bool GetCurrentThreadId() public static extern int GetCurrentThreadId() Returns int GetFocus() public static extern nint GetFocus() Returns nint GetForegroundWindow() 获取当前窗口 public static extern nint GetForegroundWindow() Returns nint 当前窗口标识符 GetHandleInformation(long, ref long) public static extern long GetHandleInformation(long hObject, ref long lpdwFlags) Parameters hObject long lpdwFlags long Returns long GetKeyState(int) 获取按键的当前状态 public static extern short GetKeyState(int nVirtKey) Parameters nVirtKey int 按键虚拟代码 Returns short 表示没按下>0;按下<0 GetKeyboardLayout(int) 获取某个线程的输入法布局 public static extern int GetKeyboardLayout(int threadid) Parameters threadid int 线程ID Returns int 布局码 GetLastError() public static extern uint GetLastError() Returns uint GetModuleHandle(string) public static extern nint GetModuleHandle(string ModuleName) Parameters ModuleName string Returns nint GetParent(nint) public static extern nint GetParent(nint hWnd) Parameters hWnd nint Returns nint GetProcAddress(nint, string) 获取要引入的函数,将符号名或标识号转换为DLL内部地址 public static extern nint GetProcAddress(nint hModule, string procName) Parameters hModule nint exe/dll句柄 procName string 接口名 Returns nint GetTopWindow(nint) public static extern nint GetTopWindow(nint hWnd) Parameters hWnd nint Returns nint GetWindow(nint, uint) public static extern nint GetWindow(nint hWnd, uint uCmd) Parameters hWnd nint uCmd uint Returns nint GetWindowRect(nint, ref IntRect) public static extern bool GetWindowRect(nint hwnd, ref WindowsAPI.IntRect lpRect) Parameters hwnd nint lpRect WindowsAPI.IntRect Returns bool GetWindowText(nint, StringBuilder, int) 获取窗口的标题 public static extern int GetWindowText(nint hWnd, StringBuilder text, int nMaxCount) Parameters hWnd nint 窗口标识符 text StringBuilder 窗口文字 nMaxCount int Returns int GetWindowTextLength(nint) 获取窗口文字的长度 public static extern int GetWindowTextLength(nint hWnd) Parameters hWnd nint 窗口标识符 Returns int 文字长度 GetWindowThreadProcessId(nint, ref int) public static extern long GetWindowThreadProcessId(nint hwnd, ref int lpdwProcessId) Parameters hwnd nint lpdwProcessId int Returns long GetWindowThreadProcessId(nint, out uint) 查找主线程 代替GetCurrentThreadId() 托管线程和他们不一样: Thread.CurrentThread.ManagedThreadId public static extern uint GetWindowThreadProcessId(nint hWnd, out uint lpdwProcessId) Parameters hWnd nint 主窗口 lpdwProcessId uint 进程ID Returns uint 线程ID GlobalLockTask(nint, Action<nint>) 锁定和释放内存 public static bool GlobalLockTask(nint data, Action<nint> task) Parameters data nint 锁定数据对象指针 task Action<nint> 返回锁定的内存片段指针,锁定期间执行任务 Returns bool 是否锁定成功 Exceptions ArgumentNullException GlobalSize(nint) 获取内存块大小 public static extern uint GlobalSize(nint hMem) Parameters hMem nint Returns uint ImmGetContext(nint) 获取指定窗口的输入法状态 public static extern nint ImmGetContext(nint hwnd) Parameters hwnd nint 窗口句柄 Returns nint ImmGetConversionStatus(nint, out int, out int) 获取输入法状态 public static extern bool ImmGetConversionStatus(nint himc, out int lpdw, out int lpdw2) Parameters himc nint 输入法标识符 lpdw int 输入模式 lpdw2 int 指向函数在其中检索句子模式值的变量的指针 Returns bool ImmGetOpenStatus(nint) 输入法打开状态 public static extern bool ImmGetOpenStatus(nint hwnd) Parameters hwnd nint Returns bool 非0打开,0关闭;(true中文,false英文) ImmGetVirtualKey(nint) 获取输入法的虚拟键码 public static extern nint ImmGetVirtualKey(nint hWnd) Parameters hWnd nint Returns nint ImmSetOpenStatus(nint, bool) 设置输入法的当前状态 public static extern bool ImmSetOpenStatus(nint hwnd, bool fOpen) Parameters hwnd nint 窗口句柄 fOpen bool Returns bool IsIconic(int) public static extern bool IsIconic(int hWnd) Parameters hWnd int Returns bool IsWindowEnabled(nint) public static extern bool IsWindowEnabled(nint hWnd) Parameters hWnd nint Returns bool KeybdEvent(byte, byte, int, int) 发送击键 public static extern void KeybdEvent(byte bVk, byte bScan, int dwFlags, int dwExtraInfo) Parameters bVk byte bScan byte dwFlags int dwExtraInfo int PostMessage(nint, int, nint, nint) 将一个消息的组成部分合成一个消息并放入对应线程消息队列的方法 public static extern bool PostMessage(nint hhwnd, int msg, nint wparam, nint lparam) Parameters hhwnd nint 控件句柄 msg int 消息是什么。键盘按键、鼠标点击还是其他 wparam nint lparam nint Returns bool SendMessage(nint, int, nint, nint) public static extern nint SendMessage(nint hwnd, int msg, nint wParam, nint lParam) Parameters hwnd nint msg int wParam nint lParam nint Returns nint SetFocus(nint) 设置焦点 public static extern nint SetFocus(nint hWnd) Parameters hWnd nint Returns nint SetWindowsHookEx(HookType, CallBack, nint, int) public static extern nint SetWindowsHookEx(HookType idHook, WindowsAPI.CallBack lpfn, nint hmod, int dwThreadId) Parameters idHook HookType lpfn WindowsAPI.CallBack hmod nint dwThreadId int Returns nint StructToBytes<T>(T) 结构体转byte数组 unmanaged public static byte[] StructToBytes<T>(T structObj) where T : unmanaged Parameters structObj T 要转换的结构体 Returns byte[] Type Parameters T ToAscii(int, int, byte[], byte[], int) public static extern int ToAscii(int uVirtKey, int uScancode, byte[] lpdKeyState, byte[] lpwTransKey, int fuState) Parameters uVirtKey int uScancode int lpdKeyState byte[] lpwTransKey byte[] fuState int Returns int UnhookWindowsHookEx(nint) public static extern nint UnhookWindowsHookEx(nint hHook) Parameters hHook nint Returns nint"
  },
  "api/IFoxCAD.Basal.html": {
    "href": "api/IFoxCAD.Basal.html",
    "title": "Namespace IFoxCAD.Basal",
    "keywords": "Namespace IFoxCAD.Basal Classes ArgumentNullEx 参数null检查类 ArrayEx 数组扩展类 Debugx DictEx EnumEx LinkedHashMap<TKey, TValue> A least-recently-used cache stored like a dictionary. LinkedHashSet<T> LinqEx linq 扩展类 ListEx LoopListNode<T> 环链表节点 LoopList<T> 环链表 LoopState 控制循环结束 MouseHook ParameterRebinder 参数重绑定 PredicateBuilder Predicate委托构造器 ProState 控制程序流程 RandomEx 随机值扩展类 SqlExpressionVisitor sql表达式访问者类 Timer 时间定时类 WindowsAPI Structs MouseHook.MouseHookStruct Hook鼠标数据结构 WindowsAPI.GuiThreadInfo 获取线程对应的窗体信息 WindowsAPI.IntRect WindowsAPI.IntSize WindowsAPI.KeyboardHookStruct Hook键盘数据结构 WindowsAPI.Point3D Enums GWL GetWindowCmd HookType 设置的钩子类型 MOUSEEVENTF NCmdShow SC TH32CS Timer.TimeEnum 时间单位枚举 VK WM 消息类型 作为SendMessage和PostMessage的参数 WS Delegates WindowsAPI.CallBack"
  },
  "api/IFoxCAD.Cad.AcadPeEnum.html": {
    "href": "api/IFoxCAD.Cad.AcadPeEnum.html",
    "title": "Enum AcadPeEnum",
    "keywords": "Enum AcadPeEnum Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll [Flags] public enum AcadPeEnum : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields AcadExe = 1 AccoreDll = 2 Acdb = 4 ExeAndCore = AcadExe | AccoreDll"
  },
  "api/IFoxCAD.Cad.AcadPeInfo.html": {
    "href": "api/IFoxCAD.Cad.AcadPeInfo.html",
    "title": "Class AcadPeInfo",
    "keywords": "Class AcadPeInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class AcadPeInfo Inheritance object AcadPeInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors AcadPeInfo(string, AcadPeEnum) 通过函数名获取指针,指定类型 public AcadPeInfo(string methodName, AcadPeEnum acadPeEnum) Parameters methodName string 不带修饰的函数名 acadPeEnum AcadPeEnum 读取哪个cad内部文件的枚举(目前只支持两个) Properties Methods 同名函数指针们 public List<PeFunction>? Methods { get; } Property Value List<PeFunction> PeForAcadExe public static PeInfo? PeForAcadExe { get; } Property Value PeInfo PeForAccoreDll public static PeInfo? PeForAccoreDll { get; } Property Value PeInfo PeForAcdbDll public static PeInfo? PeForAcdbDll { get; } Property Value PeInfo Methods GetDelegate<TDelegate>() 转为委托 public TDelegate? GetDelegate<TDelegate>() where TDelegate : class Returns TDelegate Type Parameters TDelegate 委托对象 GetDelegate<TDelegate>(string, AcadPeEnum) 获取CAD的函数指针 public static TDelegate? GetDelegate<TDelegate>(string methodName, AcadPeEnum acadPeEnum) where TDelegate : class Parameters methodName string 不带修饰的函数名 acadPeEnum AcadPeEnum 读取哪个cad内部文件的枚举(目前只支持两个) Returns TDelegate 委托 Type Parameters TDelegate 委托"
  },
  "api/IFoxCAD.Cad.AcadVersion.html": {
    "href": "api/IFoxCAD.Cad.AcadVersion.html",
    "title": "Class AcadVersion",
    "keywords": "Class AcadVersion Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll cad版本号类 public static class AcadVersion Inheritance object AcadVersion Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Versions 所有安装的cad的版本号 public static List<CadVersion> Versions { get; } Property Value List<CadVersion> Methods FromApp(object) 已打开的cad的版本号 public static CadVersion? FromApp(object app) Parameters app object 已打开cad的application对象 Returns CadVersion cad版本号对象"
  },
  "api/IFoxCAD.Cad.ArcEx.html": {
    "href": "api/IFoxCAD.Cad.ArcEx.html",
    "title": "Class ArcEx",
    "keywords": "Class ArcEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 圆弧扩展类 public static class ArcEx Inheritance object ArcEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateArc(Point3d, Point3d, Point3d) 三点法创建圆弧(二维) public static Arc CreateArc(Point3d startPoint, Point3d pointOnArc, Point3d endPoint) Parameters startPoint Point3d 起点 pointOnArc Point3d 圆弧上的点 endPoint Point3d 终点 Returns Arc 圆弧 CreateArc(Point3d, Point3d, double) 根据起点、圆心和圆弧角度创建圆弧(二维) public static Arc CreateArc(Point3d startPoint, Point3d centerPoint, double angle) Parameters startPoint Point3d 起点 centerPoint Point3d 圆心 angle double 圆弧角度 Returns Arc 圆弧 CreateArcSCE(Point3d, Point3d, Point3d) 根据圆心、起点、终点来创建圆弧(二维) public static Arc CreateArcSCE(Point3d startPoint, Point3d centerPoint, Point3d endPoint) Parameters startPoint Point3d 起点 centerPoint Point3d 圆心 endPoint Point3d 终点 Returns Arc 圆弧"
  },
  "api/IFoxCAD.Cad.AssemInfo.html": {
    "href": "api/IFoxCAD.Cad.AssemInfo.html",
    "title": "Struct AssemInfo",
    "keywords": "Struct AssemInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 程序集信息 public struct AssemInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Description 程序集说明 public string Description Field Value string Fullname 程序集全名 public string Fullname Field Value string LoadType 加载方式 public AssemLoadType LoadType Field Value AssemLoadType Loader 程序集路径 public string Loader Field Value string Name 注册名 public string Name Field Value string"
  },
  "api/IFoxCAD.Cad.AssemLoadType.html": {
    "href": "api/IFoxCAD.Cad.AssemLoadType.html",
    "title": "Enum AssemLoadType",
    "keywords": "Enum AssemLoadType Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 程序集加载类型 public enum AssemLoadType Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields ByCommand = 12 随命令 Disabled = 20 无效 Startting = 2 启动"
  },
  "api/IFoxCAD.Cad.AttachmentPointHelper.html": {
    "href": "api/IFoxCAD.Cad.AttachmentPointHelper.html",
    "title": "Class AttachmentPointHelper",
    "keywords": "Class AttachmentPointHelper Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 文字对齐点帮助类 public static class AttachmentPointHelper Inheritance object AttachmentPointHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Get(AttachmentPoint) 输入对齐方式获得文字说明 public static string Get(AttachmentPoint value) Parameters value AttachmentPoint Returns string Get(string) 输入文字获得对齐方式 public static AttachmentPoint Get(string key) Parameters key string Returns AttachmentPoint"
  },
  "api/IFoxCAD.Cad.AutoLoad.html": {
    "href": "api/IFoxCAD.Cad.AutoLoad.html",
    "title": "Class AutoLoad",
    "keywords": "Class AutoLoad Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 自动加载和初始化抽象类 public abstract class AutoLoad : IExtensionApplication Inheritance object AutoLoad Implements IExtensionApplication Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors AutoLoad() 初始化程序集信息 public AutoLoad() Properties CurrentDirectory 程序集的目录 public static DirectoryInfo CurrentDirectory { get; } Property Value DirectoryInfo Location 程序集的路径 public static FileInfo Location { get; } Property Value FileInfo Methods AppendSupportPath(string) 添加 path 到 acad环境变量 protected static void AppendSupportPath(string path) Parameters path string 目录 GetDirectory(Assembly) 获取程序集的目录 public static DirectoryInfo GetDirectory(Assembly assem) Parameters assem Assembly 程序集 Returns DirectoryInfo 路径对象 Initialize() 初始化函数 public abstract void Initialize() RegApp() 在注册表写入自动加载的程序集信息 public void RegApp() Terminate() 结束函数 public abstract void Terminate()"
  },
  "api/IFoxCAD.Cad.AutoReflection.html": {
    "href": "api/IFoxCAD.Cad.AutoReflection.html",
    "title": "Class AutoReflection",
    "keywords": "Class AutoReflection Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 此类作为加载后cad自动运行接口的一部分,用于反射特性和接口 启动cad后的执行顺序为: 1:IFoxInitialize特性..(多个) 2:IFoxAutoGo接口..(多个) public class AutoReflection Inheritance object AutoReflection Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors AutoReflection(string, AutoRegConfig) 反射执行 1.特性:IFoxInitialize 2.接口:IFoxAutoGo public AutoReflection(string dllName, AutoRegConfig configInfo) Parameters dllName string 约束在此dll进行加速 configInfo AutoRegConfig Methods AppDomainGetTypes(Action<Type>, string?) 遍历程序域下所有类型 public static void AppDomainGetTypes(Action<Type> action, string? dllNameWithoutExtension = null) Parameters action Action<Type> 输出每个成员执行 dllNameWithoutExtension string 过滤此dll,不含后缀 DebugCheckCmdRecurrence() 检查当前程序域重复出现命令, 当出现重复时候将引起断点 public static void DebugCheckCmdRecurrence() Initialize() public void Initialize() Terminate() 关闭cad的时候会自动执行 public void Terminate()"
  },
  "api/IFoxCAD.Cad.AutoRegAssem.html": {
    "href": "api/IFoxCAD.Cad.AutoRegAssem.html",
    "title": "Class AutoRegAssem",
    "keywords": "Class AutoRegAssem Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 注册中心 初始化程序集信息写入注册表并反射IFoxInitialize特性和IFoxAutoGo接口 启动cad后的执行顺序为: 1:AutoRegAssem程序集配置中心构造函数 2:IFoxInitialize特性..(多个) 3:IFoxAutoGo接口..(多个) public abstract class AutoRegAssem : IExtensionApplication Inheritance object AutoRegAssem Implements IExtensionApplication Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors AutoRegAssem(AutoRegConfig) 注册中心 public AutoRegAssem(AutoRegConfig autoRegConfig) Parameters autoRegConfig AutoRegConfig 配置项目 Properties CurrDirectory 程序集的目录 public static DirectoryInfo CurrDirectory { get; } Property Value DirectoryInfo Location 程序集的路径 public static FileInfo Location { get; } Property Value FileInfo Methods ~AutoRegAssem() protected ~AutoRegAssem() GetAcAppKey(bool) 获取当前cad注册表位置 public static RegistryKey GetAcAppKey(bool writable = true) Parameters writable bool 打开权限 Returns RegistryKey GetDirectory(Assembly?) 获取程序集的目录 public static DirectoryInfo GetDirectory(Assembly? assem) Parameters assem Assembly 程序集 Returns DirectoryInfo 路径对象 Initialize() public void Initialize() RegApp() 在注册表写入自动加载的程序集信息 public void RegApp() Terminate() public void Terminate() UnRegApp() 卸载注册表信息 public bool UnRegApp() Returns bool"
  },
  "api/IFoxCAD.Cad.AutoRegConfig.html": {
    "href": "api/IFoxCAD.Cad.AutoRegConfig.html",
    "title": "Enum AutoRegConfig",
    "keywords": "Enum AutoRegConfig Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 注册中心配置信息 public enum AutoRegConfig Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields All = 15 ReflectionAttribute = 2 反射特性 ReflectionInterface = 4 反射接口 Regedit = 1 注册表 RemoveEMR = 8 移除教育版 Undefined = 0 不进行任何操作"
  },
  "api/IFoxCAD.Cad.BitmapTool.TernaryRasterOperations.html": {
    "href": "api/IFoxCAD.Cad.BitmapTool.TernaryRasterOperations.html",
    "title": "Enum BitmapTool.TernaryRasterOperations",
    "keywords": "Enum BitmapTool.TernaryRasterOperations Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll A raster-operation code enum public enum BitmapTool.TernaryRasterOperations : uint Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields BLACKNESS = 66 CAPTUREBLT = 1073741824 DSTINVERT = 5570569 MERGECOPY = 12583114 MERGEPAINT = 12255782 NOTSRCCOPY = 3342344 NOTSRCERASE = 1114278 PATCOPY = 15728673 PATINVERT = 5898313 PATPAINT = 16452105 SRCAND = 8913094 SRCCOPY = 13369376 SRCERASE = 4457256 SRCINVERT = 6684742 SRCPAINT = 15597702 WHITENESS = 16711778"
  },
  "api/IFoxCAD.Cad.BitmapTool.html": {
    "href": "api/IFoxCAD.Cad.BitmapTool.html",
    "title": "Class BitmapTool",
    "keywords": "Class BitmapTool Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll bitmap工具类 public class BitmapTool Inheritance object BitmapTool Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors BitmapTool() public BitmapTool() Methods BitBlt(nint, int, int, int, int, nint, int, int, TernaryRasterOperations) 指定的源设备环境区域中的像素进行位块转换,以传送到目标设备环境 public static extern bool BitBlt(nint hdc, int nXDest, int nYDest, int nWidth, int nHeight, nint hdcSrc, int nXSrc, int nYSrc, BitmapTool.TernaryRasterOperations dwRop) Parameters hdc nint Handle to the destination device context. nXDest int The leftmost x-coordinate of the destination rectangle (in pixels). nYDest int The topmost y-coordinate of the destination rectangle (in pixels). nWidth int The width of the source and destination rectangles (in pixels). nHeight int The height of the source and the destination rectangles (in pixels). hdcSrc nint Handle to the source device context. nXSrc int The leftmost x-coordinate of the source rectangle (in pixels). nYSrc int The topmost y-coordinate of the source rectangle (in pixels). dwRop BitmapTool.TernaryRasterOperations A raster-operation code. Returns bool true if the operation succeedes, false otherwise. To get extended error information, call GetLastWin32Error(). CaptureWndImage(nint, Action<nint>) 截图成为BMP public static void CaptureWndImage(nint hWnd, Action<nint> action) Parameters hWnd nint 截图的窗口 action Action<nint> 扔出BMP执行任务 Exceptions ArgumentNullException CreateCompatibleBitmap(nint, int, int) Creates a bitmap compatible with the device that is associated with the specified device context. public static extern nint CreateCompatibleBitmap(nint hdc, int nWidth, int nHeight) Parameters hdc nint A handle to a device context. nWidth int The bitmap width, in pixels. nHeight int The bitmap height, in pixels. Returns nint If the function succeeds, the return value is a handle to the compatible bitmap (DDB). If the function fails, the return value is Zero. CreateCompatibleDC(nint) 创建DC public static extern nint CreateCompatibleDC(nint hdc) Parameters hdc nint Returns nint DeleteObject(nint) Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid. public static extern bool DeleteObject(nint hObject) Parameters hObject nint A handle to a logical pen, brush, font, bitmap, region, or palette. Returns bool If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC, the return value is zero. Remarks Do not delete a drawing object (pen or brush) while it is still selected into a DC. When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently. GetDC(nint) 检索指定窗口的工作区的显示设备上下文(DC)的句柄 显示设备上下文可以在随后的图形显示界面(GDI)函数中使用, 以在窗口的工作区中绘制 public static extern nint GetDC(nint hWnd) Parameters hWnd nint Returns nint ReleaseDC(nint, nint) public static extern bool ReleaseDC(nint hWnd, nint hDC) Parameters hWnd nint hDC nint Returns bool SelectObject(nint, nint) Selects an object into the specified device context (DC). The new object replaces the previous object of the same type. public static extern nint SelectObject(nint hdc, nint hgdiobj) Parameters hdc nint A handle to the DC. hgdiobj nint A handle to the object to be selected. Returns nint If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If the selected object is a region and the function succeeds, the return value is one of the following values. SIMPLEREGION - Region consists of a single rectangle. COMPLEXREGION - Region consists of more than one rectangle. NULLREGION - Region is empty. If an error occurs and the selected object is not a region, the return value is NULL. Otherwise, it is HGDI_ERROR. Remarks This function returns the previously selected object of the specified type. An application should always replace a new object with the original, default object after it has finished drawing with the new object. An application cannot select a single bitmap into more than one DC at a time. ICM: If the object being selected is a brush or a pen, color management is performed."
  },
  "api/IFoxCAD.Cad.BlockReferenceEx.html": {
    "href": "api/IFoxCAD.Cad.BlockReferenceEx.html",
    "title": "Class BlockReferenceEx",
    "keywords": "Class BlockReferenceEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 块参照扩展类 public static class BlockReferenceEx Inheritance object BlockReferenceEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ChangeBlockProperty(BlockReference, Dictionary<string, string>) 更新普通块的属性值 public static void ChangeBlockProperty(this BlockReference blockReference, Dictionary<string, string> propertyNameValues) Parameters blockReference BlockReference propertyNameValues Dictionary<string, string> ChangeDynamicBlockProperty<T>(BlockReference, Dictionary<string, T>) 更新动态块属性值 public static void ChangeDynamicBlockProperty<T>(this BlockReference blockReference, Dictionary<string, T> propertyNameValues) Parameters blockReference BlockReference propertyNameValues Dictionary<string, T> Type Parameters T ClipBlockRef(BlockReference, Point3d, Point3d) 裁剪块参照 public static void ClipBlockRef(this BlockReference bref, Point3d pt1, Point3d pt2) Parameters bref BlockReference 块参照 pt1 Point3d 第一角点 pt2 Point3d 第二角点 ClipBlockRef(BlockReference, IEnumerable<Point3d>) 裁剪块参照 public static void ClipBlockRef(this BlockReference bref, IEnumerable<Point3d> pt3ds) Parameters bref BlockReference 块参照 pt3ds IEnumerable<Point3d> 裁剪多边形点表 ForEach(BlockReference, Action<ObjectId, LoopState, int>) 遍历块内 public static void ForEach(this BlockReference brf, Action<ObjectId, LoopState, int> action) Parameters brf BlockReference action Action<ObjectId, LoopState, int> Exceptions ArgumentNullException ForEach(BlockReference, Action<ObjectId, LoopState>) 遍历块内 public static void ForEach(this BlockReference brf, Action<ObjectId, LoopState> action) Parameters brf BlockReference action Action<ObjectId, LoopState> Exceptions ArgumentNullException ForEach(BlockReference, Action<ObjectId>) 遍历块内 public static void ForEach(this BlockReference brf, Action<ObjectId> action) Parameters brf BlockReference action Action<ObjectId> Exceptions ArgumentNullException GetAttributes(BlockReference) 获取普通块参照的属性集合 public static IEnumerable<AttributeReference> GetAttributes(this BlockReference owner) Parameters owner BlockReference 普通块参照 Returns IEnumerable<AttributeReference> 属性集合 GetNestedBlockPosition(BlockReference, string) 获取嵌套块的位置(wcs) public static Point3d? GetNestedBlockPosition(this BlockReference parentBlockRef, string nestedBlockName) Parameters parentBlockRef BlockReference 父块 nestedBlockName string 子块名 Returns Point3d? 子块的位置 Exceptions ArgumentException NestedForEach(Entity, Action<Entity, Matrix3d>, DBTrans?) 遍历嵌套块中块图元 public static void NestedForEach(this Entity blockReference, Action<Entity, Matrix3d> action, DBTrans? tr = null) Parameters blockReference Entity 块参照 action Action<Entity, Matrix3d> 委托 tr DBTrans 事务"
  },
  "api/IFoxCAD.Cad.BoundingInfo.html": {
    "href": "api/IFoxCAD.Cad.BoundingInfo.html",
    "title": "Struct BoundingInfo",
    "keywords": "Struct BoundingInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll AABB和OBB信息 public struct BoundingInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Constructors BoundingInfo(Point3d, Point3d, bool, double) public BoundingInfo(Point3d min, Point3d max, bool isEffective, double angle = 0) Parameters min Point3d max Point3d isEffective bool angle double BoundingInfo(double, double, double, double, double, double, bool, double) public BoundingInfo(double minX, double minY, double minZ, double maxX, double maxY, double maxZ, bool isEffective, double angle = 0) Parameters minX double minY double minZ double maxX double maxY double maxZ double isEffective bool angle double Fields Angle AABB这里永远是0 public double Angle Field Value double IsEffective public bool IsEffective Field Value bool MaxX public double MaxX Field Value double MaxY public double MaxY Field Value double MaxZ public double MaxZ Field Value double MinX public double MinX Field Value double MinY public double MinY Field Value double MinZ public double MinZ Field Value double Properties Extents2d public Extents2d Extents2d { get; } Property Value Extents2d Extents3d public Extents3d Extents3d { get; } Property Value Extents3d Max public Point3d Max { get; } Property Value Point3d Min public Point3d Min { get; } Property Value Point3d Methods Move(Point3d, Point3d) public void Move(Point3d pt1, Point3d pt2) Parameters pt1 Point3d pt2 Point3d ToString() public override string ToString() Returns string"
  },
  "api/IFoxCAD.Cad.BrightEditor.html": {
    "href": "api/IFoxCAD.Cad.BrightEditor.html",
    "title": "Enum BrightEditor",
    "keywords": "Enum BrightEditor Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll [Flags] public enum BrightEditor Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Regen = 2 刷新全图 SelectionClean = 4 清空选择集 UpdateScreen = 1 刷新屏幕,图元不生成(例如块还是旧的显示) ViewportsFrom = 8 视口外 ViewportsIn = 16 视口内"
  },
  "api/IFoxCAD.Cad.BrightEntity.html": {
    "href": "api/IFoxCAD.Cad.BrightEntity.html",
    "title": "Enum BrightEntity",
    "keywords": "Enum BrightEntity Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll [Flags] public enum BrightEntity Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Draw = 4 重画 Highlight = 8 亮显 MoveZero = 128 平移更新,可以令ctrl+z撤回时候保证刷新 RecomputeDimensionBlock = 2 标注更新 RecordGraphicsModified = 1 块更新 Unhighlight = 16 亮显取消 VisibleFalse = 64 隐藏图元 VisibleTrue = 32 显示图元"
  },
  "api/IFoxCAD.Cad.BulgeVertexWidth.html": {
    "href": "api/IFoxCAD.Cad.BulgeVertexWidth.html",
    "title": "Class BulgeVertexWidth",
    "keywords": "Class BulgeVertexWidth Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 多段线的顶点,凸度,头宽,尾宽 public class BulgeVertexWidth Inheritance object BulgeVertexWidth Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors BulgeVertexWidth() public BulgeVertexWidth() BulgeVertexWidth(BulgeVertex) 多段线的顶点,凸度,头宽,尾宽 public BulgeVertexWidth(BulgeVertex bv) Parameters bv BulgeVertex BulgeVertexWidth(Polyline, int) 多段线的顶点,凸度,头宽,尾宽 public BulgeVertexWidth(Polyline pl, int index) Parameters pl Polyline 多段线 index int 子段编号 BulgeVertexWidth(Point2d, double, double, double) 多段线的顶点,凸度,头宽,尾宽 public BulgeVertexWidth(Point2d vertex, double bulge = 0, double startWidth = 0, double endWidth = 0) Parameters vertex Point2d bulge double startWidth double endWidth double BulgeVertexWidth(double, double, double, double, double) 多段线的顶点,凸度,头宽,尾宽 public BulgeVertexWidth(double vertex_X, double vertex_Y, double bulge = 0, double startWidth = 0, double endWidth = 0) Parameters vertex_X double vertex_Y double bulge double startWidth double endWidth double Fields Bulge 凸度 public double Bulge Field Value double EndWidth 尾宽 public double EndWidth Field Value double StartWidth 头宽 public double StartWidth Field Value double X 顶点X public double X Field Value double Y 顶点Y public double Y Field Value double Properties Vertex public Point2d Vertex { get; } Property Value Point2d Methods ToBulgeVertex() public BulgeVertex ToBulgeVertex() Returns BulgeVertex"
  },
  "api/IFoxCAD.Cad.CadVersion.html": {
    "href": "api/IFoxCAD.Cad.CadVersion.html",
    "title": "Class CadVersion",
    "keywords": "Class CadVersion Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll CAD版本 public record CadVersion : IEquatable<CadVersion> Inheritance object CadVersion Implements IEquatable<CadVersion> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors CadVersion() public CadVersion() CadVersion(CadVersion) protected CadVersion(CadVersion original) Parameters original CadVersion Fields Major 主版本 public int Major Field Value int Minor 次版本 public int Minor Field Value int ProductName 注册表名称 public string? ProductName Field Value string ProductRootKey 注册表位置 public string? ProductRootKey Field Value string Properties EqualityContract protected virtual Type EqualityContract { get; } Property Value Type ProgId 版本号 public double ProgId { get; } Property Value double Methods Equals(CadVersion?) public virtual bool Equals(CadVersion? other) Parameters other CadVersion Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder builder) Parameters builder StringBuilder Returns bool ToString() 转换为字符串 public override string ToString() Returns string 表示版本号的字符串 <Clone>$() public virtual CadVersion <Clone>$() Returns CadVersion Operators operator ==(CadVersion?, CadVersion?) public static bool operator ==(CadVersion? left, CadVersion? right) Parameters left CadVersion right CadVersion Returns bool operator !=(CadVersion?, CadVersion?) public static bool operator !=(CadVersion? left, CadVersion? right) Parameters left CadVersion right CadVersion Returns bool"
  },
  "api/IFoxCAD.Cad.CheckFactory.html": {
    "href": "api/IFoxCAD.Cad.CheckFactory.html",
    "title": "Class CheckFactory",
    "keywords": "Class CheckFactory Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class CheckFactory Inheritance object CheckFactory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CheckDuplicateCommand(Assembly?) 检查Command命令重复 public static void CheckDuplicateCommand(Assembly? assembly = null) Parameters assembly Assembly"
  },
  "api/IFoxCAD.Cad.CircleEx.html": {
    "href": "api/IFoxCAD.Cad.CircleEx.html",
    "title": "Class CircleEx",
    "keywords": "Class CircleEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 圆扩展类 public static class CircleEx Inheritance object CircleEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateCircle(Point3d, Point3d) 两点创建圆(两点中点为圆心) public static Circle CreateCircle(Point3d startPoint, Point3d endPoint) Parameters startPoint Point3d 起点 endPoint Point3d 终点 Returns Circle 圆 CreateCircle(Point3d?, Point3d?, Point3d?) 三点法创建圆(失败则返回Null) public static Circle? CreateCircle(Point3d? pt1, Point3d? pt2, Point3d? pt3) Parameters pt1 Point3d 第一点 pt2 Point3d 第二点 pt3 Point3d 第三点 Returns Circle 圆 CreateCircle(Point3d?, double, double, double, double) 通过圆心,半径绘制圆形 public static Circle? CreateCircle(Point3d? center, double radius, double vex = 0, double vey = 0, double vez = 1) Parameters center Point3d 圆心 radius double 半径 vex double 法向量的X vey double 法向量的Y vez double 法向量的Z Returns Circle 圆"
  },
  "api/IFoxCAD.Cad.ClipTool.html": {
    "href": "api/IFoxCAD.Cad.ClipTool.html",
    "title": "Class ClipTool",
    "keywords": "Class ClipTool Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ClipTool Inheritance object ClipTool Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ClipTool() public ClipTool() Methods AddClipboardFormatListener(nint) 侦听剪贴板 public static extern bool AddClipboardFormatListener(nint hWnd) Parameters hWnd nint Returns bool ChangeClipboardChain(nint, nint) 从剪贴板链中移出的窗口句柄 public static extern bool ChangeClipboardChain(nint hWndRemove, nint hWndNewNext) Parameters hWndRemove nint 从剪贴板链中移出的窗口句柄 hWndNewNext nint hWndRemove的下一个在剪贴板链中的窗口句柄 Returns bool 如果成功,非零;否则为0。 CloseClipboard() 关闭剪贴板 public static extern bool CloseClipboard() Returns bool EmptyClipboard() 清空剪切板并释放剪切板内数据的句柄 public static extern bool EmptyClipboard() Returns bool EnumClipboardFormats(uint) 枚举剪贴板内数据类型 public static extern uint EnumClipboardFormats(uint format) Parameters format uint Returns uint GetClipboardData(uint) 获取剪贴板 public static extern nint GetClipboardData(uint uFormat) Parameters uFormat uint 通常为ClipboardFormat但是cad有自己的位码 Returns nint GetClipboard<T>(string, out T?) 获取剪贴板 public static bool GetClipboard<T>(string clipKey, out T? tag) Parameters clipKey string 剪贴板的索引名 tag T 返回的结构 Returns bool Type Parameters T OpenClipboardTask(bool, Action) 打开剪贴板 写入之前必须清空, 否则将导致发送 WM_DESTROYCLIPBOARD 消息到上一次剪贴板拥有者释放资源 所以写入的时候必须一次性写入多个cf public static bool OpenClipboardTask(bool isWrite, Action action) Parameters isWrite bool true写入,false读取 action Action 接收返回的栈空间指针用于释放 Returns bool Exceptions ArgumentNullException RegisterClipboardFormat(string) 根据数据格式获取剪贴板 public static extern uint RegisterClipboardFormat(string lpszFormat) Parameters lpszFormat string 数据格式名称 Returns uint RemoveClipboardFormatListener(nint) 移除侦听剪贴板 public static extern bool RemoveClipboardFormatListener(nint hWnd) Parameters hWnd nint Returns bool SetClipboardData(uint, nint) 设置剪贴板 public static extern nint SetClipboardData(uint uFormat, nint hMem) Parameters uFormat uint 通常为ClipboardFormat但是cad有自己的位码 hMem nint 指定具有指定格式的数据的句柄, 该参数为空则为延迟提交: 有其他程序对剪切板中的数据进行请求时,该程序才会将指定格式的数据写入到剪切板中. Returns nint SetClipboardViewer(nint) 将CWnd加入一个窗口链 每当剪贴板的内容发生变化时,就会通知这些窗口 public static extern int SetClipboardViewer(nint hWndNewViewer) Parameters hWndNewViewer nint 句柄 Returns int 返回剪贴板观察器链中下一个窗口的句柄"
  },
  "api/IFoxCAD.Cad.ClipboardEnv.html": {
    "href": "api/IFoxCAD.Cad.ClipboardEnv.html",
    "title": "Class ClipboardEnv",
    "keywords": "Class ClipboardEnv Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ClipboardEnv Inheritance object ClipboardEnv Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ClipboardEnv() public ClipboardEnv() Fields CadCurrentVer public static string CadCurrentVer Field Value string CadVer public static string CadVer Field Value string"
  },
  "api/IFoxCAD.Cad.ClipboardFormat.html": {
    "href": "api/IFoxCAD.Cad.ClipboardFormat.html",
    "title": "Enum ClipboardFormat",
    "keywords": "Enum ClipboardFormat Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 剪贴板的CF,也就是它的key public enum ClipboardFormat : uint Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields CF_BITMAP = 2 A handle to a bitmap (HBITMAP). CF_DIB = 8 A memory object containing a BITMAPINFO structure followed by the bitmap bits. CF_DIBV5 = 17 A memory object containing a BITMAPV5HEADER structure followed by the bitmap color space information and the bitmap bits. CF_DIF = 5 Software Arts' Data Interchange Format. CF_DSPBITMAP = 130 Bitmap display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in bitmap format in lieu of the privately formatted data. CF_DSPENHMETAFILE = 142 Enhanced metafile display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in enhanced metafile format in lieu of the privately formatted data. CF_DSPMETAFILEPICT = 131 Metafile-picture display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in metafile-picture format in lieu of the privately formatted data. CF_DSPTEXT = 129 Text display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in text format in lieu of the privately formatted data. CF_ENHMETAFILE = 14 A handle to an enhanced metafile (HENHMETAFILE). CF_GDIOBJFIRST = 768 Start of a range of integer values for application-defined GDI object clipboard formats. The end of the range is CF_GDIOBJLAST. Handles associated with clipboard formats in this range are not automatically deleted using the GlobalFree function when the clipboard is emptied. Also, when using values in this range, the hMem parameter is not a handle to a GDI object, but is a handle allocated by the GlobalAlloc function with the GMEM_MOVEABLE flag. CF_GDIOBJLAST = 1023 See CF_GDIOBJFIRST. CF_HDROP = 15 A handle to type HDROP that identifies a list of files. An application can retrieve information about the files by passing the handle to the DragQueryFile function. CF_LOCALE = 16 The data is a handle to the locale identifier associated with text in the clipboard. When you close the clipboard, if it contains CF_TEXT data but no CF_LOCALE data, the system automatically sets the CF_LOCALE format to the current input language. You can use the CF_LOCALE format to associate a different locale with the clipboard text. An application that pastes text from the clipboard can retrieve this format to determine which character set was used to generate the text. Note that the clipboard does not support plain text in multiple character sets. To achieve this, use a formatted text data type such as RTF instead. The system uses the code page associated with CF_LOCALE to implicitly convert from CF_TEXT to CF_UNICODETEXT. Therefore, the correct code page table is used for the conversion. CF_METAFILEPICT = 3 Handle to a metafile picture format as defined by the METAFILEPICT structure. When passing a CF_METAFILEPICT handle by means of DDE, the application responsible for deleting hMem should also free the metafile referred to by the CF_METAFILEPICT handle. CF_OEMTEXT = 7 Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. CF_OWNERDISPLAY = 128 Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive the ClipboardMessages.WM_ASKCBFORMATNAME, ClipboardMessages.WM_HSCROLLCLIPBOARD, ClipboardMessages.WM_PAINTCLIPBOARD, ClipboardMessages.WM_SIZECLIPBOARD, and ClipboardMessages.WM_VSCROLLCLIPBOARD messages. The hMem parameter must be null. CF_PALETTE = 9 Handle to a color palette. Whenever an application places data in the clipboard that depends on or assumes a color palette, it should place the palette on the clipboard as well. If the clipboard contains data in the CF_PALETTE (logical color palette) format, the application should use the SelectPalette and RealizePalette functions to realize (compare) any other data in the clipboard against that logical palette. When displaying clipboard data, the clipboard always uses as its current palette any object on the clipboard that is in the CF_PALETTE format. CF_PENDATA = 10 Data for the pen extensions to the Microsoft Windows for Pen Computing. CF_PRIVATEFIRST = 512 Start of a range of integer values for private clipboard formats. The range ends with CF_PRIVATELAST. Handles associated with private clipboard formats are not freed automatically, the clipboard owner must free such handles, typically in response to the ClipboardMessages.WM_DESTROYCLIPBOARD message. CF_PRIVATELAST = 767 See CF_PRIVATEFIRST. CF_RIFF = 11 Represents audio data more complex than can be represented in a CF_WAVE standard wave format. CF_SYLK = 4 Microsoft Symbolic Link (SYLK) format. CF_TEXT = 1 Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text. CF_TIFF = 6 Tagged-image file format. CF_UNICODETEXT = 13 Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. CF_WAVE = 12 Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz PCM."
  },
  "api/IFoxCAD.Cad.CollectionEx.KeywordName.html": {
    "href": "api/IFoxCAD.Cad.CollectionEx.KeywordName.html",
    "title": "Enum CollectionEx.KeywordName",
    "keywords": "Enum CollectionEx.KeywordName Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum CollectionEx.KeywordName Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields DisplayName = 2 GlobalName = 0 LocalName = 1"
  },
  "api/IFoxCAD.Cad.CollectionEx.html": {
    "href": "api/IFoxCAD.Cad.CollectionEx.html",
    "title": "Class CollectionEx",
    "keywords": "Class CollectionEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 集合扩展类 public static class CollectionEx Inheritance object CollectionEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Contains(KeywordCollection, string, KeywordName) 含有关键字 public static bool Contains(this KeywordCollection collection, string name, CollectionEx.KeywordName keywordName = KeywordName.GlobalName) Parameters collection KeywordCollection 关键字集合 name string 关键字 keywordName CollectionEx.KeywordName 关键字容器字段名 Returns bool true含有 ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) 遍历集合,执行委托(允许循环中断,输出索引值) public static void ForEach<T>(this IEnumerable<T> source, Action<T, LoopState, int> action) Parameters source IEnumerable<T> 集合 action Action<T, LoopState, int> 委托 Type Parameters T 集合值的类型 ForEach<T>(IEnumerable<T>, Action<T, LoopState>) 遍历集合,执行委托(允许循环中断) public static void ForEach<T>(this IEnumerable<T> source, Action<T, LoopState> action) Parameters source IEnumerable<T> 集合 action Action<T, LoopState> 委托 Type Parameters T 集合值的类型 ForEach<T>(IEnumerable<T>, Action<T>) 遍历集合,执行委托 public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters source IEnumerable<T> 集合 action Action<T> 委托 Type Parameters T 集合值的类型 GetDict(KeywordCollection) 获取词典(GlobalName,DisplayName) KeywordCollection是允许重复关键字的,没有哈希索引,在多次判断时候会遍历多次O(n),所以生成一个词典进行O(1) public static Dictionary<string, string> GetDict(this KeywordCollection collection) Parameters collection KeywordCollection Returns Dictionary<string, string> GetKeys(IdMapping) 旧块名 public static List<ObjectId> GetKeys(this IdMapping idmap) Parameters idmap IdMapping Returns List<ObjectId> GetValues(IdMapping) 新块名 public static List<ObjectId> GetValues(this IdMapping idmap) Parameters idmap IdMapping Returns List<ObjectId> ToCollection(IEnumerable<ObjectId>) 对象id迭代器转换为集合 public static ObjectIdCollection ToCollection(this IEnumerable<ObjectId> ids) Parameters ids IEnumerable<ObjectId> 对象id的迭代器 Returns ObjectIdCollection 对象id集合,记得释放 ToCollection(IEnumerable<Point2d>) 二维点迭代器转换为二维点集合 public static Point2dCollection ToCollection(this IEnumerable<Point2d> pts) Parameters pts IEnumerable<Point2d> 二维点迭代器 Returns Point2dCollection 二维点集合,!acad记得释放 ToCollection(IEnumerable<Point3d>) 三维点迭代器转换为三维点集合 public static Point3dCollection ToCollection(this IEnumerable<Point3d> pts) Parameters pts IEnumerable<Point3d> 三维点迭代器 Returns Point3dCollection 三维点集合,记得释放 ToCollection(IEnumerable<double>) double 数值迭代器转换为 double 数值集合 public static DoubleCollection ToCollection(this IEnumerable<double> doubles) Parameters doubles IEnumerable<double> double 数值迭代器 Returns DoubleCollection 数值集合,它没有Dispose ToCollection<T>(IEnumerable<T>) 实体迭代器转换为集合 public static DBObjectCollection ToCollection<T>(this IEnumerable<T> objs) where T : DBObject Parameters objs IEnumerable<T> 实体对象的迭代器 Returns DBObjectCollection 实体集合,记得释放 Type Parameters T 对象类型 ToDictionary(IdMapping) 转换为词典 public static Dictionary<ObjectId, ObjectId> ToDictionary(this IdMapping mapping) Parameters mapping IdMapping Returns Dictionary<ObjectId, ObjectId> ToList(ObjectIdCollection) 对象id集合转换为对象id列表 public static List<ObjectId> ToList(this ObjectIdCollection ids) Parameters ids ObjectIdCollection 对象id集合 Returns List<ObjectId> 对象id列表"
  },
  "api/IFoxCAD.Cad.CoordinateSystemCode.html": {
    "href": "api/IFoxCAD.Cad.CoordinateSystemCode.html",
    "title": "Enum CoordinateSystemCode",
    "keywords": "Enum CoordinateSystemCode Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 坐标系类型枚举 public enum CoordinateSystemCode Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields MDcs = 2 模型空间坐标系 PDcs = 3 图纸空间坐标系 Ucs = 1 用户坐标系 Wcs = 0 世界坐标系"
  },
  "api/IFoxCAD.Cad.Curve2dEx.html": {
    "href": "api/IFoxCAD.Cad.Curve2dEx.html",
    "title": "Class Curve2dEx",
    "keywords": "Class Curve2dEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 二维解析类曲线转换为二维实体曲线扩展类 public static class Curve2dEx Inheritance object Curve2dEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods IsIn(CircularArc2d, Point2d) 判断点是否位于圆内及圆上 public static bool IsIn(this CircularArc2d ca2d, Point2d pnt) Parameters ca2d CircularArc2d 二维解析类圆弧对象 pnt Point2d 二维点 Returns bool 位于圆内及圆上返回 true,反之返回 false ToArc(CircularArc2d) 将二维解析类圆弧转换为实体圆弧 public static Arc ToArc(this CircularArc2d a2d) Parameters a2d CircularArc2d 二维解析类圆弧对象 Returns Arc 圆弧 ToCircle(CircularArc2d) 将二维解析类圆弧转换为实体圆 public static Circle ToCircle(this CircularArc2d c2d) Parameters c2d CircularArc2d 二维解析类圆弧对象 Returns Circle 实体圆 ToCurve(CircularArc2d) 将二维解析类圆弧转换为实体圆或者圆弧 public static Curve ToCurve(this CircularArc2d ca2d) Parameters ca2d CircularArc2d 二维解析类圆弧对象 Returns Curve 实体圆或者圆弧 ToCurve(CircularArc2d, Matrix3d) 将二维解析类圆弧转换为实体圆或者圆弧，然后进行矩阵变换 public static Curve ToCurve(this CircularArc2d ca2d, Matrix3d mat) Parameters ca2d CircularArc2d 二维解析类圆弧对象 mat Matrix3d 变换矩阵 Returns Curve 实体圆或者圆弧 ToCurve(Curve2d, Matrix3d) 按矩阵转换Ge2d曲线为Db曲线 public static Curve? ToCurve(this Curve2d curve, Matrix3d mat) Parameters curve Curve2d Ge2d曲线 mat Matrix3d 曲线转换矩阵 Returns Curve Db曲线 ToCurve(EllipticalArc2d) 将二维解析类椭圆弧转换为实体椭圆弧 public static Ellipse ToCurve(this EllipticalArc2d ea2d) Parameters ea2d EllipticalArc2d 二维解析类椭圆弧对象 Returns Ellipse 实体椭圆弧 ToCurve(EllipticalArc2d, Matrix3d) 将二维解析类椭圆弧转换为实体椭圆弧，然后进行矩阵变换 public static Ellipse ToCurve(this EllipticalArc2d ea2d, Matrix3d mat) Parameters ea2d EllipticalArc2d 二维解析类椭圆弧对象 mat Matrix3d 变换矩阵 Returns Ellipse 实体椭圆弧 ToCurve(Line2d) 将二维解析类直线转换为实体类构造线 public static Xline ToCurve(this Line2d line2d) Parameters line2d Line2d 二维解析类直线 Returns Xline 实体类构造线 ToCurve(Line2d, Matrix3d) 将二维解析类直线转换为实体类构造线，然后进行矩阵变换 public static Xline ToCurve(this Line2d line2d, Matrix3d mat) Parameters line2d Line2d 二维解析类直线 mat Matrix3d 变换矩阵 Returns Xline 实体类构造线 ToCurve(LineSegment2d) 将二维解析类线段转换为实体类直线 public static Line ToCurve(this LineSegment2d ls2d) Parameters ls2d LineSegment2d 二维解析类线段 Returns Line 实体类直线 ToCurve(LineSegment2d, Matrix3d) 将二维解析类线段转换为实体类直线，并进行矩阵变换 public static Line ToCurve(this LineSegment2d ls2d, Matrix3d mat) Parameters ls2d LineSegment2d 二维解析类线段 mat Matrix3d 变换矩阵 Returns Line 实体类直线 ToCurve(NurbCurve2d) 将二维解析类BURB曲线转换为实体类样条曲线 public static Spline ToCurve(this NurbCurve2d nc2d) Parameters nc2d NurbCurve2d 二维解析类BURB曲线 Returns Spline 实体类样条曲线 ToCurve(NurbCurve2d, Matrix3d) 将二维解析类BURB曲线转换为实体类样条曲线，并进行矩阵变换 public static Spline ToCurve(this NurbCurve2d nc2d, Matrix3d mat) Parameters nc2d NurbCurve2d 二维解析类BURB曲线 mat Matrix3d 变换矩阵 Returns Spline 实体类样条曲线 ToLineSegment2d(Line2d, double, double) 将二维解析类构造线转换为二维解析类线段 public static LineSegment2d ToLineSegment2d(this Line2d line2d, double fromParameter, double toParameter) Parameters line2d Line2d 二维解析类构造线 fromParameter double 起点参数 toParameter double 终点参数 Returns LineSegment2d 二维解析类线段"
  },
  "api/IFoxCAD.Cad.Curve3dEx.html": {
    "href": "api/IFoxCAD.Cad.Curve3dEx.html",
    "title": "Class Curve3dEx",
    "keywords": "Class Curve3dEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 三维解析类曲线转换为三维实体曲线扩展类 public static class Curve3dEx Inheritance object Curve3dEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetParamsAtIntersectionPoints(Curve3d, bool) 获取三维解析类曲线(自交曲线)的交点参数 public static List<double> GetParamsAtIntersectionPoints(this Curve3d c3d, bool sort = true) Parameters c3d Curve3d 三维解析类曲线 sort bool Returns List<double> 曲线参数的列表 GetSplitCurves(CompositeCurve3d, List<double>) 将三维复合曲线按曲线参数分割 public static List<CompositeCurve3d>? GetSplitCurves(this CompositeCurve3d c3d, List<double> pars) Parameters c3d CompositeCurve3d 三维复合曲线 pars List<double> 曲线参数列表 Returns List<CompositeCurve3d> 三维复合曲线列表 GetSubCurve(Curve3d, double, double) 获取三维解析类子曲线 public static Curve3d GetSubCurve(this Curve3d curve, double from, double to) Parameters curve Curve3d 三维解析类曲线 from double 子段曲线起点参数 to double 子段曲线终点参数 Returns Curve3d 三维解析类曲线 IsCircular(Curve3d) 判断是否为圆和椭圆 public static bool IsCircular(this Curve3d curve) Parameters curve Curve3d 三维解析类曲线 Returns bool 完整圆及完整的椭圆返回 true,反之返回 false IsEqualPoint(Tolerance, double, double) 判断两个浮点数是否相等 public static bool IsEqualPoint(this Tolerance tol, double d1, double d2) Parameters tol Tolerance 容差 d1 double 第一个数 d2 double 第二个数 Returns bool 两个数的差值的绝对值小于容差返回 true,反之返回 false ToArc(CircularArc3d) 将三维解析类圆/弧转换为实体圆弧 public static Arc ToArc(this CircularArc3d ca3d) Parameters ca3d CircularArc3d 三维解析类圆/弧 Returns Arc 实体圆弧 ToCircle(CircularArc3d) 将三维解析类圆/弧转换为实体圆 public static Circle ToCircle(this CircularArc3d ca3d) Parameters ca3d CircularArc3d 三维解析类圆/弧 Returns Circle 实体圆 ToCurve(CircularArc3d) 将三维解析类圆/弧转换为实体圆/弧 public static Curve ToCurve(this CircularArc3d ca3d) Parameters ca3d CircularArc3d 三维解析类圆/弧 Returns Curve 实体圆/弧 ToCurve(CompositeCurve3d) 将复合曲线转换为实体类曲线 public static Curve? ToCurve(this CompositeCurve3d curve) Parameters curve CompositeCurve3d 三维复合曲线 Returns Curve 实体曲线 ToCurve(Curve3d) 将三维解析类曲线转换为三维实体类曲线 public static Curve? ToCurve(this Curve3d curve) Parameters curve Curve3d 三维解析类曲线 Returns Curve 三维实体类曲线 ToCurve(EllipticalArc3d) 将三维解析类椭圆弧转换为实体类椭圆弧 public static Ellipse ToCurve(this EllipticalArc3d ea3d) Parameters ea3d EllipticalArc3d 三维解析类椭圆弧 Returns Ellipse 实体类椭圆弧 ToCurve(Line3d) 将解析类三维构造线转换为实体类构造线 public static Xline ToCurve(this Line3d line3d) Parameters line3d Line3d 解析类三维构造线 Returns Xline 实体类构造线 ToCurve(LineSegment3d) 将三维解析类线段转换为实体类直线 public static Line ToCurve(this LineSegment3d lineSeg3d) Parameters lineSeg3d LineSegment3d 三维解析类线段 Returns Line 实体类直线 ToCurve(NurbCurve3d) 将三维解析类Nurb曲线转换为实体类样条曲线 public static Spline ToCurve(this NurbCurve3d nc3d) Parameters nc3d NurbCurve3d 三维解析类Nurb曲线 Returns Spline 实体类样条曲线 ToCurve(PolylineCurve3d) 将三维解析类多段线转换为实体类三维多段线 public static Polyline3d ToCurve(this PolylineCurve3d pl3d) Parameters pl3d PolylineCurve3d 三维解析类多段线 Returns Polyline3d 实体类三维多段线 ToEllipticalArc3d(CircularArc3d) 将三维解析类圆/弧转换为三维解析类椭圆弧 public static EllipticalArc3d ToEllipticalArc3d(this CircularArc3d ca3d) Parameters ca3d CircularArc3d 三维解析类圆/弧 Returns EllipticalArc3d 三维解析类椭圆弧 ToLineSegment3d(Line3d, double, double) 将三维解析类构造线转换为三维解析类线段 public static LineSegment3d ToLineSegment3d(this Line3d line3d, double fromParameter, double toParameter) Parameters line3d Line3d 三维解析类构造线 fromParameter double 起点参数 toParameter double 终点参数 Returns LineSegment3d 三维解析类线段 ToNurbCurve3d(CircularArc3d) 将三维解析类圆/弧转换为三维解析类Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this CircularArc3d ca3d) Parameters ca3d CircularArc3d 三维解析类圆/弧 Returns NurbCurve3d 三维解析类Nurb曲线 ToNurbCurve3d(Curve3d) 将三维解析类曲线转换为三维解析类Nurb曲线 public static NurbCurve3d? ToNurbCurve3d(this Curve3d curve) Parameters curve Curve3d 三维解析类曲线 Returns NurbCurve3d 三维解析类Nurb曲线 ToPolyline(CompositeCurve3d) 将三维复合曲线转换为实体类多段线 public static Polyline ToPolyline(this CompositeCurve3d cc3d) Parameters cc3d CompositeCurve3d 三维复合曲线 Returns Polyline 实体类多段线"
  },
  "api/IFoxCAD.Cad.CurveEx.html": {
    "href": "api/IFoxCAD.Cad.CurveEx.html",
    "title": "Class CurveEx",
    "keywords": "Class CurveEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 实体类曲线扩展类 public static class CurveEx Inheritance object CurveEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods BreakCurve(List<Curve>) 曲线打断 public static List<Curve> BreakCurve(this List<Curve> curves) Parameters curves List<Curve> 曲线列表 Returns List<Curve> 打断后的曲线列表 BreakCurveOnZPlane(List<Curve>) 在z法向量平面打断曲线 public static List<Curve> BreakCurveOnZPlane(this List<Curve> curves) Parameters curves List<Curve> 曲线列表 Returns List<Curve> 打断后的曲线列表 Exceptions ArgumentNullException 传入的曲线列表错误 ChamferAt(Polyline, int, double, bool) 为优化多段线倒角 public static void ChamferAt(this Polyline polyline, int index, double radius, bool isFillet) Parameters polyline Polyline 优化多段线 index int 顶点索引号 radius double 倒角半径 isFillet bool 倒角类型 GetAllCycle(IEnumerable<Curve>) 获取曲线集所围成的封闭区域的曲线集，注意此函数不能处理平行边（两个点及两条线组成的闭合环） public static IEnumerable<Curve> GetAllCycle(this IEnumerable<Curve> curves) Parameters curves IEnumerable<Curve> 曲线集合 Returns IEnumerable<Curve> 所有的闭合环的曲线集合 GetLength(Curve) 曲线长度 public static double GetLength(this Curve curve) Parameters curve Curve 曲线 Returns double 长度 GetScaleCurve(Curve, Point3d, double, double) 获取非等比转换的曲线（旋转投影法） public static Curve GetScaleCurve(this Curve cur, Point3d pt, double x, double y) Parameters cur Curve 转换前的曲线 pt Point3d 基点 x double x方向比例 y double y方向比例 Returns Curve 转换后的曲线 GetSplitCurves(Curve, IEnumerable<Point3d>) 获取分割曲线集合 public static IEnumerable<Curve> GetSplitCurves(this Curve curve, IEnumerable<Point3d> points) Parameters curve Curve 曲线 points IEnumerable<Point3d> 打断点表 Returns IEnumerable<Curve> 打断后曲线的集合 GetSplitCurves(Curve, IEnumerable<Point3d>, bool) 获取分割曲线集合 public static IEnumerable<Curve> GetSplitCurves(this Curve curve, IEnumerable<Point3d> points, bool isOrder = false) Parameters curve Curve 曲线 points IEnumerable<Point3d> 打断点表 isOrder bool 对点表是否进行排序 true按参数值升序排序 false不排序,默认值 Returns IEnumerable<Curve> 打断后曲线的集合 GetSplitCurves(Curve, IEnumerable<double>) 获取分割曲线集合 public static IEnumerable<Curve> GetSplitCurves(this Curve curve, IEnumerable<double> pars) Parameters curve Curve 曲线 pars IEnumerable<double> 打断参数表 Returns IEnumerable<Curve> 打断后曲线的集合 GetSplitCurves(Curve, IEnumerable<double>, bool) 获取分割曲线集合 public static IEnumerable<Curve> GetSplitCurves(this Curve curve, IEnumerable<double> pars, bool isOrder = false) Parameters curve Curve 曲线 pars IEnumerable<double> 打断参数表 isOrder bool 对参数表是否进行排序 true按参数值升序排序 false不排序,默认值 Returns IEnumerable<Curve> 打断后曲线的集合 ToCompositeCurve3d(Curve) 将曲线转换为复合曲线 public static CompositeCurve3d? ToCompositeCurve3d(this Curve curve) Parameters curve Curve 曲线 Returns CompositeCurve3d 复合曲线 ToCurve3d(Arc) 将圆弧转换为ge圆弧曲线 public static CircularArc3d ToCurve3d(this Arc arc) Parameters arc Arc 圆弧 Returns CircularArc3d ge圆弧曲线 ToCurve3d(Circle) 将圆转换为ge圆弧曲线 public static CircularArc3d ToCurve3d(this Circle cir) Parameters cir Circle 圆 Returns CircularArc3d ge圆弧曲线 ToCurve3d(Curve) 将曲线转换为ge曲线，此函数将在未来淘汰，二惊加油 public static Curve3d? ToCurve3d(this Curve curve) Parameters curve Curve 曲线 Returns Curve3d ge曲线 ToCurve3d(Ellipse) 将椭圆转换为三维ge椭圆曲线 public static EllipticalArc3d ToCurve3d(this Ellipse ell) Parameters ell Ellipse 椭圆 Returns EllipticalArc3d 三维ge椭圆曲线 ToCurve3d(Line) 将直线转换为ge直线 public static LineSegment3d ToCurve3d(this Line line) Parameters line Line 直线 Returns LineSegment3d ge直线 ToCurve3d(Polyline) 多段线转换为复合曲线 public static CompositeCurve3d ToCurve3d(this Polyline pl) Parameters pl Polyline 多段线对象 Returns CompositeCurve3d 复合曲线对象 ToCurve3d(Polyline2d) 将二维多段线转换为三维ge曲线 public static Curve3d? ToCurve3d(this Polyline2d pl2d) Parameters pl2d Polyline2d 二维多段线 Returns Curve3d 三维ge曲线 ToCurve3d(Polyline3d) 将三维多段线转换为三维曲线 public static Curve3d ToCurve3d(this Polyline3d pl3d) Parameters pl3d Polyline3d 三维多段线 Returns Curve3d 三维曲线 ToCurve3d(Spline) 将样条曲线转换为三维Nurb曲线 public static NurbCurve3d ToCurve3d(this Spline spl) Parameters spl Spline 样条曲线 Returns NurbCurve3d 三维Nurb曲线 ToEllipticalArc3d(Arc) 将圆弧转换为ge椭圆曲线 public static EllipticalArc3d ToEllipticalArc3d(this Arc arc) Parameters arc Arc 圆弧 Returns EllipticalArc3d ge椭圆曲线 ToEllipticalArc3d(Circle) 将圆转换为ge椭圆曲线 public static EllipticalArc3d ToEllipticalArc3d(this Circle cir) Parameters cir Circle 圆 Returns EllipticalArc3d ge椭圆曲线 ToNurbCurve3d(Arc) 将圆弧转换为三维Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this Arc arc) Parameters arc Arc 圆弧 Returns NurbCurve3d 三维Nurb曲线 ToNurbCurve3d(Circle) 将圆转换为Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this Circle cir) Parameters cir Circle 圆 Returns NurbCurve3d Nurb曲线 ToNurbCurve3d(Curve) 将曲线转换为Nurb曲线 public static NurbCurve3d? ToNurbCurve3d(this Curve curve) Parameters curve Curve 曲线 Returns NurbCurve3d Nurb曲线 ToNurbCurve3d(Ellipse) 将椭圆转换为三维Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this Ellipse ell) Parameters ell Ellipse 椭圆 Returns NurbCurve3d 三维Nurb曲线 ToNurbCurve3d(Line) 将直线转换为Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this Line line) Parameters line Line 直线 Returns NurbCurve3d Nurb曲线 ToNurbCurve3d(Polyline) 多段线转换为Nurb曲线 public static NurbCurve3d? ToNurbCurve3d(this Polyline pl) Parameters pl Polyline 多段线 Returns NurbCurve3d Nurb曲线 ToNurbCurve3d(Polyline2d) 将二维多段线转换为三维Nurb曲线 public static NurbCurve3d? ToNurbCurve3d(this Polyline2d pl2d) Parameters pl2d Polyline2d 二维多段线 Returns NurbCurve3d 三维Nurb曲线 ToNurbCurve3d(Polyline3d) 将三维多段线转换为三维Nurb曲线 public static NurbCurve3d ToNurbCurve3d(this Polyline3d pl3d) Parameters pl3d Polyline3d 三维多段线 Returns NurbCurve3d 三维Nurb曲线 ToPolylineCurve3d(Polyline2d) 将二维多段线转换为三维ge多段线 public static PolylineCurve3d ToPolylineCurve3d(this Polyline2d pl) Parameters pl Polyline2d 二维多段线 Returns PolylineCurve3d 三维ge多段线 ToPolylineCurve3d(Polyline3d) 将三维多段线转换为三维ge多段线 public static PolylineCurve3d ToPolylineCurve3d(this Polyline3d pl) Parameters pl Polyline3d 三维多段线 Returns PolylineCurve3d 三维ge多段线"
  },
  "api/IFoxCAD.Cad.DBDictionaryEx.html": {
    "href": "api/IFoxCAD.Cad.DBDictionaryEx.html",
    "title": "Class DBDictionaryEx",
    "keywords": "Class DBDictionaryEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 字典扩展类 public static class DBDictionaryEx Inheritance object DBDictionaryEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddGroup(DBDictionary, string, ObjectIdCollection) 添加编组 public static ObjectId AddGroup(this DBDictionary dict, string name, ObjectIdCollection ids) Parameters dict DBDictionary 字典 name string 组名 ids ObjectIdCollection 实体Id集合 Returns ObjectId 编组Id AddGroup(DBDictionary, string, IEnumerable<ObjectId>) 添加编组 public static ObjectId AddGroup(this DBDictionary dict, string name, IEnumerable<ObjectId> ids) Parameters dict DBDictionary 字典 name string 组名 ids IEnumerable<ObjectId> 实体Id集合 Returns ObjectId 编组Id CreateDataTable(Dictionary<string, CellType>, object[,]) 创建数据表 public static DataTable CreateDataTable(Dictionary<string, CellType> colTypes, object[,] content) Parameters colTypes Dictionary<string, CellType> 原数据类型的字典 content object[,] 表元素（二维数组） Returns DataTable 数据表 GetAllObjects<T>(DBDictionary) 获取字典里的全部对象 public static IEnumerable<T> GetAllObjects<T>(this DBDictionary dict) where T : DBObject Parameters dict DBDictionary 字典 Returns IEnumerable<T> 对象迭代器 Type Parameters T 对象类型的泛型 GetAt<T>(DBDictionary, string) 获取字典内指定key的对象 public static T? GetAt<T>(this DBDictionary dict, string key) where T : DBObject Parameters dict DBDictionary 字典 key string 指定的键值 Returns T T 类型的对象 Type Parameters T 对象类型的泛型 GetGroups(DBDictionary, Func<Group, bool>) 按选择条件获取编组集合 public static IEnumerable<Group> GetGroups(this DBDictionary dict, Func<Group, bool> func) Parameters dict DBDictionary 字典 func Func<Group, bool> 选择条件，过滤函数 Returns IEnumerable<Group> 编组集合 Examples var groups = dict.GetGroups(g => g.NumEntities < 2); GetGroups(Entity) 返回实体的所在编组的集合 public static IEnumerable<Group> GetGroups(this Entity ent) Parameters ent Entity 图元实体 Returns IEnumerable<Group> 编组集合 GetSubDictionary(DBDictionary, bool, IEnumerable<string>) 获取子字典 public static DBDictionary? GetSubDictionary(this DBDictionary dict, bool createSubDictionary, IEnumerable<string> dictNames) Parameters dict DBDictionary 根字典 createSubDictionary bool 是否创建子字典 dictNames IEnumerable<string> 键值列表 Returns DBDictionary 字典 GetXDictionary(DBObject) 获取扩展字典 public static DBDictionary? GetXDictionary(this DBObject obj) Parameters obj DBObject 对象 Returns DBDictionary 扩展字典对象 GetXRecord(DBDictionary, string) 从字典中获取扩展数据 public static XRecordDataList? GetXRecord(this DBDictionary dict, string key) Parameters dict DBDictionary 字典 key string 键值 Returns XRecordDataList 扩展数据 RemoveNullGroup(DBDictionary) 移除所有的空组 public static List<string> RemoveNullGroup(this DBDictionary dict) Parameters dict DBDictionary Returns List<string> 被移除编组的名称集合 RemoveNullGroup(DBDictionary, Func<string, bool>) 移除所有空组 public static List<string> RemoveNullGroup(this DBDictionary dict, Func<string, bool> func) Parameters dict DBDictionary func Func<string, bool> 过滤条件，过滤要删除的组名的规则函数 Returns List<string> 被移除编组的名称集合 Examples RemoveNullGroup(g => g.StartsWith(\"hah\")); SetAt<T>(DBDictionary, string, T) 添加条目（键值对）到字典 public static void SetAt<T>(this DBDictionary dict, string key, T newValue) where T : DBObject Parameters dict DBDictionary 字典 key string 键 newValue T 值 Type Parameters T 对象类型 SetValue(DataCell, CellType, object) 设定单元格数据 public static void SetValue(this DataCell cell, CellType type, object value) Parameters cell DataCell 单元格 type CellType 类型 value object 数据 SetXRecord(DBDictionary, string, XRecordDataList) 保存扩展数据到字典 public static void SetXRecord(this DBDictionary dict, string key, XRecordDataList rb) Parameters dict DBDictionary 字典 key string 键值 rb XRecordDataList 扩展数据"
  },
  "api/IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager.html": {
    "href": "api/IFoxCAD.Cad.DBObjectEx.UpgradeOpenManager.html",
    "title": "Class DBObjectEx.UpgradeOpenManager",
    "keywords": "Class DBObjectEx.UpgradeOpenManager Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 提权类 public class DBObjectEx.UpgradeOpenManager : IDisposable Inheritance object DBObjectEx.UpgradeOpenManager Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Methods Dispose() 注销函数 public void Dispose()"
  },
  "api/IFoxCAD.Cad.DBObjectEx.html": {
    "href": "api/IFoxCAD.Cad.DBObjectEx.html",
    "title": "Class DBObjectEx",
    "keywords": "Class DBObjectEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 实体对象扩展类 public static class DBObjectEx Inheritance object DBObjectEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ChangeXData(DBObject, string, DxfCode, object) 修改扩展数据 public static void ChangeXData(this DBObject obj, string appName, DxfCode dxfCode, object newvalue) Parameters obj DBObject 对象实例 appName string 应用程序名称 dxfCode DxfCode 要修改数据的组码 newvalue object 新的数据 CloneEx<T>(T) 克隆对象 public static T CloneEx<T>(this T ent) where T : RXObject Parameters ent T 对象 Returns T 克隆后的对象 Type Parameters T 对象类型 Exceptions ArgumentException ForWrite(DBObject) 打开模式提权 public static DBObjectEx.UpgradeOpenManager ForWrite(this DBObject obj) Parameters obj DBObject 实体对象 Returns DBObjectEx.UpgradeOpenManager 提权类对象 ForWrite<T>(T, Action<T>) 实体自动管理读写函数，此函数性能比using模式低一倍 public static void ForWrite<T>(this T obj, Action<T> action) where T : DBObject Parameters obj T 实体对象 action Action<T> 操作委托 Type Parameters T 实体类型 RemoveXData(DBObject, string) 删除扩展数据 public static void RemoveXData(this DBObject obj, string appName) Parameters obj DBObject 对象实例 appName string 应用程序名称 RemoveXData(DBObject, string, DxfCode) 删除扩展数据 public static void RemoveXData(this DBObject obj, string appName, DxfCode dxfCode) Parameters obj DBObject 对象实例 appName string 应用程序名称 dxfCode DxfCode 要删除数据的组码"
  },
  "api/IFoxCAD.Cad.DBTextEx.html": {
    "href": "api/IFoxCAD.Cad.DBTextEx.html",
    "title": "Class DBTextEx",
    "keywords": "Class DBTextEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 单行文字扩展类 public static class DBTextEx Inheritance object DBTextEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateDBText(Point3d, string, double, AttachmentPoint, Database?, Action<DBText>?) 创建单行文字 public static DBText CreateDBText(Point3d position, string text, double height, AttachmentPoint justify = 7, Database? database = null, Action<DBText>? action = null) Parameters position Point3d 插入点 text string 文本内容 height double 文字高度 justify AttachmentPoint 对齐方式 database Database 文字所在的数据库 action Action<DBText> 文字属性设置委托 Returns DBText 文字对象 Exceptions ArgumentNullException ValidateMirror(DBText) 更正单行文字的镜像属性 public static void ValidateMirror(this DBText txt) Parameters txt DBText 单行文字"
  },
  "api/IFoxCAD.Cad.DBTrans.html": {
    "href": "api/IFoxCAD.Cad.DBTrans.html",
    "title": "Class DBTrans",
    "keywords": "Class DBTrans Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 事务栈 隐匿事务在数据库其中担任的角色 public sealed class DBTrans : IDisposable Inheritance object DBTrans Implements IDisposable Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods DBTransEx.Purge(DBTrans, SymModes, bool) XrefEx.XrefFactory(DBTrans, XrefModes, HashSet<string>?) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DBTrans(Document?, bool, bool) 事务栈 默认构造函数,默认为打开当前文档,默认提交事务 public DBTrans(Document? doc = null, bool commit = true, bool doclock = false) Parameters doc Document 要打开的文档 commit bool 事务是否提交 doclock bool 是否锁文档 DBTrans(Database, bool) 事务栈 打开数据库,默认提交事务 public DBTrans(Database database, bool commit = true) Parameters database Database 要打开的数据库 commit bool 事务是否提交 DBTrans(string, bool, FileOpenMode, string?, bool) 事务栈 打开文件,默认提交事务 public DBTrans(string fileName, bool commit = true, FileOpenMode fileOpenMode = 2, string? password = null, bool activeOpen = false) Parameters fileName string 要打开的文件名 commit bool 事务是否提交 fileOpenMode FileOpenMode 开图模式 password string 密码 activeOpen bool 后台打开false;前台打开true(必须设置CommandFlags.Session) Properties BlockTable 块表 public SymbolTable<BlockTable, BlockTableRecord> BlockTable { get; } Property Value SymbolTable<BlockTable, BlockTableRecord> ColorDict 颜色字典 public DBDictionary ColorDict { get; } Property Value DBDictionary CurrentSpace 当前绘图空间 public BlockTableRecord CurrentSpace { get; } Property Value BlockTableRecord DataLinkDict 数据链接字典 public DBDictionary DataLinkDict { get; } Property Value DBDictionary Database 数据库 public Database Database { get; } Property Value Database DetailViewStyleDict 详细视图样式字典 public DBDictionary DetailViewStyleDict { get; } Property Value DBDictionary DimStyleTable 标注样式表 public SymbolTable<DimStyleTable, DimStyleTableRecord> DimStyleTable { get; } Property Value SymbolTable<DimStyleTable, DimStyleTableRecord> Document 文档 public Document? Document { get; } Property Value Document Editor 命令行 public Editor? Editor { get; } Property Value Editor GroupDict 组字典 public DBDictionary GroupDict { get; } Property Value DBDictionary IsDisposed 是否释放事务 public bool IsDisposed { get; } Property Value bool LayerTable 层表 public SymbolTable<LayerTable, LayerTableRecord> LayerTable { get; } Property Value SymbolTable<LayerTable, LayerTableRecord> LayoutDict 布局字典 public DBDictionary LayoutDict { get; } Property Value DBDictionary LinetypeTable 线型表 public SymbolTable<LinetypeTable, LinetypeTableRecord> LinetypeTable { get; } Property Value SymbolTable<LinetypeTable, LinetypeTableRecord> MLStyleDict 多线样式字典 public DBDictionary MLStyleDict { get; } Property Value DBDictionary MLeaderStyleDict 多重引线样式字典 public DBDictionary MLeaderStyleDict { get; } Property Value DBDictionary MaterialDict 材质字典 public DBDictionary MaterialDict { get; } Property Value DBDictionary ModelSpace 模型空间 public BlockTableRecord ModelSpace { get; } Property Value BlockTableRecord NamedObjectsDict 命名对象字典 public DBDictionary NamedObjectsDict { get; } Property Value DBDictionary PaperSpace 图纸空间 public BlockTableRecord PaperSpace { get; } Property Value BlockTableRecord PlotSettingsDict 打印设置字典 public DBDictionary PlotSettingsDict { get; } Property Value DBDictionary PlotStyleNameDict 打印样式表名字典 public DBDictionary PlotStyleNameDict { get; } Property Value DBDictionary RegAppTable 注册应用程序表 public SymbolTable<RegAppTable, RegAppTableRecord> RegAppTable { get; } Property Value SymbolTable<RegAppTable, RegAppTableRecord> SectionViewStyleDict 剖面视图样式字典 public DBDictionary SectionViewStyleDict { get; } Property Value DBDictionary TableStyleDict 表格样式字典 public DBDictionary TableStyleDict { get; } Property Value DBDictionary TextStyleTable 文字样式表 public SymbolTable<TextStyleTable, TextStyleTableRecord> TextStyleTable { get; } Property Value SymbolTable<TextStyleTable, TextStyleTableRecord> Top 返回当前事务 public static DBTrans Top { get; } Property Value DBTrans Transaction 事务管理器 public Transaction Transaction { get; } Property Value Transaction UcsTable 用户坐标系表 public SymbolTable<UcsTable, UcsTableRecord> UcsTable { get; } Property Value SymbolTable<UcsTable, UcsTableRecord> ViewTable 视图表 public SymbolTable<ViewTable, ViewTableRecord> ViewTable { get; } Property Value SymbolTable<ViewTable, ViewTableRecord> ViewportTable 视口表 public SymbolTable<ViewportTable, ViewportTableRecord> ViewportTable { get; } Property Value SymbolTable<ViewportTable, ViewportTableRecord> VisualStyleDict 视觉样式字典 public DBDictionary VisualStyleDict { get; } Property Value DBDictionary Methods Abort() 取消事务 public void Abort() Commit() 提交事务 public void Commit() Dispose() 手动调用释放 public void Dispose() ~DBTrans() 析构函数调用释放 protected ~DBTrans() GetObject(ObjectId, OpenMode, bool, bool) 根据对象id获取对象 public DBObject GetObject(ObjectId id, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) Parameters id ObjectId 对象id openMode OpenMode 打开模式,默认为只读 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns DBObject 数据库DBObject对象 GetObjectId(string) 根据对象句柄字符串获取对象Id public ObjectId GetObjectId(string handleString) Parameters handleString string 句柄字符串 Returns ObjectId 对象id GetObject<T>(ObjectId, OpenMode, bool, bool) 根据对象id获取图元对象 public T? GetObject<T>(ObjectId id, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : DBObject Parameters id ObjectId 对象id openMode OpenMode 打开模式,默认为只读 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns T 图元对象 Type Parameters T 要获取的图元对象的类型 GetTop(Database) 获取给定数据库的顶层 DBTrans 事务 public static DBTrans GetTop(Database database) Parameters database Database 数据库 Returns DBTrans DBTrans 事务 Exceptions ArgumentNullException GetTopTransaction(Database) 获取顶层事务 public static Transaction GetTopTransaction(Database database) Parameters database Database 数据库 Returns Transaction 事务对象 Task(Action, bool) 前台后台任务分别处理 public void Task(Action action, bool handlingDBTextDeviation = true) Parameters action Action 委托 handlingDBTextDeviation bool 开启单行文字偏移处理 Remarks 备注: 0x01 文字偏移问题主要出现线性引擎函数Autodesk.AutoCAD.DatabaseServices.Database.ResolveXrefs(System.Boolean,System.Boolean)上面, 在 参照绑定/深度克隆 的底层共用此函数导致 0x02 后台是利用前台当前数据库进行处理的 0x03 跨进程通讯暂无测试(可能存在bug) ToString() public override string ToString() Returns string Operators implicit operator Transaction(DBTrans) 隐式转换为Transaction public static implicit operator Transaction(DBTrans tr) Parameters tr DBTrans 事务管理器 Returns Transaction 事务管理器"
  },
  "api/IFoxCAD.Cad.DBTransEx.html": {
    "href": "api/IFoxCAD.Cad.DBTransEx.html",
    "title": "Class DBTransEx",
    "keywords": "Class DBTransEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class DBTransEx Inheritance object DBTransEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Purge(DBTrans, SymModes, bool) 清理符号表 public static void Purge(this DBTrans tr, SymModes sym = SymModes.All, bool excludeXref = true) Parameters tr DBTrans sym SymModes excludeXref bool 排除外部参照:默认true,为false时候会令图层全部显示再清理,包括冻结"
  },
  "api/IFoxCAD.Cad.DBmod.html": {
    "href": "api/IFoxCAD.Cad.DBmod.html",
    "title": "Enum DBmod",
    "keywords": "Enum DBmod Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 获取数据库修改状态 相关链接 [Flags] public enum DBmod : short Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Database = 1 DatabaseNoModifies = 0 Field = 32 Value = 4 View = 16 Window = 8"
  },
  "api/IFoxCAD.Cad.DBmodEx.html": {
    "href": "api/IFoxCAD.Cad.DBmodEx.html",
    "title": "Class DBmodEx",
    "keywords": "Class DBmodEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class DBmodEx Inheritance object DBmodEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DBmodEx() public DBmodEx() Properties DBmod public static DBmod DBmod { get; } Property Value DBmod Methods AcdbSetDbmod(nint, DBmod) public static long AcdbSetDbmod(nint db, DBmod newValue) Parameters db nint newValue DBmod Returns long DBmodTask(Action) Dbmod 不被修改的任务 public static void DBmodTask(Action action) Parameters action Action DatabaseNoModifies() 请在无法处理的初始化才使用它 (源泉在初始化的时候进行了修改数据库,所以必须要用一个新线程等待lisp执行完成才可以) public static void DatabaseNoModifies()"
  },
  "api/IFoxCAD.Cad.DatabaseEx.html": {
    "href": "api/IFoxCAD.Cad.DatabaseEx.html",
    "title": "Class DatabaseEx",
    "keywords": "Class DatabaseEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 数据库扩展函数 public static class DatabaseEx Inheritance object DatabaseEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods SaveDwgFile(Database, DwgVersion) 保存文件 public static void SaveDwgFile(this Database db, DwgVersion version = 25) Parameters db Database 数据库 version DwgVersion 文件版本 SaveFile(Database, DwgVersion, bool, string?, bool) 保存文件 public static void SaveFile(this Database db, DwgVersion version = 25, bool automatic = true, string? saveAsFile = null, bool echoes = true) Parameters db Database 数据库 version DwgVersion 默认2004dwg;若保存dxf则需要在路径输入扩展名 automatic bool 为true时候version无效,将变为自动识别环境变量 saveAsFile string 另存为文件,前台将调用时它将无效,将变为弹出面板 echoes bool 保存路径失败的提示"
  },
  "api/IFoxCAD.Cad.DepthFirst.html": {
    "href": "api/IFoxCAD.Cad.DepthFirst.html",
    "title": "Class DepthFirst",
    "keywords": "Class DepthFirst Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 深度优先搜索; public sealed class DepthFirst Inheritance object DepthFirst Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DepthFirst() public DepthFirst() Properties Curve3ds 存储所有的边 public List<LinkedHashSet<IGraphVertex>> Curve3ds { get; } Property Value List<LinkedHashSet<IGraphVertex>> Methods FindAll(IGraph) 找出所有的路径 public void FindAll(IGraph graph) Parameters graph IGraph 图"
  },
  "api/IFoxCAD.Cad.DosHeader.html": {
    "href": "api/IFoxCAD.Cad.DosHeader.html",
    "title": "Class DosHeader",
    "keywords": "Class DosHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll DOS文件都MS开始 public class DosHeader Inheritance object DosHeader Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DosHeader() public DosHeader() Fields FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long e_PESTAR public byte[] e_PESTAR Field Value byte[] e_bl1 public byte[] e_bl1 Field Value byte[] e_bl2 public byte[] e_bl2 Field Value byte[] e_cblp public byte[] e_cblp Field Value byte[] e_cp public byte[] e_cp Field Value byte[] e_cparhdr public byte[] e_cparhdr Field Value byte[] e_crlc public byte[] e_crlc Field Value byte[] e_cs public byte[] e_cs Field Value byte[] e_csum public byte[] e_csum Field Value byte[] e_fg public byte[] e_fg Field Value byte[] e_ip public byte[] e_ip Field Value byte[] e_magic public byte[] e_magic Field Value byte[] e_maxalloc public byte[] e_maxalloc Field Value byte[] e_minalloc public byte[] e_minalloc Field Value byte[] e_oemid public byte[] e_oemid Field Value byte[] e_oeminfo public byte[] e_oeminfo Field Value byte[] e_rva public byte[] e_rva Field Value byte[] e_sp public byte[] e_sp Field Value byte[] e_ss public byte[] e_ss Field Value byte[]"
  },
  "api/IFoxCAD.Cad.DosStub.html": {
    "href": "api/IFoxCAD.Cad.DosStub.html",
    "title": "Class DosStub",
    "keywords": "Class DosStub Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll DOS程序 提示 public class DosStub Inheritance object DosStub Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DosStub(long) public DosStub(long Size) Parameters Size long Fields DosStubData public byte[] DosStubData Field Value byte[] FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long"
  },
  "api/IFoxCAD.Cad.DwgMark.html": {
    "href": "api/IFoxCAD.Cad.DwgMark.html",
    "title": "Class DwgMark",
    "keywords": "Class DwgMark Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 为dwg文件添加标记 public static class DwgMark Inheritance object DwgMark Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddMark(FileInfo, int) 为dwg文件添加标识 public static void AddMark(FileInfo file, int bite) Parameters file FileInfo DWG文件 bite int ASCII标识字节0X00~0X7F Exceptions ArgumentException 非dwg文件会报错，给定bite超界限也报错 GetMark(FileInfo) 获取设置的dwg文件标记 public static int GetMark(FileInfo file) Parameters file FileInfo 文件 Returns int Exceptions ArgumentException 非dwg文件会报错 RemoveMark(FileInfo) 将dwg文件标记恢复为默认值 public static void RemoveMark(FileInfo file) Parameters file FileInfo 文件 Exceptions ArgumentException 非dwg文件会报错"
  },
  "api/IFoxCAD.Cad.EditorEx.RunLispFlag.html": {
    "href": "api/IFoxCAD.Cad.EditorEx.RunLispFlag.html",
    "title": "Enum EditorEx.RunLispFlag",
    "keywords": "Enum EditorEx.RunLispFlag Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum EditorEx.RunLispFlag : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields AcedEvaluateLisp = 2 AdsQueueexpr = 1 SendStringToExecute = 4"
  },
  "api/IFoxCAD.Cad.EditorEx.html": {
    "href": "api/IFoxCAD.Cad.EditorEx.html",
    "title": "Class EditorEx",
    "keywords": "Class EditorEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 命令行扩展类 public static class EditorEx Inheritance object EditorEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Acceptable() 判断是否可以打印字符串 public static bool Acceptable() Returns bool true可以打印,false不可以打印 ComExportWMF(Editor, string, ObjectId?[]?, bool) 输出WMF 此函数不适用于后台 public static void ComExportWMF(this Editor editor, string saveFile, ObjectId?[]? ids = null, bool wmfSetDel = false) Parameters editor Editor 命令行对象 saveFile string 保存文件 ids ObjectId[] 选择集的对象,为null时候手选 wmfSetDel bool 是否清空选择集 Exceptions ArgumentNullException DrawCircle(Editor, Point2d, short, double, int) 用矢量线画近似圆（正多边形） public static void DrawCircle(this Editor editor, Point2d pnt, short colorIndex, double radius, int numEdges) Parameters editor Editor 编辑器对象 pnt Point2d 点 colorIndex short 颜色码 radius double 半径 numEdges int 多边形边的个数 DrawCircles(Editor, IEnumerable<Point2d>, short, double, int) 用矢量线画近似圆（正多边形） public static void DrawCircles(this Editor editor, IEnumerable<Point2d> pnts, short colorIndex, double radius, int numEdges) Parameters editor Editor 编辑器对象 pnts IEnumerable<Point2d> 点表 colorIndex short 颜色码 radius double 半径 numEdges int 多边形边的个数 DrawVectors(Editor, IEnumerable<Point2d>, short) 画矢量线 public static void DrawVectors(this Editor editor, IEnumerable<Point2d> pnts, short colorIndex) Parameters editor Editor 编辑器对象 pnts IEnumerable<Point2d> 点表 colorIndex short 颜色码 DrawVectors(Editor, IEnumerable<Point2d>, short, bool) 画矢量线 public static void DrawVectors(this Editor editor, IEnumerable<Point2d> pnts, short colorIndex, bool isClosed) Parameters editor Editor 编辑器对象 pnts IEnumerable<Point2d> 点表 colorIndex short 颜色码 isClosed bool 是否闭合,true 为闭合,false 为不闭合 GetCurrentMouthPoint(Editor) 获取CAD鼠标当前位置坐标 public static Point3d? GetCurrentMouthPoint(this Editor ed) Parameters ed Editor 命令栏 Returns Point3d? 坐标(可能为null) GetDouble(Editor, string, double) 获取double值 public static PromptDoubleResult GetDouble(this Editor ed, string Message, double DefaultValue = 1) Parameters ed Editor 命令行对象 Message string 提示信息 DefaultValue double double默认值 Returns PromptDoubleResult GetInteger(Editor, string, int) 获取int值 public static PromptIntegerResult GetInteger(this Editor ed, string Message, int DefaultValue = 1) Parameters ed Editor 命令行对象 Message string 提示信息 DefaultValue int double默认值 Returns PromptIntegerResult GetLines(IEnumerable<Point2d>, bool) 根据点表返回矢量线的列表 public static List<TypedValue> GetLines(IEnumerable<Point2d> pnts, bool isClosed) Parameters pnts IEnumerable<Point2d> 点表 isClosed bool 是否闭合,true 为闭合,false 为不闭合 Returns List<TypedValue> GetMatrix(Editor, CoordinateSystemCode, CoordinateSystemCode) 获取变换矩阵 public static Matrix3d GetMatrix(this Editor editor, CoordinateSystemCode from, CoordinateSystemCode to) Parameters editor Editor 命令行对象 from CoordinateSystemCode 源坐标系 to CoordinateSystemCode 目标坐标系 Returns Matrix3d 变换矩阵 GetMatrixFromMDcsToPDcs(Editor) 获取MDCS(模型空间)到PDCS(图纸空间)的矩阵 public static Matrix3d GetMatrixFromMDcsToPDcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetMatrixFromMDcsToWcs(Editor) 获取MDCS(模型空间)到WCS的矩阵 public static Matrix3d GetMatrixFromMDcsToWcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetMatrixFromPDcsToMDcs(Editor) 获取PDCS(图纸空间)到MDCS(模型空间)的矩阵 public static Matrix3d GetMatrixFromPDcsToMDcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetMatrixFromUcsToWcs(Editor) 获取UCS到WCS的矩阵 public static Matrix3d GetMatrixFromUcsToWcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetMatrixFromWcsToMDcs(Editor) 获取WCS到MDCS(模型空间)的矩阵 public static Matrix3d GetMatrixFromWcsToMDcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetMatrixFromWcsToUcs(Editor) 获取WCS到UCS的矩阵 public static Matrix3d GetMatrixFromWcsToUcs(this Editor editor) Parameters editor Editor 命令行对象 Returns Matrix3d 变换矩阵 GetPoint(Editor, string, Point3d) 获取Point public static PromptPointResult GetPoint(this Editor ed, string Message, Point3d BasePoint) Parameters ed Editor 命令行对象 Message string 提示信息 BasePoint Point3d 提示使用的基点 Returns PromptPointResult GetString(Editor, string, string) 获取string值 public static PromptResult GetString(this Editor ed, string Message, string DefaultValue = \"\") Parameters ed Editor 命令行对象 Message string 提示信息 DefaultValue string string默认值 Returns PromptResult GetValidExtents3d(Database, double) 获取有效的数据库范围 public static Extents3d? GetValidExtents3d(this Database db, double extention = 1E-06) Parameters db Database 数据库 extention double 容差值:图元包围盒会超过数据库边界,用此参数扩大边界 Returns Extents3d? HasEditor() 判断是否有活动的编辑器对象 public static bool HasEditor() Returns bool true有,false没有 InfoMessageBox(string) 提示信息对话框,默认标题为NFox.Cad public static void InfoMessageBox(string message) Parameters message string 对话框文本 InfoMessageBox(string, params object[]) 提示信息对话框 public static void InfoMessageBox(string format, params object[] args) Parameters format string 带格式化项的对话框文本 args object[] 指定格式化的对象数组 InfoMessageBox(string, string) 提示信息对话框 public static void InfoMessageBox(string caption, string message) Parameters caption string 对话框的标题 message string 对话框文本 InfoMessageBox(string, string, params object[]) 提示信息对话框 public static void InfoMessageBox(string caption, string format, params object[] args) Parameters caption string 对话框的标题 format string 带格式化项的对话框文本 args object[] 指定格式化的对象数组 Message(Exception) 异常信息对话框 public static void Message(Exception ex) Parameters ex Exception 异常 PrepareForJig(Editor, params Entity[]) jig前的准备工作，使图元暗显 public static void PrepareForJig(this Editor ed, params Entity[] ents) Parameters ed Editor 命令栏 ents Entity[] 实体（已存在数据库中） PrepareForJig(Editor, IEnumerable<Entity>) jig前的准备工作，使图元暗显 public static void PrepareForJig(this Editor ed, IEnumerable<Entity> ents) Parameters ed Editor 命令栏 ents IEnumerable<Entity> 实体（已存在数据库中） RunLisp(Editor, string, RunLispFlag) 发送lisp语句字符串到cad执行 public static ResultBuffer? RunLisp(this Editor ed, string lispCode, EditorEx.RunLispFlag flag = RunLispFlag.AdsQueueexpr) Parameters ed Editor 编辑器对象 lispCode string lisp语句 flag EditorEx.RunLispFlag 运行方式 Returns ResultBuffer 缓冲结果,返回值 SSGet(Editor, string?, SelectionFilter?, (string add, string remove)?, Dictionary<string, Action>?) 选择集 public static PromptSelectionResult SSGet(this Editor editor, string? mode = null, SelectionFilter? filter = null, (string add, string remove)? messages = null, Dictionary<string, Action>? keywords = null) Parameters editor Editor 命令行对象 mode string 模式 filter SelectionFilter 过滤器 messages (string add, string remove)? 消息 keywords Dictionary<string, Action> 关键字和回调函数 Returns PromptSelectionResult SelectAtPoint(Editor, Point3d, SelectionFilter?) 选择穿过一个点的对象 public static PromptSelectionResult SelectAtPoint(this Editor editor, Point3d point, SelectionFilter? filter = null) Parameters editor Editor 命令行对象 point Point3d 点 filter SelectionFilter 过滤器 Returns PromptSelectionResult 选择集结果类 SelectByLineWeight(Editor, LineWeight) 根据线宽创建图层选择集 public static SelectionSet SelectByLineWeight(this Editor editor, LineWeight lineWeight) Parameters editor Editor 命令行对象 lineWeight LineWeight 线宽 Returns SelectionSet 图层选择集 SsgetAddKeys(PromptSelectionOptions, Dictionary<string, Action>) 添加选择集关键字和回调 public static void SsgetAddKeys(this PromptSelectionOptions pso, Dictionary<string, Action> dicActions) Parameters pso PromptSelectionOptions 选择集配置 dicActions Dictionary<string, Action> 关键字,回调委托 StreamMessage(string) 带错误提示对话框的打印信息函数 public static void StreamMessage(string message) Parameters message string 打印信息 StreamMessage(string, params object[]) 带错误提示对话框的打印信息函数 public static void StreamMessage(string format, params object[] args) Parameters format string 带格式项的字符串 args object[] 指定格式化的对象数组 WriteMessage(string) 命令行打印字符串 public static void WriteMessage(string message) Parameters message string 字符串 WriteMessage(string, params object[]) 命令行打印字符串 public static void WriteMessage(string format, params object[] args) Parameters format string 带格式化项的文本 args object[] 指定格式化的对象数组 Zoom(Editor, Point3d, double, double) 按范围缩放 public static void Zoom(this Editor ed, Point3d CenPt, double width, double height) Parameters ed Editor 命令行对象 CenPt Point3d 中心点 width double 窗口宽 height double 窗口高 ZoomExtents(Editor, double) 动态缩放 public static void ZoomExtents(this Editor ed, double offsetDist = 0) Parameters ed Editor 命令行对象 offsetDist double 偏移距离 ZoomObject(Editor, Entity, double) 根据实体对象的范围显示视图 public static void ZoomObject(this Editor ed, Entity ent, double offsetDist = 0) Parameters ed Editor 命令行对象 ent Entity Entity对象 offsetDist double 偏移距离 ZoomWindow(Editor, Extents3d) 缩放窗口范围 public static void ZoomWindow(this Editor ed, Extents3d ext) Parameters ed Editor 命令行对象 ext Extents3d 窗口范围点 ZoomWindow(Editor, Point3d, Point3d, double) 缩放窗口范围 public static void ZoomWindow(this Editor ed, Point3d lpt, Point3d rpt, double offsetDist = 0) Parameters ed Editor 命令行对象 lpt Point3d 第一点 rpt Point3d 对角点 offsetDist double 偏移距离"
  },
  "api/IFoxCAD.Cad.Emf.html": {
    "href": "api/IFoxCAD.Cad.Emf.html",
    "title": "Class Emf",
    "keywords": "Class Emf Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class Emf Inheritance object Emf Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors Emf() public Emf() Fields EmfHandle public nint EmfHandle Field Value nint Methods CreateEnhMetaHeader() 获取emf结构 public EnhMetaHeader CreateEnhMetaHeader() Returns EnhMetaHeader Wmf2Emf(string) 转换wmf到emf public void Wmf2Emf(string wmfFile) Parameters wmfFile string"
  },
  "api/IFoxCAD.Cad.EmfTool.DeviceCap.html": {
    "href": "api/IFoxCAD.Cad.EmfTool.DeviceCap.html",
    "title": "Enum EmfTool.DeviceCap",
    "keywords": "Enum EmfTool.DeviceCap Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum EmfTool.DeviceCap Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields ASPECTX = 40 Length of the X leg ASPECTXY = 44 Length of the hypotenuse ASPECTY = 42 Length of the Y leg BITSPIXEL = 12 Number of bits per pixel BLTALIGNMENT = 119 Preferred blt alignment CLIPCAPS = 36 Clipping capabilities COLORRES = 108 Actual color resolution CURVECAPS = 28 Curve capabilities DESKTOPHORZRES = 118 Horizontal width of entire desktop in pixels DESKTOPVERTRES = 117 Vertical height of entire desktop in pixels DRIVERVERSION = 0 Device driver version HORZRES = 8 Horizontal width in pixels HORZSIZE = 4 Horizontal size in millimeters LINECAPS = 30 Line capabilities LOGPIXELSX = 88 Logical pixels inch in X LOGPIXELSY = 90 Logical pixels inch in Y NUMBRUSHES = 16 Number of brushes the device has NUMCOLORS = 24 Number of colors the device supports NUMFONTS = 22 Number of fonts the device has NUMMARKERS = 20 Number of markers the device has NUMPENS = 18 Number of pens the device has NUMRESERVED = 106 Number of reserved entries in palette PDEVICESIZE = 26 Size required for device descriptor PHYSICALHEIGHT = 111 Physical Height in device units PHYSICALOFFSETX = 112 Physical Printable Area x margin PHYSICALOFFSETY = 113 Physical Printable Area y margin PHYSICALWIDTH = 110 Physical Width in device units PLANES = 14 Number of planes POLYGONALCAPS = 32 Polygonal capabilities RASTERCAPS = 38 Bitblt capabilities SCALINGFACTORX = 114 Scaling factor x SCALINGFACTORY = 115 Scaling factor y SHADEBLENDCAPS = 45 Shading and Blending caps SIZEPALETTE = 104 Number of entries in physical palette TECHNOLOGY = 2 Device classification TEXTCAPS = 34 Text capabilities VERTRES = 10 Vertical height in pixels VERTSIZE = 6 Vertical size in millimeters VREFRESH = 116 Current vertical refresh rate of the display device (for displays only) in Hz"
  },
  "api/IFoxCAD.Cad.EmfTool.html": {
    "href": "api/IFoxCAD.Cad.EmfTool.html",
    "title": "Class EmfTool",
    "keywords": "Class EmfTool Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class EmfTool Inheritance object EmfTool Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CloseEnhMetaFile(nint) 返回图元文件句柄 public static extern nint CloseEnhMetaFile(nint hdcRef) Parameters hdcRef nint 画布句柄 Returns nint CopyEnhMetaFile(nint, string?) EMF保存到文件或者路径 public static extern nint CopyEnhMetaFile(nint hemfSrc, string? lpszFile) Parameters hemfSrc nint EMF要复制的增强型图元文件的句柄 lpszFile string 指向目标文件名称的指针,为NULL则将源图元文件复制到内存中 Returns nint CreateEnhMetaFile(nint, string, ref IntRect, string) 创建emf https://www.cnblogs.com/5iedu/p/4706327.html public static extern nint CreateEnhMetaFile(nint hdcRef, string szFilename, ref WindowsAPI.IntRect lpRect, string lpDescription) Parameters hdcRef nint 参考设备环境,null以整个屏幕为参考 szFilename string 指定文件名时,创建磁盘文件(.EMF),为null时创建内存图元文件 lpRect WindowsAPI.IntRect 用于描述图元文件的大小和位置(以0.01mm为单位),可用它精确定义图元文件的物理尺寸 lpDescription string 对图元文件的一段说明.包括创建应用程序的名字、一个NULL字符、对图元文件的一段说明以及两个NULL字符. Returns nint 返回画布句柄DC(图元文件句柄得调用 CloseEnhMetaFile 函数) CreatePen(int, int, int) public static extern int CreatePen(int nPenStyle, int nWidth, int nColor) Parameters nPenStyle int nWidth int nColor int Returns int DPtoLP(nint, Point[], int) public static extern bool DPtoLP(nint hdc, Point[] lpPoints, int nCount) Parameters hdc nint lpPoints Point[] nCount int Returns bool DeleteEnhMetaFile(nint) 删除矢量图 public static extern bool DeleteEnhMetaFile(nint hemf) Parameters hemf nint Returns bool DeleteObject(int) public static extern int DeleteObject(int hBitmap) Parameters hBitmap int Returns int DeleteObject(nint) public static extern bool DeleteObject(nint hdcRef) Parameters hdcRef nint Returns bool EnumEnhMetaFile(nint, nint, nint, nint, ref IntRect) 旧emf绘制新的hdcEMF中(即回放) public static extern bool EnumEnhMetaFile(nint hdcRef, nint hmf, nint proc, nint procParam, ref WindowsAPI.IntRect lpRect) Parameters hdcRef nint 画布句柄 hmf nint 图元文件句柄 proc nint 回调函数 procParam nint 传给回调函数的额外参数 lpRect WindowsAPI.IntRect 在指定的矩形区内显示图元文件 Returns bool GetEnhMetaFile(string) public static extern nint GetEnhMetaFile(string path) Parameters path string Returns nint GetEnhMetaFileBits(nint, uint, byte[]) 获取矢量图的byte public static extern uint GetEnhMetaFileBits(nint hemf, uint cbBuffer, byte[] lpbBuffer) Parameters hemf nint cbBuffer uint lpbBuffer byte[] Returns uint GetEnhMetaFileDescriptionEx(nint) 获取emf描述 public static string? GetEnhMetaFileDescriptionEx(nint clipTypeData) Parameters clipTypeData nint 文件句柄 Returns string 描述的内容 GetEnhMetaFileHeader(nint, uint, nint) public static extern uint GetEnhMetaFileHeader(nint hemf, uint cbBuffer, nint lpemh) Parameters hemf nint cbBuffer uint lpemh nint Returns uint GetMetaFile(string) public static extern nint GetMetaFile(string path) Parameters path string Returns nint GetStockObject(int) public static extern int GetStockObject(int nStockBrush) Parameters nStockBrush int Returns int LineTo(nint, int, int) public static extern int LineTo(nint hDC, int x, int y) Parameters hDC nint x int y int Returns int MoveToEx(nint, int, int, int) public static extern int MoveToEx(nint hDC, int x, int y, int nPreviousPoint) Parameters hDC nint x int y int nPreviousPoint int Returns int PlayEnhMetaFile(nint, nint, ref IntRect) 在指定的设备场景中画一个增强型图元文件; 与标准图元文件不同,完成回放后,增强型图元文件会恢复设备场景以前的状态 public static extern bool PlayEnhMetaFile(nint hdcRef, nint hemf, ref WindowsAPI.IntRect lpRect) Parameters hdcRef nint 画布句柄 hemf nint 欲描绘的emf的图元文件句柄 lpRect WindowsAPI.IntRect 指定显示区域(逻辑单位)GDI会缩放图像以适应该矩形范围 Returns bool Rectangle(nint, int, int, int, int) public static extern int Rectangle(nint hDC, int nLeft, int nTop, int nRight, int nBottom) Parameters hDC nint nLeft int nTop int nRight int nBottom int Returns int Save(nint, string) 保存 public static void Save(nint clipTypeData, string file) Parameters clipTypeData nint GetEnhMetaFileBits 参数1的结构体首地址 file string 保存路径 SaveMetaFile(Metafile, string) 矢量图保存 public static void SaveMetaFile(this Metafile file, string emfName) Parameters file Metafile emfName string SelectObject(nint, int) public static extern int SelectObject(nint hDC, int hGdiObject) Parameters hDC nint hGdiObject int Returns int SetEnhMetaFileBits(uint, byte[]) byte转换矢量图 public static extern nint SetEnhMetaFileBits(uint cbBuffer, byte[] lpBuffer) Parameters cbBuffer uint lpBuffer byte[] Returns nint SetEnhMetaFileDescriptionEx(ref nint, string) 设置emf描述 public static void SetEnhMetaFileDescriptionEx(ref nint hMetaFile, string desc) Parameters hMetaFile nint emf文件句柄 desc string 设置描述 Exceptions ArgumentNullException SetViewportExtEx(nint, int, int, ref IntSize) 视口区域的定义 {只能在 MM_ISOTROPIC 或 MM_ANISOTROPIC 模式下使用下面两个函数} public static extern bool SetViewportExtEx(nint hdcRef, int nHeight, int nWidth, ref WindowsAPI.IntSize lpSize) Parameters hdcRef nint nHeight int nWidth int lpSize WindowsAPI.IntSize Returns bool SetWinMetaFileBits(uint, nint, nint, nint) 将一个标准Windows图元文件转换成增强型图元文件 public static extern nint SetWinMetaFileBits(uint nSize, nint lpMeta16Data, nint hdcRef, nint lpMFP) Parameters nSize uint lpMeta16Data数组的长度 lpMeta16Data nint 数组包含了标准图元文件数据. 常用 GetMetaFileBitsEx 或 GetWinMetaFileBits 函数获得 hdcRef nint 用于决定原始格式及图元文件分辨率的一个参考设备场景; 采用显示器分辨率为:Zero lpMFP nint 定义一个图元文件附加参考信息的结构 为null时,会假定使用当前显示器的 MM_ANISOTROPIC 映射模式 Returns nint 错误: Zero; 成功: 返回一个增强型图元emf文件的指针(位于内存中) SetWindowExtEx(nint, int, int, ref IntSize) 逻辑单位设置窗口单位 {只能在 MM_ISOTROPIC 或 MM_ANISOTROPIC 模式下使用下面两个函数} public static extern bool SetWindowExtEx(nint hdcRef, int nHeight, int nWidth, ref WindowsAPI.IntSize lpSize) Parameters hdcRef nint 画布句柄 nHeight int 以逻辑单位表示的新窗口区域的高度 nWidth int 以逻辑单位表示的新窗口区域的宽度 lpSize WindowsAPI.IntSize 保存函数调用前窗口区域尺寸的SIZE结构地址,NULL则表示忽略调用前的尺寸 Returns bool ToByteArray(Image) 矢量图 转换 byte[] public static byte[]? ToByteArray(this Image image) Parameters image Image Returns byte[] ToByteArray(Metafile) 矢量图 转换 byte[] public static byte[]? ToByteArray(this Metafile mf) Parameters mf Metafile Returns byte[] ToMetafile(byte[], Func<Image, bool>) byte[] 转换 矢量图 public static void ToMetafile(byte[] data, Func<Image, bool> task) Parameters data byte[] task Func<Image, bool> 返回值true删除句柄"
  },
  "api/IFoxCAD.Cad.EnhMetaHeader.html": {
    "href": "api/IFoxCAD.Cad.EnhMetaHeader.html",
    "title": "Struct EnhMetaHeader",
    "keywords": "Struct EnhMetaHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public struct EnhMetaHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields bOpenGL public uint bOpenGL Field Value uint cbPixelFormat public uint cbPixelFormat Field Value uint dSignature public uint dSignature Field Value uint iType public uint iType Field Value uint nBytes public uint nBytes Field Value uint nDescription public uint nDescription Field Value uint nHandles public ushort nHandles Field Value ushort nPalEntries public uint nPalEntries Field Value uint nRecords public uint nRecords Field Value uint nSize public int nSize Field Value int nVersion public uint nVersion Field Value uint offDescription public uint offDescription Field Value uint offPixelFormat public uint offPixelFormat Field Value uint rclBounds public WindowsAPI.IntRect rclBounds Field Value WindowsAPI.IntRect rclFrame public WindowsAPI.IntRect rclFrame Field Value WindowsAPI.IntRect sReserved public ushort sReserved Field Value ushort szlDevice public WindowsAPI.IntSize szlDevice Field Value WindowsAPI.IntSize szlMicrometers public WindowsAPI.IntSize szlMicrometers Field Value WindowsAPI.IntSize szlMillimeters public WindowsAPI.IntSize szlMillimeters Field Value WindowsAPI.IntSize Methods Create(nint) 通过emf指针创建 public static EnhMetaHeader Create(nint emf) Parameters emf nint GetEnhMetaFileHeader(nint, uint, nint)参数1的结构体首地址 也就是SetWinMetaFileBits(uint, nint, nint, nint)的返回值 Returns EnhMetaHeader Create(string) 通过wmf创建 public static EnhMetaHeader Create(string wmf) Parameters wmf string Returns EnhMetaHeader ToString() public override string ToString() Returns string"
  },
  "api/IFoxCAD.Cad.EntityBoundingInfo.html": {
    "href": "api/IFoxCAD.Cad.EntityBoundingInfo.html",
    "title": "Class EntityBoundingInfo",
    "keywords": "Class EntityBoundingInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class EntityBoundingInfo Inheritance object EntityBoundingInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors EntityBoundingInfo() public EntityBoundingInfo() Methods GetBoundingInfo(Entity) 获取图元包围盒 public static BoundingInfo GetBoundingInfo(Entity ent) Parameters ent Entity Returns BoundingInfo (左下角,右上角,是否有效)"
  },
  "api/IFoxCAD.Cad.EntityEx.html": {
    "href": "api/IFoxCAD.Cad.EntityEx.html",
    "title": "Class EntityEx",
    "keywords": "Class EntityEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 实体图元扩展类 public static class EntityEx Inheritance object EntityEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetBoundingBoxEx(Entity) 获取图元包围盒 public static BoundingInfo GetBoundingBoxEx(this Entity ent) Parameters ent Entity Returns BoundingInfo 包围盒信息 GetExtents(IEnumerable<Entity>) 获取实体集合的范围 public static Extents3d GetExtents(this IEnumerable<Entity> ents) Parameters ents IEnumerable<Entity> 实体迭代器 Returns Extents3d 实体集合的范围 GetStretchPoints(Entity) 获取拉伸点 public static IEnumerable<Point3d> GetStretchPoints(this Entity ent) Parameters ent Entity 实体 Returns IEnumerable<Point3d> 点集 Mirror(Entity, Plane) 按对称面镜像实体 public static void Mirror(this Entity ent, Plane plane) Parameters ent Entity 实体 plane Plane 对称平面 Mirror(Entity, Point3d) 按对称点镜像实体 public static void Mirror(this Entity ent, Point3d basePoint) Parameters ent Entity 实体 basePoint Point3d 对称点 Mirror(Entity, Point3d, Point3d) 按对称轴镜像实体 public static void Mirror(this Entity ent, Point3d startPoint, Point3d endPoint) Parameters ent Entity 实体 startPoint Point3d 对称轴起点 endPoint Point3d 对称轴终点 Move(Entity, Point3d, Point3d) 移动实体 public static void Move(this Entity ent, Point3d from, Point3d to) Parameters ent Entity 实体 from Point3d 基点 to Point3d 目标点 Move(Entity, Vector3d) 移动实体 public static void Move(this Entity ent, Vector3d vector) Parameters ent Entity 实体 vector Vector3d 向量 Rotation(Entity, Point3d, double) 在XY平面内旋转实体 public static void Rotation(this Entity ent, Point3d center, double angle) Parameters ent Entity 实体 center Point3d 旋转中心 angle double 转角，弧度制，正数为顺时针 Rotation(Entity, Point3d, double, Vector3d) 旋转实体 public static void Rotation(this Entity ent, Point3d center, double angle, Vector3d normal) Parameters ent Entity 实体 center Point3d 旋转中心 angle double 转角，弧度制，正数为顺时针 normal Vector3d 旋转平面的法向矢量 Scale(Entity, Point3d, double) 缩放实体 public static void Scale(this Entity ent, Point3d center, double scaleValue) Parameters ent Entity 实体 center Point3d 缩放基点坐标 scaleValue double 缩放比例"
  },
  "api/IFoxCAD.Cad.Env.DimblkType.html": {
    "href": "api/IFoxCAD.Cad.Env.DimblkType.html",
    "title": "Enum Env.DimblkType",
    "keywords": "Enum Env.DimblkType Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 标注箭头类型 public enum Env.DimblkType Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields ArchTick = 19 建筑标记 BoxBlank = 14 方框 BoxFilled = 13 实心框 Closed = 9 闭合 ClosedBlank = 15 空心闭合 DatumBlank = 17 基准三角形 DatumFilled = 16 实心基准三角形 Defult = 0 实心闭合 Dot = 1 点 DotBlank = 3 空心点 DotSmall = 2 小点 Integral = 18 完整标记 None = 11 无 Oblique = 12 倾斜 Open = 6 打开 Open30 = 8 30度角 Open90 = 7 直角 Origin = 4 原点标记 Origin2 = 5 原点标记2 Small = 10 空心小点"
  },
  "api/IFoxCAD.Cad.Env.OSModeType.html": {
    "href": "api/IFoxCAD.Cad.Env.OSModeType.html",
    "title": "Enum Env.OSModeType",
    "keywords": "Enum Env.OSModeType Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 捕捉模式系统变量类型 [Flags] public enum Env.OSModeType Extension Methods Env.Include(Env.OSModeType, Env.OSModeType) ObjEx.Print(object) ObjEx.PrintLine(object) Fields Appearance = 2048 外观交点 Center = 4 圆心 End = 1 端点 Extension = 4096 延伸 Insert = 64 插入点 Intersection = 32 交点 Middle = 2 中点 Nearest = 512 最近点 Node = 8 节点 None = 0 无 Parallel = 8192 平行 Pedal = 128 垂足 Quadrant = 16 象限点 Quick = 1024 几何中心 Tangent = 256 切点"
  },
  "api/IFoxCAD.Cad.Env.html": {
    "href": "api/IFoxCAD.Cad.Env.html",
    "title": "Class Env",
    "keywords": "Class Env Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 系统管理类 封装了一些系统 osmode;cmdecho;dimblk 系统变量 封装了常用的 文档 编辑器 数据库等对象为静态变量 封装了配置页面的注册表信息获取函数 public static class Env Inheritance object Env Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties CmdActive 获取Cad当前是否有活动命令 public static bool CmdActive { get; } Property Value bool CmdEcho 控制在AutoLISP的command函数运行时AutoCAD是否回显提示和输入， true 为显示， false 为不显示 public static bool CmdEcho { get; set; } Property Value bool Database 当前的数据库 public static Database Database { get; } Property Value Database Dimblk 标注箭头属性 public static Env.DimblkType Dimblk { get; set; } Property Value Env.DimblkType Document 当前文档 public static Document Document { get; } Property Value Document Editor 编辑器对象 public static Editor Editor { get; } Property Value Editor GsManager 图形管理器 public static Manager GsManager { get; } Property Value Manager LastPoint 读写系统变量LastPoint的坐标(UCS) public static Point3d LastPoint { get; set; } Property Value Point3d OSMode 捕捉模式系统变量 public static Env.OSModeType OSMode { get; set; } Property Value Env.OSModeType OrthoMode 控制在光标是否为正交模式， true 为打开正交， false 为关闭正交 public static bool OrthoMode { get; set; } Property Value bool Methods DelayUpdateLayLockFade() 延迟更新图层锁定淡显状态 在有锁定或解锁图层的命令的末尾使用 public static void DelayUpdateLayLockFade() GetAcadVersion() 获取cad年份 public static int GetAcadVersion() Returns int Exceptions NotImplementedException 超出年份就报错 GetAcapVersionDll(string) 获取带cad版本号的dll public static string GetAcapVersionDll(string str = \"acdb\") Parameters str string dll名字 Returns string dll的前面 GetCurrentProfileProperty(string, string) 获取当前配置的数据 public static object GetCurrentProfileProperty(string subSectionName, string propertyName) Parameters subSectionName string 小节名 propertyName string 数据名 Returns object 对象 GetDefaultDwgVersion() 获取当前配置文件的保存版本 public static DwgVersion GetDefaultDwgVersion() Returns DwgVersion GetDialogSection(object) 获取对话框配置的数据 public static IConfigurationSection GetDialogSection(object dialog) Parameters dialog object 对话框对象 Returns IConfigurationSection 配置项 GetDimblkId(DimblkType) 获取标注箭头ID public static ObjectId GetDimblkId(Env.DimblkType dimblk) Parameters dimblk Env.DimblkType 标注箭头类型 Returns ObjectId 箭头ID GetDimblkName(DimblkType) 获取标注箭头名 public static string GetDimblkName(Env.DimblkType dimblk) Parameters dimblk Env.DimblkType 标注箭头类型 Returns string 箭头名 GetEnv(string?) 读取acad环境变量 也能获取win环境变量 public static string GetEnv(string? name) Parameters name string 变量名 Returns string 返回值从不为null,需判断Empty GetGlobalSection(string) 获取公共配置的数据 public static IConfigurationSection GetGlobalSection(string propertyName) Parameters propertyName string 数据名 Returns IConfigurationSection 配置项 GetVar(string?) 获取cad系统变量 public static object? GetVar(string? varName) Parameters varName string 变量名 Returns object 变量值 Include(OSModeType, OSModeType) 捕捉模式osm1是否包含osm2 public static bool Include(this Env.OSModeType osm1, Env.OSModeType osm2) Parameters osm1 Env.OSModeType 原模式 osm2 Env.OSModeType 要比较的模式 Returns bool 包含时返回 true，不包含时返回 false IsDxfVersion(DwgVersion) 是否为dxf版本号 public static bool IsDxfVersion(this DwgVersion dwgVersion) Parameters dwgVersion DwgVersion Returns bool IsUcs() 判断当前是否在UCS坐标下 public static bool IsUcs() Returns bool Bool Print(object) 命令行打印，会自动调用对象的toString函数 public static void Print(object message) Parameters message object 要打印的对象 Printl(object) 命令行打印，会自动调用对象的toString函数,在打印内容前添加换行 public static void Printl(object message) Parameters message object 要打印的对象 SaveCadVar(Dictionary<string, string>) 设置新系统变量,返回现有系统变量 public static Dictionary<string, string> SaveCadVar(Dictionary<string, string> args) Parameters args Dictionary<string, string> 设置的变量词典 Returns Dictionary<string, string> 返回现有变量词典,然后下次就可以利用它进行设置回来了 SetEnv(string?, string?) 设置acad环境变量 它是不会报错的,但是直接设置会写入注册表的, 如果是设置高低版本cad不同的变量,建议先读取判断再设置 public static int SetEnv(string? name, string? var) Parameters name string 变量名 var string 变量值 Returns int SetVar(string, object, bool) 设置cad系统变量 0x01 建议先获取现有变量值和设置的是否相同,否则直接设置会发生异常 0x02 建议锁文档,否则 Psltscale 设置发生异常 发生异常的时候vs输出窗口会打印一下,但是如果不介意也没啥问题 public static void SetVar(string varName, object value, bool echo = true) Parameters varName string 变量名 value object 变量值 echo bool 输出异常,默认true;此设置仅为打印到命令栏,无法控制vs输出 SetVarEx(string, string) 设置cad系统变量 提供一个反序列化后,无cad异常输出的功能 注意,您需要再此执行时候设置文档锁 否则也将导致修改数据库异常 public static object? SetVarEx(string key, string value) Parameters key string value string Returns object 成功返回当前值,失败null Exceptions ArgumentNullException"
  },
  "api/IFoxCAD.Cad.ExportDirectory.html": {
    "href": "api/IFoxCAD.Cad.ExportDirectory.html",
    "title": "Class ExportDirectory",
    "keywords": "Class ExportDirectory Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 输出表 public class ExportDirectory Inheritance object ExportDirectory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ExportDirectory() public ExportDirectory() Fields AddressOfFunctions public byte[] AddressOfFunctions Field Value byte[] AddressOfFunctionsList public ArrayList AddressOfFunctionsList Field Value ArrayList AddressOfNameOrdinals public byte[] AddressOfNameOrdinals Field Value byte[] AddressOfNameOrdinalsList public ArrayList AddressOfNameOrdinalsList Field Value ArrayList AddressOfNames public byte[] AddressOfNames Field Value byte[] AddressOfNamesList public ArrayList AddressOfNamesList Field Value ArrayList Base public byte[] Base Field Value byte[] Characteristics public byte[] Characteristics Field Value byte[] FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long FunctionNamesByte 函数指针名称集合 public List<byte[]> FunctionNamesByte Field Value List<byte[]> MajorVersion public byte[] MajorVersion Field Value byte[] MinorVersion public byte[] MinorVersion Field Value byte[] Name public byte[] Name Field Value byte[] NumberOfFunctions public byte[] NumberOfFunctions Field Value byte[] NumberOfNames public byte[] NumberOfNames Field Value byte[] TimeDateStamp public byte[] TimeDateStamp Field Value byte[] Methods FunctionNames() 获取函数名 public HashSet<string> FunctionNames() Returns HashSet<string>"
  },
  "api/IFoxCAD.Cad.FontTTF.html": {
    "href": "api/IFoxCAD.Cad.FontTTF.html",
    "title": "Enum FontTTF",
    "keywords": "Enum FontTTF Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum FontTTF Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Arial = 3 Romans = 4 仿宋 = 1 仿宋GB2312 = 2 宋体 = 0"
  },
  "api/IFoxCAD.Cad.GeometryEx.html": {
    "href": "api/IFoxCAD.Cad.GeometryEx.html",
    "title": "Class GeometryEx",
    "keywords": "Class GeometryEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 图形扩展类 public static class GeometryEx Inheritance object GeometryEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ConvexHull(List<Point2d>) 获取点集的凸包 public static List<Point2d?>? ConvexHull(this List<Point2d> points) Parameters points List<Point2d> 点集 Returns List<Point2d> 凸包 Draw(Geometry, params Drawable[]) 重绘 public static void Draw(this Geometry geometry, params Drawable[] drawables) Parameters geometry Geometry 图形界面几何 drawables Drawable[] 可绘制的对象列表 Draw(Geometry, IEnumerable<Drawable>) 重绘 public static void Draw(this Geometry geometry, IEnumerable<Drawable> drawables) Parameters geometry Geometry 图形界面几何 drawables IEnumerable<Drawable> 可绘制的对象列表 GetArea(Point2d, Point2d, Point2d) 计算三点围成的三角形的真实面积 public static double GetArea(this Point2d ptBase, Point2d pt1, Point2d pt2) Parameters ptBase Point2d 基准点 pt1 Point2d 第一点 pt2 Point2d 第二点 Returns double 三点围成的三角形的真实面积 GetArea(Vector2d, Vector2d) 计算两个二维向量围成的平行四边形的真实面积 public static double GetArea(Vector2d vecBase, Vector2d vec) Parameters vecBase Vector2d 基向量 vec Vector2d 向量 Returns double 真实面积 GetArea(IEnumerable<Point2d>) 计算点集的真实面积 public static double GetArea(this IEnumerable<Point2d> pnts) Parameters pnts IEnumerable<Point2d> 点集 Returns double 面积 GetMinCircle(Point2d?, Point2d?, Point2d?, Point2d?, out LoopList<Point2d?>?) 按四点返回最小包围圆 public static CircularArc2d? GetMinCircle(Point2d? pt1, Point2d? pt2, Point2d? pt3, Point2d? pt4, out LoopList<Point2d?>? ptlst) Parameters pt1 Point2d 基准点 pt2 Point2d 基准点 pt3 Point2d 基准点 pt4 Point2d 基准点 ptlst LoopList<Point2d> 输出圆上的点 Returns CircularArc2d 解析类圆对象 GetMinCircle(Point2d, Point2d, Point2d, out LoopList<Point2d>) 按三点返回最小包围圆 public static CircularArc2d GetMinCircle(Point2d pt1, Point2d pt2, Point2d pt3, out LoopList<Point2d> ptlst) Parameters pt1 Point2d 基准点 pt2 Point2d 基准点 pt3 Point2d 基准点 ptlst LoopList<Point2d> 输出圆上的点 Returns CircularArc2d 解析类圆对象 GetMinCircle(Point2d, Point2d, out LoopList<Point2d>) 按两点返回最小包围圆 public static CircularArc2d GetMinCircle(Point2d pt1, Point2d pt2, out LoopList<Point2d> ptlst) Parameters pt1 Point2d 基准点 pt2 Point2d 基准点 ptlst LoopList<Point2d> 输出圆上的点 Returns CircularArc2d 解析类圆对象 GetMinCircle(List<Point2d>, out LoopList<Point2d?>?) 按点集返回最小包围圆 public static CircularArc2d? GetMinCircle(this List<Point2d> pnts, out LoopList<Point2d?>? ptlst) Parameters pnts List<Point2d> 点集 ptlst LoopList<Point2d> 输出圆上的点 Returns CircularArc2d 解析类圆对象 GetScaleMatrix(Point3d, double, double, double) 返回不等比例变换矩阵 public static Matrix3d GetScaleMatrix(this Point3d point, double x, double y, double z) Parameters point Point3d 基点 x double x方向比例 y double y方向比例 z double z方向比例 Returns Matrix3d 三维矩阵 GetSize(Extents3d) 获取坐标范围的大小 public static Size GetSize(this Extents3d ext) Parameters ext Extents3d 坐标范围 Returns Size 尺寸对象 IsClockWise(Point2d, Point2d, Point2d) 判断三点是否为逆时针，也就是说判断三点是否为左转 public static OrientationType IsClockWise(this Point2d ptBase, Point2d pt1, Point2d pt2) Parameters ptBase Point2d 基点 pt1 Point2d 第一点 pt2 Point2d 第二点 Returns OrientationType OrientationType 类型值 IsClockWise(Vector2d, Vector2d) 判断两个二维向量是否左转 public static OrientationType IsClockWise(Vector2d vecBase, Vector2d vec) Parameters vecBase Vector2d 基向量 vec Vector2d 向量 Returns OrientationType OrientationType 类型值 IsClockWise(IEnumerable<Point2d>) 判断点集的点序 public static OrientationType IsClockWise(this IEnumerable<Point2d> pnts) Parameters pnts IEnumerable<Point2d> 点集 Returns OrientationType OrientationType 类型值 PointOnRegion(IEnumerable<Point2d>, Point2d) 判断点与多边形的关系 public static PointOnRegionType PointOnRegion(this IEnumerable<Point2d> pts, Point2d pt) Parameters pts IEnumerable<Point2d> 多边形顶点集合 pt Point2d 点 Returns PointOnRegionType 点与多边形的关系 PointOnRegion(IEnumerable<Point3d>, Point3d) 判断点与多边形的关系 public static PointOnRegionType PointOnRegion(this IEnumerable<Point3d> pts, Point3d pt) Parameters pts IEnumerable<Point3d> 多边形顶点集合 pt Point3d 点 Returns PointOnRegionType 点与多边形的关系 Trans(Point3d, CoordinateSystemCode, CoordinateSystemCode) 模拟 trans 函数 public static Point3d Trans(this Point3d point, CoordinateSystemCode from, CoordinateSystemCode to) Parameters point Point3d 点 from CoordinateSystemCode 源坐标系 to CoordinateSystemCode 目标坐标系 Returns Point3d 变换后的点 Trans(Vector3d, CoordinateSystemCode, CoordinateSystemCode) 模拟 trans 函数 public static Vector3d Trans(this Vector3d vec, CoordinateSystemCode from, CoordinateSystemCode to) Parameters vec Vector3d 向量 from CoordinateSystemCode 源坐标系 to CoordinateSystemCode 目标坐标系 Returns Vector3d 变换后的向量 Ucs2Wcs(Point3d) ucs到wcs的点变换 public static Point3d Ucs2Wcs(this Point3d point) Parameters point Point3d 点 Returns Point3d 变换后的点 Ucs2Wcs(Vector3d) ucs到wcs的向量变换 public static Vector3d Ucs2Wcs(this Vector3d vec) Parameters vec Vector3d 向量 Returns Vector3d 变换后的向量 Wcs2Dcs(Point3d, bool) wcs到dcs的点变换 public static Point3d Wcs2Dcs(this Point3d point, bool atPaperSpace) Parameters point Point3d 点 atPaperSpace bool 是否为图纸空间 Returns Point3d 变换后的点 Wcs2Dcs(Vector3d, bool) wcs到dcs的向量变换 public static Vector3d Wcs2Dcs(this Vector3d vec, bool atPaperSpace) Parameters vec Vector3d 向量 atPaperSpace bool 是否为图纸空间 Returns Vector3d 变换后的向量 Wcs2Ucs(Point3d) wcs到ucs的点变换 public static Point3d Wcs2Ucs(this Point3d point) Parameters point Point3d 点 Returns Point3d 变换后的点 Wcs2Ucs(Vector3d) wcs到ucs的向量变换 public static Vector3d Wcs2Ucs(this Vector3d vec) Parameters vec Vector3d 向量 Returns Vector3d 变换后的向量"
  },
  "api/IFoxCAD.Cad.GetMethodErrorNum.html": {
    "href": "api/IFoxCAD.Cad.GetMethodErrorNum.html",
    "title": "Enum GetMethodErrorNum",
    "keywords": "Enum GetMethodErrorNum Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll [Flags] public enum GetMethodErrorNum : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields NoFuncName = 2 NoModule = 1 Ok = 0"
  },
  "api/IFoxCAD.Cad.GetPeMethodException.html": {
    "href": "api/IFoxCAD.Cad.GetPeMethodException.html",
    "title": "Class GetPeMethodException",
    "keywords": "Class GetPeMethodException Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 错误信息 public class GetPeMethodException : ApplicationException, ISerializable Inheritance object Exception ApplicationException GetPeMethodException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors GetPeMethodException(int, string) public GetPeMethodException(int errorNum, string msg) Parameters errorNum int msg string GetPeMethodException(string) public GetPeMethodException(string msg) Parameters msg string GetPeMethodException(string, Exception) public GetPeMethodException(string msg, Exception innerException) Parameters msg string innerException Exception Fields ErrorMsg public string? ErrorMsg Field Value string ErrorNum public int ErrorNum Field Value int InnerException1 public Exception? InnerException1 Field Value Exception"
  },
  "api/IFoxCAD.Cad.Graph.html": {
    "href": "api/IFoxCAD.Cad.Graph.html",
    "title": "Class Graph",
    "keywords": "Class Graph Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 无权无向图实现 IEnumerable 枚举所有顶点; public sealed class Graph : IGraph, IEnumerable<IGraphVertex>, IEnumerable Inheritance object Graph Implements IGraph IEnumerable<IGraphVertex> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors Graph() public Graph() Properties VerticesAsEnumberable 节点迭代器 public IEnumerable<IGraphVertex> VerticesAsEnumberable { get; } Property Value IEnumerable<IGraphVertex> VerticesCount 节点数量 public int VerticesCount { get; } Property Value int Methods AddEdge(Curve3d) 向该图添加一个边; public void AddEdge(Curve3d curve) Parameters curve Curve3d AddVertex(Point3d) 向该图添加一个新顶点,但是无边; public IGraphVertex AddVertex(Point3d pt) Parameters pt Point3d 点 Returns IGraphVertex 创建的顶点 Clone() 克隆此图;目测是深克隆 public Graph Clone() Returns Graph ContainsVertex(IGraphVertex) 是否存在顶点,此函数目前未发现有啥用 public bool ContainsVertex(IGraphVertex value) Parameters value IGraphVertex 顶点 Returns bool 存在顶点返回 true,反之返回 false GetAdjacencyEdge(IGraphVertex) 获取顶点的邻接边表 public HashSet<IEdge> GetAdjacencyEdge(IGraphVertex vertex) Parameters vertex IGraphVertex 顶点 Returns HashSet<IEdge> 邻接边表 GetAdjacencyList(IGraphVertex) 获取顶点的邻接表 public HashSet<IGraphVertex> GetAdjacencyList(IGraphVertex vertex) Parameters vertex IGraphVertex 顶点 Returns HashSet<IGraphVertex> 邻接表 GetCurves(List<IGraphVertex>) 根据顶点表获取曲线集合 public List<Curve3d> GetCurves(List<IGraphVertex> graphVertices) Parameters graphVertices List<IGraphVertex> 顶点表 Returns List<Curve3d> 曲线表 GetEdge(IGraphVertex, IGraphVertex) 获取边 public IEdge? GetEdge(IGraphVertex source, IGraphVertex dest) Parameters source IGraphVertex 起点 dest IGraphVertex 终点 Returns IEdge 边 Exceptions ArgumentException 传入的点不在图中时抛出参数异常 GetEnumerator() 节点迭代器 public IEnumerator GetEnumerator() Returns IEnumerator HasEdge(IGraphVertex, IGraphVertex) 我们在给定的来源和目的地之间是否有边？ public bool HasEdge(IGraphVertex source, IGraphVertex dest) Parameters source IGraphVertex 起点 dest IGraphVertex 终点 Returns bool 有边返回 true,反之返回 false RemoveEdge(Curve3d) 从此图中删除一条边; public void RemoveEdge(Curve3d curve) Parameters curve Curve3d 曲线 RemoveVertex(Point3d) 从此图中删除现有顶点; public void RemoveVertex(Point3d pt) Parameters pt Point3d 点 ToReadable() 输出点的邻接表的可读字符串 public string ToReadable() Returns string"
  },
  "api/IFoxCAD.Cad.GraphEdge.html": {
    "href": "api/IFoxCAD.Cad.GraphEdge.html",
    "title": "Class GraphEdge",
    "keywords": "Class GraphEdge Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 无向图中边的定义 public sealed class GraphEdge : IEdge, IEquatable<GraphEdge> Inheritance object GraphEdge Implements IEdge IEquatable<GraphEdge> Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors GraphEdge(IGraphVertex, Curve3d) 无向图中边的定义 public GraphEdge(IGraphVertex target, Curve3d edge) Parameters target IGraphVertex 下一点 edge Curve3d 下一点之间的曲线 Properties TargetEdge 边 public Curve3d TargetEdge { get; set; } Property Value Curve3d TargetVertex 顶点 public IGraphVertex TargetVertex { get; set; } Property Value IGraphVertex Methods Equals(GraphEdge) 是否相等 public bool Equals(GraphEdge other) Parameters other GraphEdge Returns bool Equals(object) 是否相等 public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() 获取hashcode public override int GetHashCode() Returns int Operators operator ==(GraphEdge, GraphEdge) 相等 public static bool operator ==(GraphEdge person1, GraphEdge person2) Parameters person1 GraphEdge person2 GraphEdge Returns bool operator !=(GraphEdge, GraphEdge) 不相等 public static bool operator !=(GraphEdge person1, GraphEdge person2) Parameters person1 GraphEdge person2 GraphEdge Returns bool"
  },
  "api/IFoxCAD.Cad.GraphVertex.html": {
    "href": "api/IFoxCAD.Cad.GraphVertex.html",
    "title": "Class GraphVertex",
    "keywords": "Class GraphVertex Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 邻接表图实现的顶点; IEnumerable 枚举所有邻接点; public sealed class GraphVertex : IGraphVertex, IComparable, IEquatable<IGraphVertex>, IComparable<IGraphVertex> Inheritance object GraphVertex Implements IGraphVertex IComparable IEquatable<IGraphVertex> IComparable<IGraphVertex> Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors GraphVertex(Point3d, int) 邻接表图实现的顶点 public GraphVertex(Point3d value, int index) Parameters value Point3d 点 index int 所在节点索引 Properties Data 数据 public Point3d Data { get; set; } Property Value Point3d Index 索引 public int Index { get; set; } Property Value int Methods CompareTo(IGraphVertex) 比较大小 public int CompareTo(IGraphVertex other) Parameters other IGraphVertex Returns int CompareTo(object) 比较大小 public int CompareTo(object obj) Parameters obj object Returns int Exceptions ArgumentException Equals(IGraphVertex) 是否相等 public bool Equals(IGraphVertex other) Parameters other IGraphVertex Returns bool Equals(object) 是否相等 public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() 计算hashcode public override int GetHashCode() Returns int Operators operator ==(GraphVertex, GraphVertex) 相等 public static bool operator ==(GraphVertex person1, GraphVertex person2) Parameters person1 GraphVertex person2 GraphVertex Returns bool operator !=(GraphVertex, GraphVertex) 不相等 public static bool operator !=(GraphVertex person1, GraphVertex person2) Parameters person1 GraphVertex person2 GraphVertex Returns bool"
  },
  "api/IFoxCAD.Cad.HatchConverter.html": {
    "href": "api/IFoxCAD.Cad.HatchConverter.html",
    "title": "Class HatchConverter",
    "keywords": "Class HatchConverter Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 填充边界转换器 public class HatchConverter Inheritance object HatchConverter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors HatchConverter(Hatch) 填充边界转换器 public HatchConverter(Hatch hatch) Parameters hatch Hatch 需要转化的Hatch对象 Fields BoundaryIds 填充边界id(生成的/已存在反应器的直接提取) public List<ObjectId> BoundaryIds Field Value List<ObjectId> Properties OldHatchId 外部只能调用id,否则跨事务造成错误 public ObjectId OldHatchId { get; } Property Value ObjectId Methods CreateBoundary(List<Entity>) 创建边界图元 public void CreateBoundary(List<Entity> outEnts) Parameters outEnts List<Entity> 返回图元 CreateBoundarysAndHatchToMsPs(BlockTableRecord, bool, bool) 创建边界图元和新填充到当前空间 public ObjectId CreateBoundarysAndHatchToMsPs(BlockTableRecord btrOfAddEntitySpace, bool boundaryAssociative = true, bool createHatchFlag = true) Parameters btrOfAddEntitySpace BlockTableRecord boundaryAssociative bool 边界关联 createHatchFlag bool 是否创建填充,false则只创建边界 Returns ObjectId 新填充id,边界在BoundaryIds获取 GetBoundarysData() 提取边界信息 public void GetBoundarysData()"
  },
  "api/IFoxCAD.Cad.HatchEx.html": {
    "href": "api/IFoxCAD.Cad.HatchEx.html",
    "title": "Class HatchEx",
    "keywords": "Class HatchEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class HatchEx Inheritance object HatchEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ForEach(Hatch, Action<HatchLoop>) 遍历填充每条边 public static void ForEach(this Hatch hatch, Action<HatchLoop> action) Parameters hatch Hatch action Action<HatchLoop>"
  },
  "api/IFoxCAD.Cad.HatchInfo.GradientName.html": {
    "href": "api/IFoxCAD.Cad.HatchInfo.GradientName.html",
    "title": "Enum HatchInfo.GradientName",
    "keywords": "Enum HatchInfo.GradientName Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 渐变色填充的图案名称 public enum HatchInfo.GradientName Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Curved = 7 抛物面状渐变 Cylinder = 1 圆柱状渐变 Hemisperical = 5 半球状渐变 Incurved = 8 反抛物面状渐变 InvHemisperical = 6 反半球状渐变 Invcylinder = 2 反圆柱状渐变 Invspherical = 4 反球状渐变 Linear = 0 线状渐变 Spherical = 3 球状渐变"
  },
  "api/IFoxCAD.Cad.HatchInfo.html": {
    "href": "api/IFoxCAD.Cad.HatchInfo.html",
    "title": "Class HatchInfo",
    "keywords": "Class HatchInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 图案填充 public class HatchInfo Inheritance object HatchInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors HatchInfo(bool, Point2d?, double, double) 图案填充 public HatchInfo(bool boundaryAssociative = true, Point2d? hatchOrigin = null, double hatchScale = 1, double hatchAngle = 0) Parameters boundaryAssociative bool 关联边界 hatchOrigin Point2d? 填充原点 hatchScale double 比例 hatchAngle double 角度 HatchInfo(IEnumerable<ObjectId>, bool, Point2d?, double, double) 图案填充 public HatchInfo(IEnumerable<ObjectId> boundaryIds, bool boundaryAssociative = true, Point2d? hatchOrigin = null, double hatchScale = 1, double hatchAngle = 0) Parameters boundaryIds IEnumerable<ObjectId> 边界 boundaryAssociative bool 关联边界 hatchOrigin Point2d? 填充原点 hatchScale double 比例 hatchAngle double 角度 Methods Action(Action<Hatch>) 执行图元的属性修改 public HatchInfo Action(Action<Hatch> action) Parameters action Action<Hatch> 扔出填充实体 Returns HatchInfo AppendLoop(Point2dCollection, DoubleCollection, BlockTableRecord, HatchLoopTypes) 加入边界(仿高版本的填充函数) public HatchInfo AppendLoop(Point2dCollection pts, DoubleCollection bluges, BlockTableRecord btrOfAddEntitySpace, HatchLoopTypes hatchLoopTypes = 0) Parameters pts Point2dCollection 点集 bluges DoubleCollection 凸度集 btrOfAddEntitySpace BlockTableRecord 加入此空间 hatchLoopTypes HatchLoopTypes 加入方式 Returns HatchInfo Build(BlockTableRecord) 构建 public ObjectId Build(BlockTableRecord btrOfAddEntitySpace) Parameters btrOfAddEntitySpace BlockTableRecord 将填充加入此空间 Returns ObjectId ClearBoundary() 清空边界集合 public HatchInfo ClearBoundary() Returns HatchInfo EraseBoundary() 删除边界图元 public HatchInfo EraseBoundary() Returns HatchInfo Mode1PreDefined(string) 模式1:预定义 public HatchInfo Mode1PreDefined(string name) Parameters name string Returns HatchInfo Mode2UserDefined(bool) 模式2:用户定义 public HatchInfo Mode2UserDefined(bool patternDouble = true) Parameters patternDouble bool 是否双向 Returns HatchInfo Mode3UserDefined(string) 模式3:自定义 public HatchInfo Mode3UserDefined(string name) Parameters name string Returns HatchInfo Mode4Gradient(GradientName, Color, Color, float, float, bool) 模式4:渐变填充 public HatchInfo Mode4Gradient(HatchInfo.GradientName name, Color colorStart, Color colorEnd, float gradientShift = 0, float shadeTintValue = 0, bool gradientOneColorMode = false) Parameters name HatchInfo.GradientName 渐变填充名称 colorStart Color 渐变色起始颜色 colorEnd Color 渐变色结束颜色 gradientShift float 渐变移动 shadeTintValue float 色调值 gradientOneColorMode bool 单色true双色false Returns HatchInfo"
  },
  "api/IFoxCAD.Cad.IEdge.html": {
    "href": "api/IFoxCAD.Cad.IEdge.html",
    "title": "Interface IEdge",
    "keywords": "Interface IEdge Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 无向图边 public interface IEdge Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Properties TargetEdge 边 Curve3d TargetEdge { get; } Property Value Curve3d TargetVertex 目标顶点 IGraphVertex TargetVertex { get; } Property Value IGraphVertex"
  },
  "api/IFoxCAD.Cad.IFoxAutoGo.html": {
    "href": "api/IFoxCAD.Cad.IFoxAutoGo.html",
    "title": "Interface IFoxAutoGo",
    "keywords": "Interface IFoxAutoGo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 加载时自动执行接口 public interface IFoxAutoGo Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Methods Initialize() void Initialize() SequenceId() Sequence SequenceId() Returns Sequence Terminate() void Terminate()"
  },
  "api/IFoxCAD.Cad.IFoxInitialize.html": {
    "href": "api/IFoxCAD.Cad.IFoxInitialize.html",
    "title": "Class IFoxInitialize",
    "keywords": "Class IFoxInitialize Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 加载时自动执行特性 [AttributeUsage(AttributeTargets.Method)] public class IFoxInitialize : Attribute Inheritance object Attribute IFoxInitialize Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors IFoxInitialize(Sequence, bool) 用于初始化和结束回收 public IFoxInitialize(Sequence sequence = Sequence.Last, bool isInitialize = true) Parameters sequence Sequence 优先级 isInitialize bool true用于初始化;false用于结束回收"
  },
  "api/IFoxCAD.Cad.IGraph.html": {
    "href": "api/IFoxCAD.Cad.IGraph.html",
    "title": "Interface IGraph",
    "keywords": "Interface IGraph Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 无向图 public interface IGraph Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Properties ReferenceVertex 当前的节点 IGraphVertex? ReferenceVertex { get; } Property Value IGraphVertex VerticesAsEnumberable 顶点的迭代器 IEnumerable<IGraphVertex> VerticesAsEnumberable { get; } Property Value IEnumerable<IGraphVertex> VerticesCount 顶点的数量 int VerticesCount { get; } Property Value int Methods Clone() 图克隆函数 IGraph Clone() Returns IGraph ContainsVertex(IGraphVertex) 是否存在顶点 bool ContainsVertex(IGraphVertex key) Parameters key IGraphVertex 顶点键 Returns bool GetAdjacencyEdge(IGraphVertex) 邻接边表 HashSet<IEdge> GetAdjacencyEdge(IGraphVertex vertex) Parameters vertex IGraphVertex Returns HashSet<IEdge> GetAdjacencyList(IGraphVertex) 邻接表 HashSet<IGraphVertex> GetAdjacencyList(IGraphVertex vertex) Parameters vertex IGraphVertex Returns HashSet<IGraphVertex> GetEdge(IGraphVertex, IGraphVertex) 获取边 IEdge? GetEdge(IGraphVertex source, IGraphVertex dest) Parameters source IGraphVertex dest IGraphVertex Returns IEdge HasEdge(IGraphVertex, IGraphVertex) 是否有边 bool HasEdge(IGraphVertex source, IGraphVertex destination) Parameters source IGraphVertex 源顶点 destination IGraphVertex 目的顶点 Returns bool RemoveEdge(Curve3d) 删除边 void RemoveEdge(Curve3d curve) Parameters curve Curve3d 曲线 RemoveVertex(Point3d) 删除节点 void RemoveVertex(Point3d pt) Parameters pt Point3d 节点的坐标"
  },
  "api/IFoxCAD.Cad.IGraphVertex.html": {
    "href": "api/IFoxCAD.Cad.IGraphVertex.html",
    "title": "Interface IGraphVertex",
    "keywords": "Interface IGraphVertex Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 无向图顶点 public interface IGraphVertex : IComparable Inherited Members IComparable.CompareTo(object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Properties Data 顶点的数据 Point3d Data { get; } Property Value Point3d Index 顶点的键 int Index { get; set; } Property Value int"
  },
  "api/IFoxCAD.Cad.IXrefBindModes.html": {
    "href": "api/IFoxCAD.Cad.IXrefBindModes.html",
    "title": "Interface IXrefBindModes",
    "keywords": "Interface IXrefBindModes Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public interface IXrefBindModes Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Methods Bind() 绑定 void Bind() Detach() 拆离 void Detach() Reload() 重载 void Reload() Unload() 卸载 void Unload()"
  },
  "api/IFoxCAD.Cad.IdleAction.html": {
    "href": "api/IFoxCAD.Cad.IdleAction.html",
    "title": "Class IdleAction",
    "keywords": "Class IdleAction Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 空闲执行 by DYH 20230114 public static class IdleAction Inheritance object IdleAction Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Count 未处理的委托数量 public static int Count { get; } Property Value int Methods Add(Action) 添加空闲执行委托 public static void Add(Action action) Parameters action Action 委托"
  },
  "api/IFoxCAD.Cad.ImportDirectory.ImportDate.FunctionList.html": {
    "href": "api/IFoxCAD.Cad.ImportDirectory.ImportDate.FunctionList.html",
    "title": "Class ImportDirectory.ImportDate.FunctionList",
    "keywords": "Class ImportDirectory.ImportDate.FunctionList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ImportDirectory.ImportDate.FunctionList Inheritance object ImportDirectory.ImportDate.FunctionList Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors FunctionList() public FunctionList() Fields FunctionHead public byte[] FunctionHead Field Value byte[] FunctionName public byte[]? FunctionName Field Value byte[] OriginalFirst public byte[] OriginalFirst Field Value byte[]"
  },
  "api/IFoxCAD.Cad.ImportDirectory.ImportDate.html": {
    "href": "api/IFoxCAD.Cad.ImportDirectory.ImportDate.html",
    "title": "Class ImportDirectory.ImportDate",
    "keywords": "Class ImportDirectory.ImportDate Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ImportDirectory.ImportDate Inheritance object ImportDirectory.ImportDate Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ImportDate() public ImportDate() Fields DLLFunctionList public ArrayList DLLFunctionList Field Value ArrayList DLLName public byte[]? DLLName Field Value byte[] FirstThunk public byte[] FirstThunk Field Value byte[] ForwarderChain public byte[] ForwarderChain Field Value byte[] Name public byte[] Name Field Value byte[] OriginalFirstThunk public byte[] OriginalFirstThunk Field Value byte[] TimeDateStamp public byte[] TimeDateStamp Field Value byte[]"
  },
  "api/IFoxCAD.Cad.ImportDirectory.html": {
    "href": "api/IFoxCAD.Cad.ImportDirectory.html",
    "title": "Class ImportDirectory",
    "keywords": "Class ImportDirectory Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 输入表 public class ImportDirectory Inheritance object ImportDirectory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ImportDirectory() public ImportDirectory() Fields FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long ImportList public ArrayList ImportList Field Value ArrayList"
  },
  "api/IFoxCAD.Cad.JigEx.html": {
    "href": "api/IFoxCAD.Cad.JigEx.html",
    "title": "Class JigEx",
    "keywords": "Class JigEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class JigEx : DrawJig, IDisposable Inheritance object JigEx Implements IDisposable Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors JigEx(Action<Point3d, Queue<Entity>>, double) 在界面绘制图元 public JigEx(Action<Point3d, Queue<Entity>> action = null, double tolerance = 1E-06) Parameters action Action<Point3d, Queue<Entity>> 用来频繁执行的回调: Autodesk.AutoCAD.Geometry.Point3d鼠标点; Queue加入新建的图元,鼠标采样期间会Dispose图元的; 所以已经在数据库图元利用事件加入,不要在此加入; tolerance double 鼠标移动的容差 Fields DimensionEntitys 注释数据,可以在缩放的时候不受影响 public DynamicDimensionDataCollection DimensionEntitys Field Value DynamicDimensionDataCollection MousePointWcsLast 最后的鼠标点,用来确认长度 public Point3d MousePointWcsLast Field Value Point3d Properties Entitys 最后的图元,用来生成 public Entity[] Entitys { get; } Property Value Entity[] IsDisposed public bool IsDisposed { get; } Property Value bool Methods AddEntityToMsPs(BlockTableRecord, IEnumerable<Entity>?) 最后一次的图元加入数据库 public IEnumerable<ObjectId?>? AddEntityToMsPs(BlockTableRecord btrOfAddEntitySpace, IEnumerable<Entity>? removeEntity = null) Parameters btrOfAddEntitySpace BlockTableRecord 加入此空间 removeEntity IEnumerable<Entity> 不生成的图元用于排除,例如刷新时候的提示文字 Returns IEnumerable<ObjectId> 加入数据库的id集合 DatabaseEntityDraw(WorldDrawEvent) 重绘已在数据库的图元 0x01 此处不加入newEntity的,它们在构造函数的参数回调处加入,它们会进行频繁new和Dispose从而避免遗忘释放 0x02 此处用于重绘已经在数据的图元 0x03 此处用于图元亮显暗显,因为会被重绘冲刷掉所以独立出来不重绘,它们也往往已经存在数据库的 public void DatabaseEntityDraw(WorldDrawEvent action) Parameters action WorldDrawEvent Remarks newEntity只会存在一个图元队列中,而数据库图元可以分多个集合 例如: 集合A亮显时 集合B暗显/集合B亮显时 集合A暗显,所以我没有设计多个\"数据库图元集合\"存放,而是由用户在构造函数外自行创建 Dispose() 手动调用释放 public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Drag() 执行 public PromptResult Drag() Returns PromptResult Finalize() 析构函数调用释放 protected override void Finalize() GetDynamicDimensionData(double) 重写注释数据 protected override DynamicDimensionDataCollection GetDynamicDimensionData(double dimScale) Parameters dimScale double Returns DynamicDimensionDataCollection Sampler(JigPrompts) 鼠标采样器 protected override SamplerStatus Sampler(JigPrompts prompts) Parameters prompts JigPrompts Returns SamplerStatus 返回状态:令频繁刷新结束 SetOptions(Point3d, CursorType, string, bool) 鼠标配置:基点 public JigPromptPointOptions SetOptions(Point3d basePoint, CursorType cursorType = 2, string msg = \"点选第二点\", bool orthomode = false) Parameters basePoint Point3d 基点 cursorType CursorType 光标绑定 msg string 提示信息 orthomode bool 正交开关 Returns JigPromptPointOptions SetOptions(Action<JigPromptPointOptions>, bool) 鼠标配置:自定义 public void SetOptions(Action<JigPromptPointOptions> action, bool orthomode = false) Parameters action Action<JigPromptPointOptions> orthomode bool 正交开关 SetOptions(string, Dictionary<string, string>?, bool) 鼠标配置:提示信息,关键字 public JigPromptPointOptions SetOptions(string msg, Dictionary<string, string>? keywords = null, bool orthomode = false) Parameters msg string 信息 keywords Dictionary<string, string> 关键字 orthomode bool 正交开关 Returns JigPromptPointOptions SetSpaceIsKeyword() 空格默认是Autodesk.AutoCAD.EditorInput.PromptStatus.None, 将它设置为Autodesk.AutoCAD.EditorInput.PromptStatus.Keyword public void SetSpaceIsKeyword() WorldDraw(WorldDraw) 重绘图形 protected override bool WorldDraw(WorldDraw draw) Parameters draw WorldDraw Returns bool"
  },
  "api/IFoxCAD.Cad.JigExTransient.html": {
    "href": "api/IFoxCAD.Cad.JigExTransient.html",
    "title": "Class JigExTransient",
    "keywords": "Class JigExTransient Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 瞬态容器 public class JigExTransient : IDisposable Inheritance object JigExTransient Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors JigExTransient() 瞬态容器 public JigExTransient() Properties Count 数量 public int Count { get; } Property Value int Entities 对象集合 public Entity[] Entities { get; } Property Value Entity[] IsDisposed 是否注销 public bool IsDisposed { get; } Property Value bool Methods Add(Entity, TransientDrawingMode) 向瞬态容器中添加对象 public void Add(Entity ent, TransientDrawingMode tdm = 0) Parameters ent Entity 图元 tdm TransientDrawingMode 绘图模式 Clear() 清空瞬态容器并移除图元显示 public void Clear() Contains(Entity) 判断瞬态容器里是否含有对象 public bool Contains(Entity ent) Parameters ent Entity 对象 Returns bool 含有返回true Dispose() 手动释放 public void Dispose() Dispose(bool) 销毁瞬态容器 protected virtual void Dispose(bool disposing) Parameters disposing bool ~JigExTransient() 析构函数调用释放 protected ~JigExTransient() Remove(Entity) 从瞬态容器中移除图元 public void Remove(Entity ent) Parameters ent Entity 已经加入瞬态容器的图元 Update(Entity) 更新单个显示 public void Update(Entity ent) Parameters ent Entity 已经加入瞬态容器的图元 UpdateAll() 更新全部显示 public void UpdateAll()"
  },
  "api/IFoxCAD.Cad.LispDottedPair.html": {
    "href": "api/IFoxCAD.Cad.LispDottedPair.html",
    "title": "Class LispDottedPair",
    "keywords": "Class LispDottedPair Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll lisp点对表的数据封装类 public class LispDottedPair : LispList, IList<TypedValue>, ICollection<TypedValue>, IList, ICollection, IReadOnlyList<TypedValue>, IReadOnlyCollection<TypedValue>, IEnumerable<TypedValue>, IEnumerable Inheritance object List<TypedValue> TypedValueList LispList LispDottedPair Implements IList<TypedValue> ICollection<TypedValue> IList ICollection IReadOnlyList<TypedValue> IReadOnlyCollection<TypedValue> IEnumerable<TypedValue> IEnumerable Inherited Members LispList.Add(int, object) LispList.Add(LispDataType, object) LispList.Add(bool) LispList.Add(string) LispList.Add(short) LispList.Add(int) LispList.Add(double) LispList.Add(ObjectId) LispList.Add(SelectionSet) LispList.Add(Point2d) LispList.Add(Point3d) LispList.Add(double, double) LispList.Add(double, double, double) LispList.Add(LispList) TypedValueList.ToString() List<TypedValue>.Add(TypedValue) List<TypedValue>.AddRange(IEnumerable<TypedValue>) List<TypedValue>.AsReadOnly() List<TypedValue>.BinarySearch(int, int, TypedValue, IComparer<TypedValue>) List<TypedValue>.BinarySearch(TypedValue) List<TypedValue>.BinarySearch(TypedValue, IComparer<TypedValue>) List<TypedValue>.Clear() List<TypedValue>.Contains(TypedValue) List<TypedValue>.ConvertAll<TOutput>(Converter<TypedValue, TOutput>) List<TypedValue>.CopyTo(TypedValue[]) List<TypedValue>.CopyTo(int, TypedValue[], int, int) List<TypedValue>.CopyTo(TypedValue[], int) List<TypedValue>.EnsureCapacity(int) List<TypedValue>.Exists(Predicate<TypedValue>) List<TypedValue>.Find(Predicate<TypedValue>) List<TypedValue>.FindAll(Predicate<TypedValue>) List<TypedValue>.FindIndex(Predicate<TypedValue>) List<TypedValue>.FindIndex(int, Predicate<TypedValue>) List<TypedValue>.FindIndex(int, int, Predicate<TypedValue>) List<TypedValue>.FindLast(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, int, Predicate<TypedValue>) List<TypedValue>.ForEach(Action<TypedValue>) List<TypedValue>.GetEnumerator() List<TypedValue>.GetRange(int, int) List<TypedValue>.IndexOf(TypedValue) List<TypedValue>.IndexOf(TypedValue, int) List<TypedValue>.IndexOf(TypedValue, int, int) List<TypedValue>.Insert(int, TypedValue) List<TypedValue>.InsertRange(int, IEnumerable<TypedValue>) List<TypedValue>.LastIndexOf(TypedValue) List<TypedValue>.LastIndexOf(TypedValue, int) List<TypedValue>.LastIndexOf(TypedValue, int, int) List<TypedValue>.Remove(TypedValue) List<TypedValue>.RemoveAll(Predicate<TypedValue>) List<TypedValue>.RemoveAt(int) List<TypedValue>.RemoveRange(int, int) List<TypedValue>.Reverse() List<TypedValue>.Reverse(int, int) List<TypedValue>.Sort() List<TypedValue>.Sort(IComparer<TypedValue>) List<TypedValue>.Sort(int, int, IComparer<TypedValue>) List<TypedValue>.Sort(Comparison<TypedValue>) List<TypedValue>.ToArray() List<TypedValue>.TrimExcess() List<TypedValue>.TrueForAll(Predicate<TypedValue>) List<TypedValue>.Capacity List<TypedValue>.Count List<TypedValue>.this[int] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LispDottedPair() 默认无参构造函数 public LispDottedPair() LispDottedPair(TypedValue, TypedValue) 构造函数 public LispDottedPair(TypedValue left, TypedValue right) Parameters left TypedValue 点对表左数 right TypedValue 点对表右数 LispDottedPair(IEnumerable<TypedValue>) 构造函数 public LispDottedPair(IEnumerable<TypedValue> values) Parameters values IEnumerable<TypedValue> TypedValue 迭代器 Properties Value 点对表的值 public override List<TypedValue> Value { get; } Property Value List<TypedValue> Operators implicit operator ResultBuffer(LispDottedPair) LispDottedPair 隐式转换到 ResultBuffer public static implicit operator ResultBuffer(LispDottedPair values) Parameters values LispDottedPair TypedValueList 实例 Returns ResultBuffer implicit operator TypedValue[](LispDottedPair) LispDottedPair 隐式转换到 TypedValue 数组 public static implicit operator TypedValue[](LispDottedPair values) Parameters values LispDottedPair TypedValueList 实例 Returns TypedValue[]"
  },
  "api/IFoxCAD.Cad.LispList.html": {
    "href": "api/IFoxCAD.Cad.LispList.html",
    "title": "Class LispList",
    "keywords": "Class LispList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll lisp数据封装类 public class LispList : TypedValueList, IList<TypedValue>, ICollection<TypedValue>, IList, ICollection, IReadOnlyList<TypedValue>, IReadOnlyCollection<TypedValue>, IEnumerable<TypedValue>, IEnumerable Inheritance object List<TypedValue> TypedValueList LispList Implements IList<TypedValue> ICollection<TypedValue> IList ICollection IReadOnlyList<TypedValue> IReadOnlyCollection<TypedValue> IEnumerable<TypedValue> IEnumerable Derived LispDottedPair Inherited Members TypedValueList.ToString() List<TypedValue>.Add(TypedValue) List<TypedValue>.AddRange(IEnumerable<TypedValue>) List<TypedValue>.AsReadOnly() List<TypedValue>.BinarySearch(int, int, TypedValue, IComparer<TypedValue>) List<TypedValue>.BinarySearch(TypedValue) List<TypedValue>.BinarySearch(TypedValue, IComparer<TypedValue>) List<TypedValue>.Clear() List<TypedValue>.Contains(TypedValue) List<TypedValue>.ConvertAll<TOutput>(Converter<TypedValue, TOutput>) List<TypedValue>.CopyTo(TypedValue[]) List<TypedValue>.CopyTo(int, TypedValue[], int, int) List<TypedValue>.CopyTo(TypedValue[], int) List<TypedValue>.EnsureCapacity(int) List<TypedValue>.Exists(Predicate<TypedValue>) List<TypedValue>.Find(Predicate<TypedValue>) List<TypedValue>.FindAll(Predicate<TypedValue>) List<TypedValue>.FindIndex(Predicate<TypedValue>) List<TypedValue>.FindIndex(int, Predicate<TypedValue>) List<TypedValue>.FindIndex(int, int, Predicate<TypedValue>) List<TypedValue>.FindLast(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, int, Predicate<TypedValue>) List<TypedValue>.ForEach(Action<TypedValue>) List<TypedValue>.GetEnumerator() List<TypedValue>.GetRange(int, int) List<TypedValue>.IndexOf(TypedValue) List<TypedValue>.IndexOf(TypedValue, int) List<TypedValue>.IndexOf(TypedValue, int, int) List<TypedValue>.Insert(int, TypedValue) List<TypedValue>.InsertRange(int, IEnumerable<TypedValue>) List<TypedValue>.LastIndexOf(TypedValue) List<TypedValue>.LastIndexOf(TypedValue, int) List<TypedValue>.LastIndexOf(TypedValue, int, int) List<TypedValue>.Remove(TypedValue) List<TypedValue>.RemoveAll(Predicate<TypedValue>) List<TypedValue>.RemoveAt(int) List<TypedValue>.RemoveRange(int, int) List<TypedValue>.Reverse() List<TypedValue>.Reverse(int, int) List<TypedValue>.Sort() List<TypedValue>.Sort(IComparer<TypedValue>) List<TypedValue>.Sort(int, int, IComparer<TypedValue>) List<TypedValue>.Sort(Comparison<TypedValue>) List<TypedValue>.ToArray() List<TypedValue>.TrimExcess() List<TypedValue>.TrueForAll(Predicate<TypedValue>) List<TypedValue>.Capacity List<TypedValue>.Count List<TypedValue>.this[int] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors LispList() 默认构造函数 public LispList() LispList(IEnumerable<TypedValue>) 构造函数 public LispList(IEnumerable<TypedValue> values) Parameters values IEnumerable<TypedValue> TypedValue 迭代器 Properties Value lisp 列表的值 public virtual List<TypedValue> Value { get; } Property Value List<TypedValue> Methods Add(ObjectId) 添加对象id public void Add(ObjectId value) Parameters value ObjectId 对象id Add(SelectionSet) 添加选择集 public void Add(SelectionSet value) Parameters value SelectionSet 选择集 Add(Point2d) 添加二维点 public void Add(Point2d value) Parameters value Point2d 二维点 Add(Point3d) 添加三维点 public void Add(Point3d value) Parameters value Point3d 三维点 Add(LispDataType?, object?) 添加数据 public void Add(LispDataType? code, object? obj) Parameters code LispDataType dxfcode枚举值 obj object 组码值 Add(LispList) 添加列表 public void Add(LispList value) Parameters value LispList lisp 列表 Add(bool) 添加数据，参数为true时添加 lisp 中的 T，false时添加 lisp 中的 nil public void Add(bool value) Parameters value bool bool 型的数据 Add(double) 添加浮点数 public void Add(double value) Parameters value double 浮点数 Add(double, double) 添加二维点 public void Add(double x, double y) Parameters x double X y double Y Add(double, double, double) 添加三维点 public void Add(double x, double y, double z) Parameters x double X y double Y z double Z Add(short) 添加短整型数 public void Add(short value) Parameters value short 短整型数 Add(int) 添加整型数 public void Add(int value) Parameters value int 整型数 Add(int, object?) 添加数据 public override void Add(int code, object? obj) Parameters code int 组码 obj object 组码值 Add(string) 添加字符串 public void Add(string value) Parameters value string 字符串 Operators implicit operator LispList(ResultBuffer) ResultBuffer 隐式转换到 LispList public static implicit operator LispList(ResultBuffer buffer) Parameters buffer ResultBuffer ResultBuffer 实例 Returns LispList implicit operator LispList(TypedValue[]) TypedValue 数组隐式转换到 LispList public static implicit operator LispList(TypedValue[] values) Parameters values TypedValue[] TypedValue 数组 Returns LispList implicit operator ResultBuffer(LispList) LispList 隐式转换到 ResultBuffer public static implicit operator ResultBuffer(LispList values) Parameters values LispList TypedValueList 实例,要using Returns ResultBuffer implicit operator TypedValue[](LispList) LispList 隐式转换到 TypedValue 数组 public static implicit operator TypedValue[](LispList values) Parameters values LispList TypedValueList 实例 Returns TypedValue[]"
  },
  "api/IFoxCAD.Cad.MTextEx.html": {
    "href": "api/IFoxCAD.Cad.MTextEx.html",
    "title": "Class MTextEx",
    "keywords": "Class MTextEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 多行文字扩展类 public static class MTextEx Inheritance object MTextEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateMText(Point3d, string, double, Database?, Action<MText>?) 创建多行文字 public static MText CreateMText(Point3d position, string text, double height, Database? database = null, Action<MText>? action = null) Parameters position Point3d 插入点 text string 文本内容 height double 文字高度 database Database 文字所在的数据库 action Action<MText> 文字属性设置委托 Returns MText 文字对象id Exceptions ArgumentNullException ExplodeFragments<T>(MText, T, Func<MTextFragment, T, MTextFragmentCallbackStatus>) 炸散多行文字 public static void ExplodeFragments<T>(this MText mt, T obj, Func<MTextFragment, T, MTextFragmentCallbackStatus> mTextFragmentCallback) Parameters mt MText 多行文字 obj T 存储对象变量 mTextFragmentCallback Func<MTextFragment, T, MTextFragmentCallbackStatus> 回调函数，用于处理炸散之后的对象 Autodesk.AutoCAD.DatabaseServices.MTextFragment多行文字炸散后的对象 Autodesk.AutoCAD.DatabaseServices.MTextFragmentCallbackStatus回调函数处理的结果 Type Parameters T 存储多行文字炸散之后的对象的类型 GetUnFormatString(MText) 获取多行文字的无格式文本 public static string GetUnFormatString(this MText mt) Parameters mt MText 多行文字 Returns string 文本"
  },
  "api/IFoxCAD.Cad.MappingModes.html": {
    "href": "api/IFoxCAD.Cad.MappingModes.html",
    "title": "Enum MappingModes",
    "keywords": "Enum MappingModes Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum MappingModes Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields MM_ANISOTROPIC = 8 MM_HIENGLISH = 5 MM_HIMETRIC = 3 MM_ISOTROPIC = 7 MM_LOENGLISH = 4 MM_LOMETRIC = 2 MM_MAX = 8 MM_MAX_FIXEDSCALE = 6 MM_MIN = 1 MM_TEXT = 1 MM_TWIPS = 6"
  },
  "api/IFoxCAD.Cad.MetaFilePict.html": {
    "href": "api/IFoxCAD.Cad.MetaFilePict.html",
    "title": "Struct MetaFilePict",
    "keywords": "Struct MetaFilePict Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public struct MetaFilePict Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields hMF public nint hMF Field Value nint mm public MappingModes mm Field Value MappingModes xExt public int xExt Field Value int yExt public int yExt Field Value int"
  },
  "api/IFoxCAD.Cad.ObjEx.html": {
    "href": "api/IFoxCAD.Cad.ObjEx.html",
    "title": "Class ObjEx",
    "keywords": "Class ObjEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 对象扩展类 public static class ObjEx Inheritance object ObjEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Print(object) cad的打印 public static void Print(this object obj) Parameters obj object PrintLine(object) 系统的打印 public static void PrintLine(this object obj) Parameters obj object"
  },
  "api/IFoxCAD.Cad.ObjectIdEx.html": {
    "href": "api/IFoxCAD.Cad.ObjectIdEx.html",
    "title": "Class ObjectIdEx",
    "keywords": "Class ObjectIdEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 对象id扩展类 public static class ObjectIdEx Inheritance object ObjectIdEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ConvertToHandle(string) 句柄字符串转句柄 public static Handle? ConvertToHandle(this string handleString) Parameters handleString string 句柄字符串 Returns Handle? 句柄 Erase(ObjectId) 删除id代表的对象 public static void Erase(this ObjectId id) Parameters id ObjectId 对象id GetObjectId(Database, Handle?) 根据对象句柄获取对象ObjectId public static ObjectId GetObjectId(this Database db, Handle? handle) Parameters db Database 数据库 handle Handle? 句柄 Returns ObjectId 对象的ObjectId GetObjectId(Database, string) 根据对象句柄字符串获取对象Id public static ObjectId GetObjectId(this Database db, string handleString) Parameters db Database 数据库 handleString string 句柄字符串 Returns ObjectId 对象的ObjectId GetObject<T>(ObjectId, OpenMode, bool, bool) 获取指定类型对象 public static T? GetObject<T>(this ObjectId id, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : DBObject Parameters id ObjectId 对象id openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns T 指定类型对象 Type Parameters T 指定的泛型 GetObject<T>(ObjectIdCollection, OpenMode, bool, bool) 获取指定类型对象集合 public static IEnumerable<T> GetObject<T>(this ObjectIdCollection ids, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : DBObject Parameters ids ObjectIdCollection 对象id集合 openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns IEnumerable<T> 指定类型对象集合 Type Parameters T 指定的泛型 GetObject<T>(IEnumerable<ObjectId>, OpenMode, bool, bool) 获取指定类型对象集合 public static IEnumerable<T> GetObject<T>(this IEnumerable<ObjectId> ids, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : DBObject Parameters ids IEnumerable<ObjectId> 对象id集合 openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns IEnumerable<T> 指定类型对象集合 Type Parameters T 指定的泛型 IsOk(ObjectId) id是否有效,未被删除 public static bool IsOk(this ObjectId id) Parameters id ObjectId 对象id Returns bool id有效返回 true，反之返回 false OfType<T>(IEnumerable<ObjectId>, bool) 返回符合类型的对象id public static IEnumerable<ObjectId> OfType<T>(this IEnumerable<ObjectId> ids, bool exactMatch = false) where T : DBObject Parameters ids IEnumerable<ObjectId> 对象id集合 exactMatch bool 精确匹配 Returns IEnumerable<ObjectId> 对象id集合 Type Parameters T 对象类型"
  },
  "api/IFoxCAD.Cad.OpAnd.html": {
    "href": "api/IFoxCAD.Cad.OpAnd.html",
    "title": "Class OpAnd",
    "keywords": "Class OpAnd Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 逻辑与类 public class OpAnd : OpList, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi OpList OpAnd Implements IEnumerable<OpFilter> IEnumerable Inherited Members OpList._lst OpList.Add(string, int, object) OpList.Add(int, object) OpList.Add(DxfCode, object) OpList.Add(int, object, string) OpList.Add(DxfCode, object, string) OpList.GetEnumerator() OpLogi.GetValues() OpLogi.First OpLogi.Last OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpAnd() public OpAnd() Properties Name 符号名 public override string Name { get; } Property Value string Methods Add(OpFilter) 添加过滤条件 public override void Add(OpFilter value) Parameters value OpFilter 过滤器对象"
  },
  "api/IFoxCAD.Cad.OpComp.html": {
    "href": "api/IFoxCAD.Cad.OpComp.html",
    "title": "Class OpComp",
    "keywords": "Class OpComp Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 比较运算符类 public class OpComp : OpEqual Inheritance object OpFilter OpEqual OpComp Inherited Members OpEqual.SetValue(object) OpEqual.SetValue(int, object) OpEqual.Value OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpComp(string, DxfCode, object) 比较运算符类构造函数 public OpComp(string content, DxfCode code, object value) Parameters content string 运算符 code DxfCode 组码 value object 组码值 OpComp(string, TypedValue) 比较运算符类构造函数 public OpComp(string content, TypedValue value) Parameters content string 运算符 value TypedValue 数据 OpComp(string, int) 比较运算符类构造函数 public OpComp(string content, int code) Parameters content string 运算符 code int 组码 OpComp(string, int, object) 比较运算符类构造函数 public OpComp(string content, int code, object value) Parameters content string 运算符 code int 组码 value object 组码值 Properties Content 比较运算符，如： \"<=\" 以及合并比较运算符： \"<=,<=,=\" public string Content { get; } Property Value string Name 符号名 public override string Name { get; } Property Value string Methods GetValues() 获取过滤器数据迭代器 public override IEnumerable<TypedValue> GetValues() Returns IEnumerable<TypedValue> TypedValue迭代器"
  },
  "api/IFoxCAD.Cad.OpEqual.html": {
    "href": "api/IFoxCAD.Cad.OpEqual.html",
    "title": "Class OpEqual",
    "keywords": "Class OpEqual Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 相等运算符类 public class OpEqual : OpFilter Inheritance object OpFilter OpEqual Derived OpComp Inherited Members OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpEqual(DxfCode, object) 相等运算符类构造函数 public OpEqual(DxfCode code, object value) Parameters code DxfCode 组码 value object 组码值 OpEqual(int) 相等运算符类构造函数 public OpEqual(int code) Parameters code int 组码 OpEqual(int, object) 相等运算符类构造函数 public OpEqual(int code, object value) Parameters code int 组码 value object 组码值 Properties Name 符号名 public override string Name { get; } Property Value string Value 组码与匹配值的TypedValue类型值 public TypedValue Value { get; } Property Value TypedValue Methods GetValues() 过滤器数据迭代器 public override IEnumerable<TypedValue> GetValues() Returns IEnumerable<TypedValue> TypedValue迭代器 SetValue(int, object) 设置数据 public void SetValue(int code, object value) Parameters code int 组码 value object 组码值 SetValue(object) 设置数据 public void SetValue(object value) Parameters value object 组码值"
  },
  "api/IFoxCAD.Cad.OpFilter.Op.html": {
    "href": "api/IFoxCAD.Cad.OpFilter.Op.html",
    "title": "Class OpFilter.Op",
    "keywords": "Class OpFilter.Op Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 过滤器操作符类 public class OpFilter.Op Inheritance object OpFilter.Op Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Methods And(params Op[]) AND 操作符 public OpFilter.Op And(params OpFilter.Op[] args) Parameters args Op[] 操作符类型的可变参数 Returns OpFilter.Op Op对象 Dxf(int) dxf 操作符，此函数只能用于过滤器中，不是组码操作函数 public OpFilter.Op Dxf(int code) Parameters code int 组码 Returns OpFilter.Op Op对象 Dxf(int, string) dxf 操作符，此函数只能用于过滤器中，不是组码操作函数 public OpFilter.Op Dxf(int code, string content) Parameters code int 组码 content string 关系运算符的值，比如\">,>,=\" Returns OpFilter.Op Op对象 Equals(object) 比较函数 public override bool Equals(object obj) Parameters obj object 对象 Returns bool 是否相等 GetHashCode() 获取HashCode public override int GetHashCode() Returns int HashCode Or(params Op[]) or 操作符 public OpFilter.Op Or(params OpFilter.Op[] args) Parameters args Op[] 操作符类型的可变参数 Returns OpFilter.Op Op对象 Operators operator &(Op, Op) 并操作符 public static OpFilter.Op operator &(OpFilter.Op left, OpFilter.Op right) Parameters left OpFilter.Op 过滤器操作符对象 right OpFilter.Op 过滤器操作符对象 Returns OpFilter.Op Op对象 operator |(Op, Op) 或操作符 public static OpFilter.Op operator |(OpFilter.Op left, OpFilter.Op right) Parameters left OpFilter.Op 过滤器操作符对象 right OpFilter.Op 过滤器操作符对象 Returns OpFilter.Op Op对象 operator ==(Op, object) 相等操作符 public static OpFilter.Op operator ==(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator ^(Op, Op) 异或操作符 public static OpFilter.Op operator ^(OpFilter.Op left, OpFilter.Op right) Parameters left OpFilter.Op 过滤器操作符对象 right OpFilter.Op 过滤器操作符对象 Returns OpFilter.Op Op对象 operator >(Op, object) 大于操作符 public static OpFilter.Op operator >(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator >=(Op, Point3d) 大于等于操作符 public static OpFilter.Op operator >=(OpFilter.Op left, Point3d right) Parameters left OpFilter.Op 过滤器操作符对象 right Point3d 点 Returns OpFilter.Op Op对象 operator >=(Op, object) 大于等于操作符 public static OpFilter.Op operator >=(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator !=(Op, object) 不等操作符 public static OpFilter.Op operator !=(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator <(Op, object) 小于操作符 public static OpFilter.Op operator <(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator <=(Op, Point3d) 小于等于操作符 public static OpFilter.Op operator <=(OpFilter.Op left, Point3d right) Parameters left OpFilter.Op 过滤器操作符对象 right Point3d 点 Returns OpFilter.Op Op对象 operator <=(Op, object) 小于等于操作符 public static OpFilter.Op operator <=(OpFilter.Op left, object right) Parameters left OpFilter.Op 过滤器操作符对象 right object 数据 Returns OpFilter.Op Op对象 operator !(Op) 非操作符 public static OpFilter.Op operator !(OpFilter.Op right) Parameters right OpFilter.Op 过滤器操作符对象 Returns OpFilter.Op Op对象"
  },
  "api/IFoxCAD.Cad.OpFilter.html": {
    "href": "api/IFoxCAD.Cad.OpFilter.html",
    "title": "Class OpFilter",
    "keywords": "Class OpFilter Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 选择集过滤器抽象类 public abstract class OpFilter Inheritance object OpFilter Derived OpEqual OpLogi Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpFilter() protected OpFilter() Properties Name 过滤器的名字 public abstract string Name { get; } Property Value string Not 只读属性，表示这个过滤器取反 public OpFilter Not { get; } Property Value OpFilter Methods Build(Func<Op, Op>) 构建过滤器 public static OpFilter Build(Func<OpFilter.Op, OpFilter.Op> func) Parameters func Func<OpFilter.Op, OpFilter.Op> 构建过滤器的函数委托 Returns OpFilter 过滤器 Examples 举两个利用构建函数创建选择集过滤的例子 例子1： var p = new Point3d(10, 10, 0); var f = OpFilter.Build( e =>!(e.Dxf(0) == \"line\" & e.Dxf(8) == \"0\") | e.Dxf(0) != \"circle\" & e.Dxf(8) == \"2\" & e.Dxf(10) >= p); 例子2： var f2 = OpFilter.Build( e => e.Or( !e.And(e.Dxf(0) == \"line\", e.Dxf(8) == \"0\"), e.And(e.Dxf(0) != \"circle\", e.Dxf(8) == \"2\", e.Dxf(10) <= new Point3d(10, 10, 0)))); GetValues() 获取TypedValue类型的值的迭代器的抽象方法，子类必须重写 public abstract IEnumerable<TypedValue> GetValues() Returns IEnumerable<TypedValue> TypedValue迭代器 ToArray() 过滤器值转换为 TypedValue 类型数组 public TypedValue[] ToArray() Returns TypedValue[] TypedValue数组 ToString() 转换为字符串 public override string ToString() Returns string 字符串 Operators implicit operator SelectionFilter(OpFilter) 隐式类型转换，将自定义的过滤器转换为 Autocad 认识的选择集过滤器 public static implicit operator SelectionFilter(OpFilter item) Parameters item OpFilter 过滤器对象 Returns SelectionFilter 选择集过滤器. operator !(OpFilter) 非操作符，返回的是OpFilter类型变量的 Not 属性 public static OpFilter operator !(OpFilter item) Parameters item OpFilter OpFilter类型变量 Returns OpFilter OpFilter对象"
  },
  "api/IFoxCAD.Cad.OpList.html": {
    "href": "api/IFoxCAD.Cad.OpList.html",
    "title": "Class OpList",
    "keywords": "Class OpList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 逻辑操作符的列表抽象类 public abstract class OpList : OpLogi, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi OpList Implements IEnumerable<OpFilter> IEnumerable Derived OpAnd OpOr Inherited Members OpLogi.GetValues() OpLogi.First OpLogi.Last OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Name OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpList() protected OpList() Fields _lst 过滤器列表 protected List<OpFilter> _lst Field Value List<OpFilter> Methods Add(DxfCode, object) 添加过滤条件 public void Add(DxfCode code, object value) Parameters code DxfCode 组码 value object 组码值 Add(DxfCode, object, string) 添加过滤条件 public void Add(DxfCode code, object value, string comp) Parameters code DxfCode 组码 value object 组码值 comp string 比较运算符 Add(OpFilter) 添加过滤器条件的虚函数，子类可以重写 public virtual void Add(OpFilter value) Parameters value OpFilter 过滤器对象 Examples 举个利用这个类及其子类创建选择集过滤的例子 var fd = new OpOr { !new OpAnd { { 0, \"line\" }, { 8, \"0\" }, }, new OpAnd { !new OpEqual(0, \"circle\"), { 8, \"2\" }, { 10, new Point3d(10,10,0), \">,>,*\" } }, }; Add(int, object) 添加过滤条件 public void Add(int code, object value) Parameters code int 组码 value object 组码值 Add(int, object, string) 添加过滤条件 public void Add(int code, object value, string comp) Parameters code int 组码 value object 组码值 comp string 比较运算符 Add(string, int, object) 添加过滤条件 public void Add(string speccode, int code, object value) Parameters speccode string 逻辑非~ code int 组码 value object 组码值 GetEnumerator() 过滤器迭代器 public override IEnumerator<OpFilter> GetEnumerator() Returns IEnumerator<OpFilter> OpFilter迭代器"
  },
  "api/IFoxCAD.Cad.OpLogi.html": {
    "href": "api/IFoxCAD.Cad.OpLogi.html",
    "title": "Class OpLogi",
    "keywords": "Class OpLogi Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 过滤器逻辑运算符抽象类 public abstract class OpLogi : OpFilter, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi Implements IEnumerable<OpFilter> IEnumerable Derived OpList OpNot OpXor Inherited Members OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Name OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpLogi() protected OpLogi() Properties First 返回-4组码的开始内容 public TypedValue First { get; } Property Value TypedValue Last 返回-4组码的结束内容 public TypedValue Last { get; } Property Value TypedValue Methods GetEnumerator() 获取迭代器 public abstract IEnumerator<OpFilter> GetEnumerator() Returns IEnumerator<OpFilter> OpFilter迭代器 GetValues() 获取过滤条件 public override IEnumerable<TypedValue> GetValues() Returns IEnumerable<TypedValue> TypedValue迭代器"
  },
  "api/IFoxCAD.Cad.OpNot.html": {
    "href": "api/IFoxCAD.Cad.OpNot.html",
    "title": "Class OpNot",
    "keywords": "Class OpNot Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 逻辑非类 public class OpNot : OpLogi, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi OpNot Implements IEnumerable<OpFilter> IEnumerable Inherited Members OpLogi.GetValues() OpLogi.First OpLogi.Last OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpNot(OpFilter) 逻辑非类构造函数 public OpNot(OpFilter value) Parameters value OpFilter OpFilter数据 Properties Name 符号名 public override string Name { get; } Property Value string Methods GetEnumerator() 获取迭代器 public override IEnumerator<OpFilter> GetEnumerator() Returns IEnumerator<OpFilter> OpFilter迭代器"
  },
  "api/IFoxCAD.Cad.OpOr.html": {
    "href": "api/IFoxCAD.Cad.OpOr.html",
    "title": "Class OpOr",
    "keywords": "Class OpOr Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 逻辑或类 public class OpOr : OpList, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi OpList OpOr Implements IEnumerable<OpFilter> IEnumerable Inherited Members OpList._lst OpList.Add(string, int, object) OpList.Add(int, object) OpList.Add(DxfCode, object) OpList.Add(int, object, string) OpList.Add(DxfCode, object, string) OpList.GetEnumerator() OpLogi.GetValues() OpLogi.First OpLogi.Last OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpOr() public OpOr() Properties Name 符号名 public override string Name { get; } Property Value string Methods Add(OpFilter) 添加过滤条件 public override void Add(OpFilter value) Parameters value OpFilter 过滤器对象"
  },
  "api/IFoxCAD.Cad.OpXor.html": {
    "href": "api/IFoxCAD.Cad.OpXor.html",
    "title": "Class OpXor",
    "keywords": "Class OpXor Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 逻辑异或类 public class OpXor : OpLogi, IEnumerable<OpFilter>, IEnumerable Inheritance object OpFilter OpLogi OpXor Implements IEnumerable<OpFilter> IEnumerable Inherited Members OpLogi.GetValues() OpLogi.First OpLogi.Last OpFilter.ToArray() OpFilter.ToString() OpFilter.Build(Func<OpFilter.Op, OpFilter.Op>) OpFilter.Not object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState, int>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T, LoopState>) CollectionEx.ForEach<T>(IEnumerable<T>, Action<T>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OpXor(OpFilter, OpFilter) 逻辑异或类构造函数 public OpXor(OpFilter left, OpFilter right) Parameters left OpFilter 左操作数 right OpFilter 右操作数 Properties Left 左操作数 public OpFilter Left { get; } Property Value OpFilter Name 符号名 public override string Name { get; } Property Value string Right 右操作数 public OpFilter Right { get; } Property Value OpFilter Methods GetEnumerator() 获取迭代器 public override IEnumerator<OpFilter> GetEnumerator() Returns IEnumerator<OpFilter> 选择集过滤器类型迭代器"
  },
  "api/IFoxCAD.Cad.OptionalDirAttrib.DirAttrib.html": {
    "href": "api/IFoxCAD.Cad.OptionalDirAttrib.DirAttrib.html",
    "title": "Class OptionalDirAttrib.DirAttrib",
    "keywords": "Class OptionalDirAttrib.DirAttrib Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class OptionalDirAttrib.DirAttrib Inheritance object OptionalDirAttrib.DirAttrib Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DirAttrib() public DirAttrib() Fields DirRva public byte[] DirRva Field Value byte[] DirSize public byte[] DirSize Field Value byte[]"
  },
  "api/IFoxCAD.Cad.OptionalDirAttrib.html": {
    "href": "api/IFoxCAD.Cad.OptionalDirAttrib.html",
    "title": "Class OptionalDirAttrib",
    "keywords": "Class OptionalDirAttrib Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 目录结构 public class OptionalDirAttrib Inheritance object OptionalDirAttrib Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OptionalDirAttrib() public OptionalDirAttrib() Fields DirByte public ArrayList DirByte Field Value ArrayList FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long"
  },
  "api/IFoxCAD.Cad.OptionalHeader.html": {
    "href": "api/IFoxCAD.Cad.OptionalHeader.html",
    "title": "Class OptionalHeader",
    "keywords": "Class OptionalHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll PE头扩展 public class OptionalHeader Inheritance object OptionalHeader Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors OptionalHeader(bool) public OptionalHeader(bool is32) Parameters is32 bool Fields AddressOfEntryPoint public byte[] AddressOfEntryPoint Field Value byte[] BaseOfCode public byte[] BaseOfCode Field Value byte[] BaseOfData public byte[] BaseOfData Field Value byte[] CheckSum public byte[] CheckSum Field Value byte[] DLLCharacteristics public byte[] DLLCharacteristics Field Value byte[] FileAlignment public byte[] FileAlignment Field Value byte[] FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long ImageBase public byte[] ImageBase Field Value byte[] LoaderFlags public byte[] LoaderFlags Field Value byte[] Magic public byte[] Magic Field Value byte[] MajorImageVersion public byte[] MajorImageVersion Field Value byte[] MajorLinkerVersion public byte[] MajorLinkerVersion Field Value byte[] MajorOperatingSystemVersion public byte[] MajorOperatingSystemVersion Field Value byte[] MajorSubsystemVersion public byte[] MajorSubsystemVersion Field Value byte[] MinorImageVersion public byte[] MinorImageVersion Field Value byte[] MinorLinkerVersion public byte[] MinorLinkerVersion Field Value byte[] MinorOperatingSystemVersion public byte[] MinorOperatingSystemVersion Field Value byte[] MinorSubsystemVersion public byte[] MinorSubsystemVersion Field Value byte[] NumberOfRvaAndSizes public byte[] NumberOfRvaAndSizes Field Value byte[] SectionAlignment public byte[] SectionAlignment Field Value byte[] SizeOfCode public byte[] SizeOfCode Field Value byte[] SizeOfHeapCommit public byte[] SizeOfHeapCommit Field Value byte[] SizeOfHeapReserve public byte[] SizeOfHeapReserve Field Value byte[] SizeOfHeards public byte[] SizeOfHeards Field Value byte[] SizeOfImage public byte[] SizeOfImage Field Value byte[] SizeOfInitializedData public byte[] SizeOfInitializedData Field Value byte[] SizeOfStackCommit public byte[] SizeOfStackCommit Field Value byte[] SizeOfStackReserve public byte[] SizeOfStackReserve Field Value byte[] SizeOfUninitializedData public byte[] SizeOfUninitializedData Field Value byte[] Subsystem public byte[] Subsystem Field Value byte[] Win32VersionValue public byte[] Win32VersionValue Field Value byte[]"
  },
  "api/IFoxCAD.Cad.OrientationType.html": {
    "href": "api/IFoxCAD.Cad.OrientationType.html",
    "title": "Enum OrientationType",
    "keywords": "Enum OrientationType Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 方向的枚举 public enum OrientationType Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields ClockWise = 1 右转或顺时针 CounterClockWise = 0 左转或逆时针 Parallel = 2 重合或平行"
  },
  "api/IFoxCAD.Cad.PEHeader.html": {
    "href": "api/IFoxCAD.Cad.PEHeader.html",
    "title": "Class PEHeader",
    "keywords": "Class PEHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll PE文件头 public class PEHeader Inheritance object PEHeader Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors PEHeader() public PEHeader() Fields Characteristics public byte[] Characteristics Field Value byte[] FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long Header public byte[] Header Field Value byte[] Machine public byte[] Machine Field Value byte[] NumberOfSections public byte[] NumberOfSections Field Value byte[] NumberOfSymbols public byte[] NumberOfSymbols Field Value byte[] PointerToSymbolTable public byte[] PointerToSymbolTable Field Value byte[] SizeOfOptionalHeader public byte[] SizeOfOptionalHeader Field Value byte[] TimeDateStamp public byte[] TimeDateStamp Field Value byte[]"
  },
  "api/IFoxCAD.Cad.PathConverterModes.html": {
    "href": "api/IFoxCAD.Cad.PathConverterModes.html",
    "title": "Enum PathConverterModes",
    "keywords": "Enum PathConverterModes Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 参照路径转换 public enum PathConverterModes : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Complete = 1 绝对路径 Relative = 0 相对路径"
  },
  "api/IFoxCAD.Cad.PeFunction.html": {
    "href": "api/IFoxCAD.Cad.PeFunction.html",
    "title": "Class PeFunction",
    "keywords": "Class PeFunction Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 通过名字查找exe/dll内所有名字 public class PeFunction Inheritance object PeFunction Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors PeFunction(string) 通过名字查找exe/dll内所有名字 public PeFunction(string methodName) Parameters methodName string 没修饰的方法名 Fields MethodName 函数名 public string MethodName Field Value string ModuleFullName 模块文件路径 public string? ModuleFullName Field Value string ModuleIntPtr 模块指针 public nint ModuleIntPtr Field Value nint Properties CName 纯c语言名 public string? CName { get; } Property Value string Methods Finds(PeInfo, string, List<PeFunction>) 通过名字查找exe/dll内所有名字 public static void Finds(PeInfo peInfo, string findFuncName, List<PeFunction> funcAdress_Out) Parameters peInfo PeInfo pe结构 findFuncName string 用于查找的方法名 funcAdress_Out List<PeFunction> 返回函数集合 GetProcAddress() 获取函数指针 public nint GetProcAddress() Returns nint"
  },
  "api/IFoxCAD.Cad.PeInfo.html": {
    "href": "api/IFoxCAD.Cad.PeInfo.html",
    "title": "Class PeInfo",
    "keywords": "Class PeInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 微软软件结构PE信息 public class PeInfo Inheritance object PeInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors PeInfo(string) public PeInfo(string fullName) Parameters fullName string Fields FullName PE文件完整路径 public string? FullName Field Value string Properties DosHeader public DosHeader? DosHeader { get; } Property Value DosHeader DosStub public DosStub? DosStub { get; } Property Value DosStub ExportDirectory 函数接口名单 public ExportDirectory? ExportDirectory { get; } Property Value ExportDirectory ImportDirectory public ImportDirectory? ImportDirectory { get; } Property Value ImportDirectory OpenFile 获取是否正常打开文件 public bool OpenFile { get; } Property Value bool OptionalDirAttrib public OptionalDirAttrib? OptionalDirAttrib { get; } Property Value OptionalDirAttrib OptionalHeader public OptionalHeader? OptionalHeader { get; } Property Value OptionalHeader PEHeader public PEHeader? PEHeader { get; } Property Value PEHeader ResourceDirectory public ResourceDirectory? ResourceDirectory { get; } Property Value ResourceDirectory SectionTable public SectionTable? SectionTable { get; } Property Value SectionTable Methods GetPETable() 获取PE信息 DataSet方式 public DataSet? GetPETable() Returns DataSet 多个表 最后资源表 绘制成树结构TABLE"
  },
  "api/IFoxCAD.Cad.PlaceableMetaHeader.html": {
    "href": "api/IFoxCAD.Cad.PlaceableMetaHeader.html",
    "title": "Struct PlaceableMetaHeader",
    "keywords": "Struct PlaceableMetaHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public struct PlaceableMetaHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Bottom public short Bottom Field Value short Checksum public ushort Checksum Field Value ushort Handle public ushort Handle Field Value ushort Inch public ushort Inch Field Value ushort Key public uint Key Field Value uint Left public short Left Field Value short Reserved public uint Reserved Field Value uint Right public short Right Field Value short Top public short Top Field Value short Properties IsActivity 是活动式图元文件 public bool IsActivity { get; } Property Value bool Methods Wmf2Emf(string) wmf转为emf public static nint Wmf2Emf(string wmfFile) Parameters wmfFile string 文件路径 Returns nint 错误: Zero; 成功: 返回一个增强型图元 emf文件句柄 (位于内存中) Exceptions IOException"
  },
  "api/IFoxCAD.Cad.PlaneEx.html": {
    "href": "api/IFoxCAD.Cad.PlaneEx.html",
    "title": "Class PlaneEx",
    "keywords": "Class PlaneEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 平面 public static class PlaneEx Inheritance object PlaneEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields X public static readonly Plane X Field Value Plane Y public static readonly Plane Y Field Value Plane Z public static readonly Plane Z Field Value Plane"
  },
  "api/IFoxCAD.Cad.PointEx.html": {
    "href": "api/IFoxCAD.Cad.PointEx.html",
    "title": "Class PointEx",
    "keywords": "Class PointEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class PointEx Inheritance object PointEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods End2End(Point2dCollection) 首尾相连 public static void End2End(this Point2dCollection ptcol) Parameters ptcol Point2dCollection End2End(Point3dCollection) 首尾相连 public static void End2End(this Point3dCollection ptcol) Parameters ptcol Point3dCollection GetAngle(Point2d, Point2d) 两点计算弧度范围0到2Pi public static double GetAngle(this Point2d startPoint, Point2d endPoint) Parameters startPoint Point2d 起点 endPoint Point2d 终点 Returns double 弧度值 GetAngle(Point3d, Point3d, Vector3d?) 两点计算弧度范围0到2Pi public static double GetAngle(this Point3d startPoint, Point3d endPoint, Vector3d? direction = null) Parameters startPoint Point3d 起点 endPoint Point3d 终点 direction Vector3d? 方向 Returns double 弧度值 GetArcBulge(Point2d, Point2d, Point2d, double) 求凸度,判断三点是否一条直线上 public static double GetArcBulge(this Point2d arc1, Point2d arc2, Point2d arc3, double tol = 1E-10) Parameters arc1 Point2d 圆弧起点 arc2 Point2d 圆弧腰点 arc3 Point2d 圆弧尾点 tol double 容差 Returns double 逆时针为正,顺时针为负 GetHashString(Point3d, int, int) 获取点的hash字符串，同时可以作为pt的字符串表示 public static string GetHashString(this Point3d pt, int xyz = 3, int decimalRetain = 6) Parameters pt Point3d 点 xyz int 指示计算几维坐标的标志，1为计算x，2为计算x，y，其他为计算x，y，z decimalRetain int 保留的小数位数 Returns string hash字符串 GetMidPointTo(Point2d, Point2d) 获取中点 public static Point2d GetMidPointTo(this Point2d a, Point2d b) Parameters a Point2d b Point2d Returns Point2d GetMidPointTo(Point3d, Point3d) 获取两个点之间的中点 public static Point3d GetMidPointTo(this Point3d pt1, Point3d pt2) Parameters pt1 Point3d 第一点 pt2 Point3d 第二点 Returns Point3d 返回两个点之间的中点 Point2d(Point3d) 将三维点转换为二维点 public static Point2d Point2d(this Point3d pt) Parameters pt Point3d 三维点 Returns Point2d 二维点 Point2d(IEnumerable<Point3d>) 将三维点集转换为二维点集 public static IEnumerable<Point2d> Point2d(this IEnumerable<Point3d> pts) Parameters pts IEnumerable<Point3d> 三维点集 Returns IEnumerable<Point2d> 二维点集 Point3d(Point2d, double) 将二维点转换为三维点 public static Point3d Point3d(this Point2d pt, double z = 0) Parameters pt Point2d 二维点 z double Z值 Returns Point3d 三维点 Polar(Point2d, double, double) 计算指定距离和角度的点 public static Point2d Polar(this Point2d pt, double ang, double len) Parameters pt Point2d 基点 ang double 角度，x轴正向逆时针弧度 len double 距离 Returns Point2d 目标点 Remarks 本函数仅适用于x-y平面 Polar(Point3d, double, double) 计算指定距离和角度的点 public static Point3d Polar(this Point3d pt, double ang, double len) Parameters pt Point3d 基点 ang double 角度，x轴正向逆时针弧度 len double 距离 Returns Point3d 目标点 Remarks 本函数仅适用于x-y平面 TransPoint(Point3d, Point3d, Point3d, double) 根据世界坐标计算用户坐标 public static Point3d TransPoint(this Point3d basePt, Point3d userPt, Point3d transPt, double ang) Parameters basePt Point3d 基点世界坐标 userPt Point3d 基点用户坐标 transPt Point3d 目标世界坐标 ang double 坐标网旋转角，按x轴正向逆时针弧度 Returns Point3d 目标用户坐标"
  },
  "api/IFoxCAD.Cad.PointOnRegionType.html": {
    "href": "api/IFoxCAD.Cad.PointOnRegionType.html",
    "title": "Enum PointOnRegionType",
    "keywords": "Enum PointOnRegionType Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 点与多边形的关系类型枚举 public enum PointOnRegionType Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Error = 3 错误 Inside = 0 多边形内部 On = 1 多边形上 Outside = 2 多边形外"
  },
  "api/IFoxCAD.Cad.PolylineEx.html": {
    "href": "api/IFoxCAD.Cad.PolylineEx.html",
    "title": "Class PolylineEx",
    "keywords": "Class PolylineEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 多段线扩展类 public static class PolylineEx Inheritance object PolylineEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreatePolyline(IEnumerable<Point3d>, Action<Polyline>?) 根据点集创建多段线 此多段线无默认全局宽度0，无圆弧段 public static Polyline CreatePolyline(this IEnumerable<Point3d> points, Action<Polyline>? action = null) Parameters points IEnumerable<Point3d> 点集 action Action<Polyline> 多段线属性设置委托 Returns Polyline 多段线对象 CreatePolyline(IEnumerable<(Point3d pt, double bulge, double startWidth, double endWidth)>, Action<Polyline>?) 根据点集创建多段线 public static Polyline CreatePolyline(this IEnumerable<(Point3d pt, double bulge, double startWidth, double endWidth)> pts, Action<Polyline>? action = null) Parameters pts IEnumerable<(Point3d pt, double bulge, double startWidth, double endWidth)> 端点表,利用元组(Point3d pt, double bulge, double startWidth, double endWidth) action Action<Polyline> 轻多段线属性设置委托 Returns Polyline 轻多段线对象 GetPoints(Polyline) 获取多段线的端点坐标 public static List<Point3d> GetPoints(this Polyline pl) Parameters pl Polyline 多段线 Returns List<Point3d> 端点坐标集合 GetPoints(Polyline2d) 获取二维多段线的端点坐标 public static IEnumerable<Point3d> GetPoints(this Polyline2d pl2d) Parameters pl2d Polyline2d 二维多段线 Returns IEnumerable<Point3d> 端点坐标集合 GetPoints(Polyline3d) 获取三维多段线的端点坐标 public static IEnumerable<Point3d> GetPoints(this Polyline3d pl3d) Parameters pl3d Polyline3d 三维多段线 Returns IEnumerable<Point3d> 端点坐标集合"
  },
  "api/IFoxCAD.Cad.PostCmd.RunCmdFlag.html": {
    "href": "api/IFoxCAD.Cad.PostCmd.RunCmdFlag.html",
    "title": "Enum PostCmd.RunCmdFlag",
    "keywords": "Enum PostCmd.RunCmdFlag Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public enum PostCmd.RunCmdFlag : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields AcedCmd = 1 AcedCommand = 2 AcedInvoke = 8 AcedPostCommand = 4 AsyncCommand = 32 SendStringToExecute = 16"
  },
  "api/IFoxCAD.Cad.PostCmd.html": {
    "href": "api/IFoxCAD.Cad.PostCmd.html",
    "title": "Class PostCmd",
    "keywords": "Class PostCmd Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class PostCmd Inheritance object PostCmd Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors PostCmd() public PostCmd() Methods SendCommand(ResultBuffer) public static PromptStatus SendCommand(ResultBuffer args) Parameters args ResultBuffer Returns PromptStatus SendCommand(nint) public static PromptStatus SendCommand(nint args) Parameters args nint Returns PromptStatus SendCommand(string, RunCmdFlag) public static PromptStatus SendCommand(string args, PostCmd.RunCmdFlag flag) Parameters args string flag PostCmd.RunCmdFlag Returns PromptStatus"
  },
  "api/IFoxCAD.Cad.QuadEntity.html": {
    "href": "api/IFoxCAD.Cad.QuadEntity.html",
    "title": "Class QuadEntity",
    "keywords": "Class QuadEntity Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 四叉树图元 public class QuadEntity : Rect, IEquatable<Rect>, IComparable<Rect> Inheritance object Rect QuadEntity Implements IEquatable<Rect> IComparable<Rect> Inherited Members Rect.RectTolerance Rect.CadTolerance Rect.Equals(object) Rect.Equals(Rect) Rect.Equals(Rect, double) Rect.GetHashCode() Rect.Contains(Point2d) Rect.Contains(double, double) Rect.Contains(Rect) Rect.IntersectsWith(Rect) Rect.GetCommonPoint(Rect) Rect.ToPoints() Rect.ToPoints4() Rect.Expand(double) Rect.IsRectAngle(List<Point2d>, double) Rect.IsRect(List<Point2d>, double) Rect.GetMinMax(IEnumerable<Point2d>) Rect.RectAnglePointOrder(List<Point2d>) Rect.ToPolyLine() Rect.XCollision<T>(List<T>, Func<T, bool>, Func<T, T, bool>, Action<T>) Rect.ToString() Rect.ToString(IFormatProvider) Rect.ToString(string, IFormatProvider) Rect.CompareTo(Rect) Rect.X Rect.Y Rect.Left Rect.Bottom Rect.Right Rect.Top Rect.Width Rect.Height Rect.Area Rect.MinPoint Rect.MaxPoint Rect.CenterPoint Rect.LeftLower Rect.LeftMidst Rect.LeftUpper Rect.RightUpper Rect.RightMidst Rect.RightBottom Rect.Midst Rect.MidstUpper Rect.MidstBottom Rect.IsPoint object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors QuadEntity(Rect) 四叉树图元 public QuadEntity(Rect box) Parameters box Rect 包围盒"
  },
  "api/IFoxCAD.Cad.QuadTree-1.QTAction.html": {
    "href": "api/IFoxCAD.Cad.QuadTree-1.QTAction.html",
    "title": "Delegate QuadTree<TEntity>.QTAction",
    "keywords": "Delegate QuadTree<TEntity>.QTAction Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 委托:四叉树节点上执行一个操作 public delegate bool QuadTree<TEntity>.QTAction(QuadTreeNode<TEntity> obj) Parameters obj QuadTreeNode<TEntity> Returns bool Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors QTAction(object, nint) public QTAction(object @object, nint method) Parameters object object method nint Methods BeginInvoke(QuadTreeNode<TEntity>, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(QuadTreeNode<TEntity> obj, AsyncCallback callback, object @object) Parameters obj QuadTreeNode<TEntity> callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual bool EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns bool Invoke(QuadTreeNode<TEntity>) public virtual bool Invoke(QuadTreeNode<TEntity> obj) Parameters obj QuadTreeNode<TEntity> Returns bool"
  },
  "api/IFoxCAD.Cad.QuadTree-1.html": {
    "href": "api/IFoxCAD.Cad.QuadTree-1.html",
    "title": "Class QuadTree<TEntity>",
    "keywords": "Class QuadTree<TEntity> Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 根节点控制器 public class QuadTree<TEntity> where TEntity : QuadEntity Type Parameters TEntity 类型接口约束必须有正交矩形 Inheritance object QuadTree<TEntity> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors QuadTree(Rect) 四叉树根节点控制器 public QuadTree(Rect rect) Parameters rect Rect 四叉树矩形范围 Properties Count 四叉树节点的数目 public int Count { get; } Property Value int Methods FindNearEntity(Rect) 找到附近图元 public TEntity? FindNearEntity(Rect rect) Parameters rect Rect Returns TEntity FindNeibor(Rect, QuadTreeFindMode) 找到附近节点图元 [Obsolete(\"找附近节点的并不是最近的图元\")] public TEntity? FindNeibor(Rect rect, QuadTreeFindMode findMode) Parameters rect Rect findMode QuadTreeFindMode Returns TEntity ForEach(QTAction) 执行四叉树中特定的行为 public void ForEach(QuadTree<TEntity>.QTAction action) Parameters action QuadTree<TEntity>.QTAction Insert(TEntity) 通过根节点插入数据项 public void Insert(TEntity ent) Parameters ent TEntity Query(Rect, QuadTreeSelectMode) 查询四叉树,返回给定区域的数据项 public List<TEntity> Query(Rect rect, QuadTreeSelectMode selectMode = QuadTreeSelectMode.IntersectsWith) Parameters rect Rect 矩形选区查询 selectMode QuadTreeSelectMode 查询模式 Returns List<TEntity> 查询结果列表 Remove(Rect) 删除子节点 public void Remove(Rect rect) Parameters rect Rect 根据范围删除 Remove(TEntity) 删除子节点 public void Remove(TEntity ent) Parameters ent TEntity 根据图元删除"
  },
  "api/IFoxCAD.Cad.QuadTreeEvn.html": {
    "href": "api/IFoxCAD.Cad.QuadTreeEvn.html",
    "title": "Class QuadTreeEvn",
    "keywords": "Class QuadTreeEvn Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 四叉树环境变量 public class QuadTreeEvn Inheritance object QuadTreeEvn Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors QuadTreeEvn() public QuadTreeEvn() Fields MinArea 最小的节点有一个面积(一定要大于0) public static double MinArea Field Value double QuadTreeContentsCountSplit 节点内容超过就分裂 public static int QuadTreeContentsCountSplit Field Value int QuadTreeMaximumDepth 最大深度 public static int QuadTreeMaximumDepth Field Value int SelectMode 选择模式 public static QuadTreeSelectMode SelectMode Field Value QuadTreeSelectMode"
  },
  "api/IFoxCAD.Cad.QuadTreeFindMode.html": {
    "href": "api/IFoxCAD.Cad.QuadTreeFindMode.html",
    "title": "Enum QuadTreeFindMode",
    "keywords": "Enum QuadTreeFindMode Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 四叉树查找方向 public enum QuadTreeFindMode Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Bottom = 2 下 Left = 4 左 Right = 8 右 Top = 1 上"
  },
  "api/IFoxCAD.Cad.QuadTreeNode-1.html": {
    "href": "api/IFoxCAD.Cad.QuadTreeNode-1.html",
    "title": "Class QuadTreeNode<TEntity>",
    "keywords": "Class QuadTreeNode<TEntity> Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 子节点 public class QuadTreeNode<TEntity> : Rect, IEquatable<Rect>, IComparable<Rect> where TEntity : QuadEntity Type Parameters TEntity Inheritance object Rect QuadTreeNode<TEntity> Implements IEquatable<Rect> IComparable<Rect> Inherited Members Rect.RectTolerance Rect.CadTolerance Rect.Equals(object) Rect.Equals(Rect) Rect.Equals(Rect, double) Rect.GetHashCode() Rect.Contains(Point2d) Rect.Contains(double, double) Rect.Contains(Rect) Rect.IntersectsWith(Rect) Rect.GetCommonPoint(Rect) Rect.ToPoints() Rect.ToPoints4() Rect.Expand(double) Rect.IsRectAngle(List<Point2d>, double) Rect.IsRect(List<Point2d>, double) Rect.GetMinMax(IEnumerable<Point2d>) Rect.RectAnglePointOrder(List<Point2d>) Rect.ToPolyLine() Rect.XCollision<T>(List<T>, Func<T, bool>, Func<T, T, bool>, Action<T>) Rect.ToString() Rect.ToString(IFormatProvider) Rect.ToString(string, IFormatProvider) Rect.CompareTo(Rect) Rect.X Rect.Y Rect.Left Rect.Bottom Rect.Right Rect.Top Rect.Width Rect.Height Rect.Area Rect.MinPoint Rect.MaxPoint Rect.CenterPoint Rect.LeftLower Rect.LeftMidst Rect.LeftUpper Rect.RightUpper Rect.RightMidst Rect.RightBottom Rect.Midst Rect.MidstUpper Rect.MidstBottom Rect.IsPoint object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors QuadTreeNode(Rect, QuadTreeNode<TEntity>?, int) 四叉树节点 public QuadTreeNode(Rect box, QuadTreeNode<TEntity>? parent, int depth) Parameters box Rect 当前节点边界 parent QuadTreeNode<TEntity> 父节点 depth int 节点深度 Fields Contents 本节点:内容 public List<TEntity> Contents Field Value List<TEntity> Depth 节点的在四叉树的深度 public int Depth Field Value int LeftBottomTree 子节点:第三象限:左下↙ public QuadTreeNode<TEntity>? LeftBottomTree Field Value QuadTreeNode<TEntity> LeftTopTree 子节点:第二象限:左上↖ public QuadTreeNode<TEntity>? LeftTopTree Field Value QuadTreeNode<TEntity> Parent 父节点 public QuadTreeNode<TEntity>? Parent Field Value QuadTreeNode<TEntity> RightBottomTree 子节点:第四象限:右下↘ public QuadTreeNode<TEntity>? RightBottomTree Field Value QuadTreeNode<TEntity> RightTopTree 子节点:第一象限:右上↗ public QuadTreeNode<TEntity>? RightTopTree Field Value QuadTreeNode<TEntity> Properties CountSubTree 本节点和旗下所有子节点:内容群数量 public int CountSubTree { get; } Property Value int Methods ContentsSubTree(List<TEntity>) 本节点和旗下所有子节点:内容群 public void ContentsSubTree(List<TEntity> results) Parameters results List<TEntity> FindNearEntity(Rect) 找临近图元 public TEntity? FindNearEntity(Rect queryArea) Parameters queryArea Rect 查找矩形 Returns TEntity FindNeibor(Rect, QuadTreeFindMode) 找临近节点的图元 [Obsolete(\"找附近节点的并不是最近的图元\")] public TEntity? FindNeibor(Rect queryArea, QuadTreeFindMode findMode) Parameters queryArea Rect 查找矩形 findMode QuadTreeFindMode 查找什么方向 Returns TEntity ForEach(QTAction) 递归全部节点(提供给根用的,所以是全部) public bool ForEach(QuadTree<TEntity>.QTAction action) Parameters action QuadTree<TEntity>.QTAction Returns bool Insert(TEntity) 将数据项递归插入四叉树 public QuadTreeNode<TEntity>? Insert(TEntity ent) Parameters ent TEntity Returns QuadTreeNode<TEntity> Query(Rect, List<TEntity>) 查询范围内的实体 public void Query(Rect queryArea, List<TEntity> results) Parameters queryArea Rect 查询矩形 results List<TEntity> 查询结果 Remove(Rect) 删除子节点内容 public void Remove(Rect queryArea) Parameters queryArea Rect 根据范围删除 Remove(TEntity) 删除图元 public bool Remove(TEntity easeEnt) Parameters easeEnt TEntity 根据图元删除 Returns bool"
  },
  "api/IFoxCAD.Cad.QuadTreeSelectMode.html": {
    "href": "api/IFoxCAD.Cad.QuadTreeSelectMode.html",
    "title": "Enum QuadTreeSelectMode",
    "keywords": "Enum QuadTreeSelectMode Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 四叉树选择模式 public enum QuadTreeSelectMode Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Contains = 1 全包含才选中 IntersectsWith = 0 碰撞到就选中"
  },
  "api/IFoxCAD.Cad.Rect.html": {
    "href": "api/IFoxCAD.Cad.Rect.html",
    "title": "Class Rect",
    "keywords": "Class Rect Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class Rect : IEquatable<Rect>, IComparable<Rect> Inheritance object Rect Implements IEquatable<Rect> IComparable<Rect> Derived QuadEntity QuadTreeNode<TEntity> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors Rect() public Rect() Rect(Point2d, Point2d, bool) 构造矩形类 public Rect(Point2d p1, Point2d p3, bool check = false) Parameters p1 Point2d p3 Point2d check bool 是否检查大小 Rect(double, double, double, double) 矩形类 public Rect(double left, double bottom, double right, double top) Parameters left double 左 bottom double 下 right double 右 top double 上 Fields CadTolerance public static Tolerance CadTolerance Field Value Tolerance RectTolerance public static TolerancePoint2d RectTolerance Field Value TolerancePoint2d Properties Area public double Area { get; } Property Value double Bottom public double Bottom { get; } Property Value double CenterPoint public Point2d CenterPoint { get; } Property Value Point2d Height public double Height { get; } Property Value double IsPoint 是一个点 水平或垂直直线包围盒是面积是0,所以面积是0不一定是点 public bool IsPoint { get; } Property Value bool Left public double Left { get; } Property Value double LeftLower 左下Min public Point2d LeftLower { get; } Property Value Point2d LeftMidst 左中 public Point2d LeftMidst { get; } Property Value Point2d LeftUpper 左上 public Point2d LeftUpper { get; } Property Value Point2d MaxPoint public Point2d MaxPoint { get; } Property Value Point2d Midst 中间 public Point2d Midst { get; } Property Value Point2d MidstBottom 中下 public Point2d MidstBottom { get; } Property Value Point2d MidstUpper 中上 public Point2d MidstUpper { get; } Property Value Point2d MinPoint public Point2d MinPoint { get; } Property Value Point2d Right public double Right { get; } Property Value double RightBottom 右下 public Point2d RightBottom { get; } Property Value Point2d RightMidst 右中 public Point2d RightMidst { get; } Property Value Point2d RightUpper 右上Max public Point2d RightUpper { get; } Property Value Point2d Top public double Top { get; } Property Value double Width public double Width { get; } Property Value double X public double X { get; } Property Value double Y public double Y { get; } Property Value double Methods CompareTo(Rect) public int CompareTo(Rect rect) Parameters rect Rect Returns int Contains(Point2d) public bool Contains(Point2d Point2d) Parameters Point2d Point2d Returns bool Contains(Rect) 四个点都在内部就是包含 public bool Contains(Rect rect) Parameters rect Rect Returns bool Contains(double, double) public bool Contains(double x, double y) Parameters x double y double Returns bool Equals(Rect?) public bool Equals(Rect? b) Parameters b Rect Returns bool Equals(Rect?, double) 比较核心 public bool Equals(Rect? b, double tolerance = 1E-06) Parameters b Rect tolerance double Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Expand(double) 四周膨胀 public Rect Expand(double d) Parameters d double Returns Rect GetCommonPoint(Rect) 获取共点 public Point2d[] GetCommonPoint(Rect other) Parameters other Rect Returns Point2d[] GetHashCode() public override int GetHashCode() Returns int GetMinMax(IEnumerable<Point2d>) 获取点集的包围盒的最小点和最大点(无角度) public static (Point2d boxMin, Point2d boxMax) GetMinMax(IEnumerable<Point2d> pts) Parameters pts IEnumerable<Point2d> Returns (Point2d boxMin, Point2d boxMax) IntersectsWith(Rect) 一个点在内部就是碰撞 public bool IntersectsWith(Rect rect) Parameters rect Rect Returns bool true内部 IsRect(List<Point2d?>?, double) 是否轴向矩形(无角度) public static bool IsRect(List<Point2d?>? ptList, double tolerance = 1E-10) Parameters ptList List<Point2d> tolerance double Returns bool IsRectAngle(List<Point2d?>?, double) 是否矩形(带角度) public static bool IsRectAngle(List<Point2d?>? ptList, double tolerance = 1E-08) Parameters ptList List<Point2d> tolerance double Returns bool RectAnglePointOrder(List<Point2d?>?) 矩形点序逆时针排列,将min点[0],max点是3 public static bool RectAnglePointOrder(List<Point2d?>? pts) Parameters pts List<Point2d> Returns bool ToPoints() public Point2d[] ToPoints() Returns Point2d[] ToPoints4() public (Point2d boxMin, Point2d boxRigthDown, Point2d boxMax, Point2d boxLeftUp) ToPoints4() Returns (Point2d boxMin, Point2d boxRigthDown, Point2d boxMax, Point2d boxLeftUp) ToPolyLine() 创建矩形范围多段线 public Entity ToPolyLine() Returns Entity 多段线对象 ToString() public override sealed string ToString() Returns string ToString(IFormatProvider?) public string ToString(IFormatProvider? provider) Parameters provider IFormatProvider Returns string ToString(string?, IFormatProvider?) public string ToString(string? format = null, IFormatProvider? formatProvider = null) Parameters format string formatProvider IFormatProvider Returns string XCollision<T>(List<T>, Func<T, bool>, Func<T, T, bool>, Action<T>) 列扫碰撞检测(碰撞算法) 比四叉树还快哦~ public static void XCollision<T>(List<T> box, Func<T, bool> firstProcessing, Func<T, T, bool> collisionProcessing, Action<T> lastProcessing) where T : Rect Parameters box List<T> 继承Rect的集合 firstProcessing Func<T, bool> 先处理集合每一个成员;返回true就跳过后续委托 collisionProcessing Func<T, T, bool> 碰撞,返回两个碰撞的成员;返回true就跳过后续委托 lastProcessing Action<T> 后处理集合每一个成员 Type Parameters T Operators operator ==(Rect?, Rect?) public static bool operator ==(Rect? a, Rect? b) Parameters a Rect b Rect Returns bool implicit operator Rect(Rectangle) public static implicit operator Rect(Rectangle rect) Parameters rect Rectangle Returns Rect implicit operator Rect(RectangleF) public static implicit operator Rect(RectangleF rect) Parameters rect RectangleF Returns Rect operator !=(Rect?, Rect?) public static bool operator !=(Rect? a, Rect? b) Parameters a Rect b Rect Returns bool"
  },
  "api/IFoxCAD.Cad.RedrawEx.html": {
    "href": "api/IFoxCAD.Cad.RedrawEx.html",
    "title": "Class RedrawEx",
    "keywords": "Class RedrawEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class RedrawEx Inheritance object RedrawEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Flush(Entity) 刷新实体显示 [Obsolete(\"此处已经被RedrawEx代替\")] public static void Flush(this Entity entity) Parameters entity Entity 实体对象 Flush(ObjectId) 刷新实体显示 [Obsolete(\"此处已经被RedrawEx代替\")] public static void Flush(this ObjectId id) Parameters id ObjectId 实体id Redraw(Entity, BrightEntity) 更改图元显示 public static void Redraw(this Entity ent, BrightEntity bright) Parameters ent Entity 图元,调用时候图元必须提权 bright BrightEntity 更新的方式 Redraw(Editor, Entity?) 刷新屏幕 public static void Redraw(this Editor ed, Entity? ent = null) Parameters ed Editor 编辑器 ent Entity 图元 Redraw(Editor, BrightEditor) 刷新屏幕 public static void Redraw(this Editor ed, BrightEditor bright) Parameters ed Editor 编辑器 bright BrightEditor 更新的方式"
  },
  "api/IFoxCAD.Cad.ResourceDirectory.DirectoryEntry.DataEntry.html": {
    "href": "api/IFoxCAD.Cad.ResourceDirectory.DirectoryEntry.DataEntry.html",
    "title": "Class ResourceDirectory.DirectoryEntry.DataEntry",
    "keywords": "Class ResourceDirectory.DirectoryEntry.DataEntry Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ResourceDirectory.DirectoryEntry.DataEntry Inheritance object ResourceDirectory.DirectoryEntry.DataEntry Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DataEntry() public DataEntry() Fields FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long ResourRVA public byte[] ResourRVA Field Value byte[] ResourSize public byte[] ResourSize Field Value byte[] ResourTest public byte[] ResourTest Field Value byte[] ResourWen public byte[] ResourWen Field Value byte[]"
  },
  "api/IFoxCAD.Cad.ResourceDirectory.DirectoryEntry.html": {
    "href": "api/IFoxCAD.Cad.ResourceDirectory.DirectoryEntry.html",
    "title": "Class ResourceDirectory.DirectoryEntry",
    "keywords": "Class ResourceDirectory.DirectoryEntry Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class ResourceDirectory.DirectoryEntry Inheritance object ResourceDirectory.DirectoryEntry Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors DirectoryEntry() public DirectoryEntry() Fields DataEntryList public ArrayList DataEntryList Field Value ArrayList Id public byte[] Id Field Value byte[] Name public byte[] Name Field Value byte[] NodeDirectoryList public ArrayList NodeDirectoryList Field Value ArrayList"
  },
  "api/IFoxCAD.Cad.ResourceDirectory.html": {
    "href": "api/IFoxCAD.Cad.ResourceDirectory.html",
    "title": "Class ResourceDirectory",
    "keywords": "Class ResourceDirectory Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 资源表 public class ResourceDirectory Inheritance object ResourceDirectory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors ResourceDirectory() public ResourceDirectory() Fields Characteristics public byte[] Characteristics Field Value byte[] EntryList public ArrayList EntryList Field Value ArrayList FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long MajorVersion public byte[] MajorVersion Field Value byte[] MinorVersion public byte[] MinorVersion Field Value byte[] Name public byte[]? Name Field Value byte[] NumberOfIdEntries public byte[] NumberOfIdEntries Field Value byte[] NumberOfNamedEntries public byte[] NumberOfNamedEntries Field Value byte[] TimeDateStamp public byte[] TimeDateStamp Field Value byte[]"
  },
  "api/IFoxCAD.Cad.SectionTable.SectionData.html": {
    "href": "api/IFoxCAD.Cad.SectionTable.SectionData.html",
    "title": "Class SectionTable.SectionData",
    "keywords": "Class SectionTable.SectionData Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class SectionTable.SectionData Inheritance object SectionTable.SectionData Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors SectionData() public SectionData() Fields Characteristics public byte[] Characteristics Field Value byte[] NumberOfLinenumbers public byte[] NumberOfLinenumbers Field Value byte[] NumberOfRelocations public byte[] NumberOfRelocations Field Value byte[] PointerToLinenumbers public byte[] PointerToLinenumbers Field Value byte[] PointerToRawData public byte[] PointerToRawData Field Value byte[] PointerToRelocations public byte[] PointerToRelocations Field Value byte[] SectName public byte[] SectName Field Value byte[] SizeOfRawDataRVA public byte[] SizeOfRawDataRVA Field Value byte[] SizeOfRawDataSize public byte[] SizeOfRawDataSize Field Value byte[] VirtualAddress public byte[] VirtualAddress Field Value byte[]"
  },
  "api/IFoxCAD.Cad.SectionTable.html": {
    "href": "api/IFoxCAD.Cad.SectionTable.html",
    "title": "Class SectionTable",
    "keywords": "Class SectionTable Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 节表 public class SectionTable Inheritance object SectionTable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors SectionTable() public SectionTable() Fields FileEndIndex public long FileEndIndex Field Value long FileStarIndex public long FileStarIndex Field Value long Section public ArrayList Section Field Value ArrayList"
  },
  "api/IFoxCAD.Cad.SelectionSetEx.html": {
    "href": "api/IFoxCAD.Cad.SelectionSetEx.html",
    "title": "Class SelectionSetEx",
    "keywords": "Class SelectionSetEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 选择集扩展类 public static class SelectionSetEx Inheritance object SelectionSetEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ForEach<T>(SelectionSet, Action<T?, LoopState>, OpenMode, bool, bool) 遍历选择集 public static void ForEach<T>(this SelectionSet ss, Action<T?, LoopState> action, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : Entity Parameters ss SelectionSet 选择集 action Action<T, LoopState> 处理函数;(图元,终止方式) openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Type Parameters T 指定图元类型 Exceptions ArgumentNullException ForEach<T>(SelectionSet, Action<T?>, OpenMode, bool, bool) 遍历选择集 public static void ForEach<T>(this SelectionSet ss, Action<T?> action, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : Entity Parameters ss SelectionSet 选择集 action Action<T> 处理函数;(图元) openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Type Parameters T 指定图元类型 GetEntities<T>(SelectionSet, OpenMode, bool, bool) 获取指定类型图元 public static IEnumerable<T> GetEntities<T>(this SelectionSet ss, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : Entity Parameters ss SelectionSet 选择集 openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns IEnumerable<T> 图元集合 Type Parameters T 指定类型 GetObjectIdGroup(SelectionSet) 将选择集的对象按类型分组 public static IEnumerable<IGrouping<string, ObjectId>> GetObjectIdGroup(this SelectionSet ss) Parameters ss SelectionSet 选择集 Returns IEnumerable<IGrouping<string, ObjectId>> 分组后的类型/对象id集合 GetObjectIds<T>(SelectionSet) 从选择集中获取对象id public static IEnumerable<ObjectId> GetObjectIds<T>(this SelectionSet ss) where T : Entity Parameters ss SelectionSet 选择集 Returns IEnumerable<ObjectId> 已选择的对象id集合 Type Parameters T 图元类型 GetSelectObjects<T>(SelectionSet) 获取已选择的对象 public static IEnumerable<T> GetSelectObjects<T>(this SelectionSet ss) where T : SelectedObject Parameters ss SelectionSet 选择集 Returns IEnumerable<T> 已选择的对象集合 Type Parameters T 已选择的对象泛型 GetSelectedObjects(SelectionSet) 获取已选择的对象 public static IEnumerable<SelectedObject> GetSelectedObjects(this SelectionSet ss) Parameters ss SelectionSet 选择集 Returns IEnumerable<SelectedObject> 已选择的对象集合"
  },
  "api/IFoxCAD.Cad.Sequence.html": {
    "href": "api/IFoxCAD.Cad.Sequence.html",
    "title": "Enum Sequence",
    "keywords": "Enum Sequence Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 加载时优先级 [Flags] public enum Sequence : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields First = 0 Last = 1"
  },
  "api/IFoxCAD.Cad.SingleKeyWordHook.html": {
    "href": "api/IFoxCAD.Cad.SingleKeyWordHook.html",
    "title": "Class SingleKeyWordHook",
    "keywords": "Class SingleKeyWordHook Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 关键字不需要空格钩子 By DYH 20230508 public class SingleKeyWordHook : IDisposable Inheritance object SingleKeyWordHook Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors SingleKeyWordHook(bool) 单字母关键字免输回车钩子 public SingleKeyWordHook(bool escapeMode = true) Parameters escapeMode bool 使用esc(填false则使用回车) Properties IsDisposed 已经销毁 public bool IsDisposed { get; } Property Value bool IsResponsed 是否响应了 public bool IsResponsed { get; } Property Value bool Key 上一个触发的关键字 public Keys Key { get; } Property Value Keys StringResult 上一个触发的关键字字符串 public string StringResult { get; } Property Value string Methods AddKeys(KeywordCollection) 添加Keys public void AddKeys(KeywordCollection keywordCollection) Parameters keywordCollection KeywordCollection 关键字集合 AddKeys(params Keys[]) 添加Keys public void AddKeys(params Keys[] values) Parameters values Keys[] Keys集合 Clear() 清空Keys public void Clear() Dispose() public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Pause() 暂停工作 public void Pause() Remove(params Keys[]) 移除Keys public void Remove(params Keys[] values) Parameters values Keys[] Keys集合 Reset() 复位响应状态，每个循环开始时使用 public void Reset() Working() 开始工作 public void Working()"
  },
  "api/IFoxCAD.Cad.StandardMetaRecord.html": {
    "href": "api/IFoxCAD.Cad.StandardMetaRecord.html",
    "title": "Struct StandardMetaRecord",
    "keywords": "Struct StandardMetaRecord Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public struct StandardMetaRecord Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Function public ushort Function Field Value ushort Parameters public ushort[] Parameters Field Value ushort[] Size public uint Size Field Value uint"
  },
  "api/IFoxCAD.Cad.SymModes.html": {
    "href": "api/IFoxCAD.Cad.SymModes.html",
    "title": "Enum SymModes",
    "keywords": "Enum SymModes Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll [Flags] public enum SymModes : ushort Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields All = BlockTable | Option1 | Option2 BlockTable = 1 块表 DimStyleTable = 16 标注样式表 LayerTable = 2 图层表 LinetypeTable = 32 线型表 Option1 = LayerTable | TextStyleTable | RegAppTable | DimStyleTable | LinetypeTable Option2 = UcsTable | ViewTable | ViewportTable RegAppTable = 8 注册应用程序表 TextStyleTable = 4 文字样式表 UcsTable = 64 用户坐标系表 ViewTable = 128 视图表 ViewportTable = 256 视口表"
  },
  "api/IFoxCAD.Cad.SymbolTable-2.html": {
    "href": "api/IFoxCAD.Cad.SymbolTable-2.html",
    "title": "Class SymbolTable<TTable, TRecord>",
    "keywords": "Class SymbolTable<TTable, TRecord> Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 符号表管理类 public class SymbolTable<TTable, TRecord> : IEnumerable<ObjectId>, IEnumerable where TTable : SymbolTable where TRecord : SymbolTableRecord, new() Type Parameters TTable 符号表 TRecord 符号表记录 Inheritance object SymbolTable<TTable, TRecord> Implements IEnumerable<ObjectId> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionEx.ToCollection(IEnumerable<ObjectId>) ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Properties CurrentSymbolTable 当前符号表 public TTable CurrentSymbolTable { get; } Property Value TTable this[string] 索引器 public ObjectId this[string key] { get; } Parameters key string 对象名称 Property Value ObjectId 对象的id Methods Add(string, Action<TRecord>?) 添加符号表记录 public ObjectId Add(string name, Action<TRecord>? action = null) Parameters name string 符号表记录名 action Action<TRecord> 符号表记录处理函数的无返回值委托 Returns ObjectId 对象id Change(ObjectId, Action<TRecord>) 修改符号表 public void Change(ObjectId id, Action<TRecord> action) Parameters id ObjectId 符号表记录id action Action<TRecord> 修改委托 Change(string, Action<TRecord>) 修改符号表 public void Change(string name, Action<TRecord> action) Parameters name string 符号表记录名 action Action<TRecord> 修改委托 ForEach(Action<TRecord, LoopState, int>, OpenMode, bool, bool, bool) 遍历符号表,执行委托(允许循环中断,输出索引值) public void ForEach(Action<TRecord, LoopState, int> task, OpenMode openMode = 0, bool checkIdOk = true, bool openErased = false, bool openLockedLayer = false) Parameters task Action<TRecord, LoopState, int> 要执行的委托 openMode OpenMode 打开模式,默认为只读 checkIdOk bool 检查id是否删除,默认true openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 ForEach(Action<TRecord, LoopState>, OpenMode, bool, bool, bool) 遍历符号表,执行委托(允许循环中断) public void ForEach(Action<TRecord, LoopState> task, OpenMode openMode = 0, bool checkIdOk = true, bool openErased = false, bool openLockedLayer = false) Parameters task Action<TRecord, LoopState> 要执行的委托 openMode OpenMode 打开模式,默认为只读 checkIdOk bool 检查id是否删除,默认true openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 ForEach(Action<TRecord>, OpenMode, bool, bool, bool) 遍历符号表,执行委托 public void ForEach(Action<TRecord> task, OpenMode openMode = 0, bool checkIdOk = true, bool openErased = false, bool openLockedLayer = false) Parameters task Action<TRecord> 要运行的委托 openMode OpenMode 打开模式,默认为只读 checkIdOk bool 检查id是否删除,默认true openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 GetEnumerator() public IEnumerator<ObjectId> GetEnumerator() Returns IEnumerator<ObjectId> GetRecord(ObjectId?, OpenMode?, bool, bool) 获取符号表记录 public TRecord? GetRecord(ObjectId? id, OpenMode? openMode = 0, bool openErased = false, bool openLockedLayer = false) Parameters id ObjectId 符号表记录的id openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns TRecord 符号表记录 GetRecord(string, OpenMode, bool, bool) 获取符号表记录 public TRecord? GetRecord(string name, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) Parameters name string 符号表记录名 openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns TRecord 符号表记录 GetRecordNames() 获取符号表记录的名字集合 public IEnumerable<string> GetRecordNames() Returns IEnumerable<string> 记录的名字集合 GetRecordNames(Func<TRecord, bool>) 获取符合过滤条件的符号表记录名字集合 public IEnumerable<string> GetRecordNames(Func<TRecord, bool> filter) Parameters filter Func<TRecord, bool> 过滤器委托 Returns IEnumerable<string> 记录的名字集合 GetRecords() 获取符号表记录 public IEnumerable<TRecord> GetRecords() Returns IEnumerable<TRecord> 符号表记录集合 Has(ObjectId) 判断是否存在符号表记录 public bool Has(ObjectId objectId) Parameters objectId ObjectId 记录id Returns bool 存在返回 true, 不存在返回 false Has(string) 判断是否存在符号表记录 public bool Has(string key) Parameters key string 记录名 Returns bool 存在返回 true, 不存在返回 false Remove(ObjectId) 删除符号表记录 public void Remove(ObjectId id) Parameters id ObjectId 符号表记录对象id Remove(string) 删除符号表记录 public void Remove(string name) Parameters name string 符号表记录名"
  },
  "api/IFoxCAD.Cad.SymbolTableEx.html": {
    "href": "api/IFoxCAD.Cad.SymbolTableEx.html",
    "title": "Class SymbolTableEx",
    "keywords": "Class SymbolTableEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 符号表类扩展函数 public static class SymbolTableEx Inheritance object SymbolTableEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Add(SymbolTable<BlockTable, BlockTableRecord>, string, params Entity[]) 添加块定义 public static ObjectId Add(this SymbolTable<BlockTable, BlockTableRecord> table, string name, params Entity[] ents) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 name string 块名 ents Entity[] 图元(包括属性) Returns ObjectId Add(SymbolTable<BlockTable, BlockTableRecord>, string, Action<BlockTableRecord>?, Func<IEnumerable<Entity>>?, Func<IEnumerable<AttributeDefinition>>?) 添加块定义 public static ObjectId Add(this SymbolTable<BlockTable, BlockTableRecord> table, string name, Action<BlockTableRecord>? action = null, Func<IEnumerable<Entity>>? ents = null, Func<IEnumerable<AttributeDefinition>>? attdef = null) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 name string 块名 action Action<BlockTableRecord> 对所添加块表的委托n ents Func<IEnumerable<Entity>> 添加图元的委托 attdef Func<IEnumerable<AttributeDefinition>> 添加属性定义的委托 Returns ObjectId 块定义id Add(SymbolTable<BlockTable, BlockTableRecord>, string, IEnumerable<Entity>?, IEnumerable<AttributeDefinition>?) 添加块定义 public static ObjectId Add(this SymbolTable<BlockTable, BlockTableRecord> table, string name, IEnumerable<Entity>? ents = null, IEnumerable<AttributeDefinition>? attdef = null) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 name string 块名 ents IEnumerable<Entity> 图元 attdef IEnumerable<AttributeDefinition> 属性定义 Returns ObjectId Add(SymbolTable<LayerTable, LayerTableRecord>, string, Color) 添加图层 public static ObjectId Add(this SymbolTable<LayerTable, LayerTableRecord> table, string name, Color color) Parameters table SymbolTable<LayerTable, LayerTableRecord> 图层符号表 name string 图层名 color Color 图层颜色 Returns ObjectId 图层id Add(SymbolTable<LayerTable, LayerTableRecord>, string, int) 添加图层 public static ObjectId Add(this SymbolTable<LayerTable, LayerTableRecord> table, string name, int colorIndex) Parameters table SymbolTable<LayerTable, LayerTableRecord> 图层符号表 name string 图层名 colorIndex int 图层颜色索引值 Returns ObjectId 图层id Add(SymbolTable<LinetypeTable, LinetypeTableRecord>, string, string, double, double[]) 添加线型 public static ObjectId Add(this SymbolTable<LinetypeTable, LinetypeTableRecord> table, string name, string description, double length, double[] dash) Parameters table SymbolTable<LinetypeTable, LinetypeTableRecord> 线型表 name string 线型名 description string 线型说明 length double 线型长度 dash double[] 笔画长度数组 Returns ObjectId 线型id Add(SymbolTable<TextStyleTable, TextStyleTableRecord>, string, FontTTF, double) 添加文字样式记录 public static ObjectId Add(this SymbolTable<TextStyleTable, TextStyleTableRecord> table, string textStyleName, FontTTF fontTTF, double xscale = 1) Parameters table SymbolTable<TextStyleTable, TextStyleTableRecord> 文字样式表 textStyleName string 文字样式名 fontTTF FontTTF 字体名枚举 xscale double 宽度比例 Returns ObjectId 文字样式Id Add(SymbolTable<TextStyleTable, TextStyleTableRecord>, string, string, double) 添加文字样式记录 public static ObjectId Add(this SymbolTable<TextStyleTable, TextStyleTableRecord> table, string textStyleName, string font, double xscale = 1) Parameters table SymbolTable<TextStyleTable, TextStyleTableRecord> 文字样式表 textStyleName string 文字样式名 font string 字体名 xscale double 宽度比例 Returns ObjectId 文字样式Id AddAttsToBlocks(SymbolTable<BlockTable, BlockTableRecord>, ObjectId, List<AttributeDefinition>) 添加属性到块定义 public static void AddAttsToBlocks(this SymbolTable<BlockTable, BlockTableRecord> table, ObjectId id, List<AttributeDefinition> atts) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 id ObjectId 块定义id atts List<AttributeDefinition> 属性列表 AddAttsToBlocks(SymbolTable<BlockTable, BlockTableRecord>, string, List<AttributeDefinition>) 添加属性到块定义 public static void AddAttsToBlocks(this SymbolTable<BlockTable, BlockTableRecord> table, string name, List<AttributeDefinition> atts) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 name string 块定义名字 atts List<AttributeDefinition> 属性列表 AddWithChange(SymbolTable<TextStyleTable, TextStyleTableRecord>, string, string, string, double, double, bool) 添加文字样式记录,如果存在就默认强制替换 此函数为了 二惊 和 edata 而设 public static ObjectId AddWithChange(this SymbolTable<TextStyleTable, TextStyleTableRecord> table, string textStyleName, string smallFont, string bigFont = \"\", double xScale = 1, double height = 0, bool forceChange = true) Parameters table SymbolTable<TextStyleTable, TextStyleTableRecord> 文字样式表 textStyleName string 文字样式名 smallFont string 字体名 bigFont string 大字体名 xScale double 宽度比例 height double 高度 forceChange bool 是否强制替换 Returns ObjectId 文字样式Id Delete(SymbolTable<LayerTable, LayerTableRecord>, string) 删除图层 public static bool Delete(this SymbolTable<LayerTable, LayerTableRecord> table, string name) Parameters table SymbolTable<LayerTable, LayerTableRecord> 层表 name string 图层名 Returns bool 成功返回 true，失败返回 false GetBlockFrom(SymbolTable<BlockTable, BlockTableRecord>, string, bool) 从文件中获取块定义 public static ObjectId GetBlockFrom(this SymbolTable<BlockTable, BlockTableRecord> table, string fileName, bool over) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 fileName string 文件名 over bool 是否覆盖 Returns ObjectId 块定义Id GetBlockFrom(SymbolTable<BlockTable, BlockTableRecord>, string, string, bool) 从文件中获取块定义 public static ObjectId GetBlockFrom(this SymbolTable<BlockTable, BlockTableRecord> table, string fileName, string blockName, bool over) Parameters table SymbolTable<BlockTable, BlockTableRecord> 块表 fileName string 文件名 blockName string 块定义名 over bool 是否覆盖 Returns ObjectId 块定义Id Rename(SymbolTable<LayerTable, LayerTableRecord>, string, string) 更改图层名 public static ObjectId Rename(this SymbolTable<LayerTable, LayerTableRecord> table, string Oldname, string NewName) Parameters table SymbolTable<LayerTable, LayerTableRecord> 图层符号表 Oldname string 旧图层名 NewName string 新图层名 Returns ObjectId"
  },
  "api/IFoxCAD.Cad.SymbolTableRecordEx.html": {
    "href": "api/IFoxCAD.Cad.SymbolTableRecordEx.html",
    "title": "Class SymbolTableRecordEx",
    "keywords": "Class SymbolTableRecordEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 符号表记录扩展类 public static class SymbolTableRecordEx Inheritance object SymbolTableRecordEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddEntity(BlockTableRecord, Entity) 添加实体对象 public static ObjectId AddEntity(this BlockTableRecord btr, Entity entity) Parameters btr BlockTableRecord 块表记录 entity Entity 实体 Returns ObjectId 对象 id AddEntity(BlockTableRecord, params Entity[]) 添加多个实体 public static IEnumerable<ObjectId> AddEntity(this BlockTableRecord btr, params Entity[] ents) Parameters btr BlockTableRecord 块表记录 ents Entity[] 实体集合 Returns IEnumerable<ObjectId> 对象 id 列表 AddEntity<T>(BlockTableRecord, IEnumerable<T>) 添加实体集合 public static IEnumerable<ObjectId> AddEntity<T>(this BlockTableRecord btr, IEnumerable<T> ents) where T : Entity Parameters btr BlockTableRecord 块表记录 ents IEnumerable<T> 实体集合 Returns IEnumerable<ObjectId> 对象 id 列表 Type Parameters T 实体类型 DeepCloneEx(BlockTableRecord, ObjectIdCollection, IdMapping) 深度克隆id到块表记录 0x01 此方法不允许是未添加数据库的图元,因此它是id 0x02 若为未添加数据库图元,则利用entity.Clone();同时不需要考虑动态块属性,可以使用entity.GetTransformedCopy public static void DeepCloneEx(this BlockTableRecord btr, ObjectIdCollection objIds, IdMapping maoOut) Parameters btr BlockTableRecord 克隆到当前块表记录,相当于原地克隆 克隆到目标块表记录内,相当于制作新块 objIds ObjectIdCollection 图元id集合,注意所有成员都要在同一个空间中 maoOut IdMapping 返回克隆后的id词典 ForEach<TRecord>(TRecord, Action<ObjectId, LoopState, int>) 遍历符号表记录,执行委托(允许循环中断,输出索引值) public static void ForEach<TRecord>(this TRecord record, Action<ObjectId, LoopState, int> task) where TRecord : SymbolTableRecord, IEnumerable Parameters record TRecord 符号表记录 task Action<ObjectId, LoopState, int> 要执行的委托 Type Parameters TRecord ForEach<TRecord>(TRecord, Action<ObjectId, LoopState>) 遍历符号表记录,执行委托(允许循环中断) public static void ForEach<TRecord>(this TRecord record, Action<ObjectId, LoopState> task) where TRecord : SymbolTableRecord, IEnumerable Parameters record TRecord 符号表记录 task Action<ObjectId, LoopState> 要执行的委托 Type Parameters TRecord ForEach<TRecord>(TRecord, Action<ObjectId>) 遍历符号表记录,执行委托 public static void ForEach<TRecord>(this TRecord record, Action<ObjectId> task) where TRecord : SymbolTableRecord, IEnumerable Parameters record TRecord 符号表记录 task Action<ObjectId> 要运行的委托 Type Parameters TRecord GetDrawOrderTable(BlockTableRecord, OpenMode, bool, bool) 获取绘制顺序表 public static DrawOrderTable GetDrawOrderTable(this BlockTableRecord btr, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) Parameters btr BlockTableRecord 块表 openMode OpenMode 开启方式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns DrawOrderTable 绘制顺序表 GetEntities<T>(BlockTableRecord, OpenMode, bool, bool) 获取块表记录内的指定类型的实体 (此处不会检查id.IsOk()) public static IEnumerable<T> GetEntities<T>(this BlockTableRecord btr, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : Entity Parameters btr BlockTableRecord 块表记录 openMode OpenMode 打开模式 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns IEnumerable<T> 实体集合 Type Parameters T 实体类型 GetObjectIds(BlockTableRecord) 按类型获取实体Id的分组 public static IEnumerable<IGrouping<string, ObjectId>> GetObjectIds(this BlockTableRecord btr) Parameters btr BlockTableRecord 块表记录 Returns IEnumerable<IGrouping<string, ObjectId>> 实体Id分组 GetObjectIds<T>(BlockTableRecord) 按类型获取实体Id public static IEnumerable<ObjectId> GetObjectIds<T>(this BlockTableRecord btr) where T : Entity Parameters btr BlockTableRecord 块表记录 Returns IEnumerable<ObjectId> 实体Id集合 Type Parameters T 实体类型 InsertBlock(BlockTableRecord, Point3d, ObjectId, Scale3d, double, Dictionary<string, string>?) 插入块参照 public static ObjectId InsertBlock(this BlockTableRecord blockTableRecord, Point3d position, ObjectId blockId, Scale3d scale = null, double rotation = 0, Dictionary<string, string>? atts = null) Parameters blockTableRecord BlockTableRecord position Point3d 插入点 blockId ObjectId 块定义id scale Scale3d 块插入比例，默认为1 rotation double 块插入旋转角(弧度)，默认为0 atts Dictionary<string, string> 属性字典{Tag,Value}，默认为null Returns ObjectId 块参照对象id InsertBlock(BlockTableRecord, Point3d, string, Scale3d, double, Dictionary<string, string>?) 插入块参照 public static ObjectId InsertBlock(this BlockTableRecord blockTableRecord, Point3d position, string blockName, Scale3d scale = null, double rotation = 0, Dictionary<string, string>? atts = null) Parameters blockTableRecord BlockTableRecord 块表记录 position Point3d 插入点 blockName string 块名 scale Scale3d 块插入比例，默认为1 rotation double 块插入旋转角(弧度)，默认为0 atts Dictionary<string, string> 属性字典{Tag,Value}，默认为null Returns ObjectId 块参照对象id"
  },
  "api/IFoxCAD.Cad.TagClipboardInfo.html": {
    "href": "api/IFoxCAD.Cad.TagClipboardInfo.html",
    "title": "Struct TagClipboardInfo",
    "keywords": "Struct TagClipboardInfo Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll ARX剪贴板结构 public struct TagClipboardInfo : IEquatable<TagClipboardInfo> Implements IEquatable<TagClipboardInfo> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Constructors TagClipboardInfo(string, Point3d) cad剪贴板 public TagClipboardInfo(string tmpFile, Point3d insert) Parameters tmpFile string 临时dwg的保存路径 insert Point3d 粘贴点 Fields AcadDwgview public static nint AcadDwgview Field Value nint MainWindowThreadId public static int MainWindowThreadId Field Value int chData public string chData Field Value string dptInsert public WindowsAPI.Point3D dptInsert Field Value WindowsAPI.Point3D dwThreadId public int dwThreadId Field Value int mpView public nint mpView Field Value nint nFlags public int nFlags Field Value int nLen public int nLen Field Value int nType public int nType Field Value int rectGDI public WindowsAPI.IntRect rectGDI Field Value WindowsAPI.IntRect szSignature public string szSignature Field Value string szSourceFile public string szSourceFile Field Value string szTempFile public string szTempFile Field Value string Properties File public string File { get; } Property Value string Point public Point3d Point { get; } Property Value Point3d Methods CloneToPtr() public nint CloneToPtr() Returns nint Equals(TagClipboardInfo) public bool Equals(TagClipboardInfo other) Parameters other TagClipboardInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(TagClipboardInfo, TagClipboardInfo) public static bool operator ==(TagClipboardInfo a, TagClipboardInfo b) Parameters a TagClipboardInfo b TagClipboardInfo Returns bool operator !=(TagClipboardInfo, TagClipboardInfo) public static bool operator !=(TagClipboardInfo a, TagClipboardInfo b) Parameters a TagClipboardInfo b TagClipboardInfo Returns bool"
  },
  "api/IFoxCAD.Cad.TolerancePoint2d.html": {
    "href": "api/IFoxCAD.Cad.TolerancePoint2d.html",
    "title": "Class TolerancePoint2d",
    "keywords": "Class TolerancePoint2d Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll Linq Distinct 消重比较两点在容差范围内就去除 public class TolerancePoint2d : IEqualityComparer<Point2d> Inheritance object TolerancePoint2d Implements IEqualityComparer<Point2d> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors TolerancePoint2d(double) 构造函数 public TolerancePoint2d(double tolerance = 1E-06) Parameters tolerance double 容差 Methods Equals(Point2d, Point2d) public bool Equals(Point2d a, Point2d b) Parameters a Point2d b Point2d Returns bool GetHashCode(Point2d) public int GetHashCode(Point2d obj) Parameters obj Point2d Returns int"
  },
  "api/IFoxCAD.Cad.Tools.html": {
    "href": "api/IFoxCAD.Cad.Tools.html",
    "title": "Class Tools",
    "keywords": "Class Tools Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class Tools Inheritance object Tools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods TestTimes(int, string, Action, TimeEnum) 纳秒计时器 public static void TestTimes(int count, string message, Action action, Timer.TimeEnum timeEnum = TimeEnum.Millisecond) Parameters count int message string action Action timeEnum Timer.TimeEnum TestTimes2(int, string, Action) 计时器 public static void TestTimes2(int count, string message, Action action) Parameters count int message string action Action TestTimes3(int, string, Action<int>) 计时器 public static void TestTimes3(int count, string message, Action<int> action) Parameters count int message string action Action<int>"
  },
  "api/IFoxCAD.Cad.TransactionEx.html": {
    "href": "api/IFoxCAD.Cad.TransactionEx.html",
    "title": "Class TransactionEx",
    "keywords": "Class TransactionEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll cad的事务的扩展类 public static class TransactionEx Inheritance object TransactionEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetObject(Transaction, ObjectId, OpenMode, bool, bool) 根据对象id获取对象 public static DBObject GetObject(this Transaction tr, ObjectId id, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) Parameters tr Transaction id ObjectId 对象id openMode OpenMode 打开模式,默认为只读 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns DBObject 数据库DBObject对象 GetObject<T>(Transaction, ObjectId, OpenMode, bool, bool) 根据对象id获取图元对象 public static T? GetObject<T>(this Transaction tr, ObjectId id, OpenMode openMode = 0, bool openErased = false, bool openLockedLayer = false) where T : DBObject Parameters tr Transaction id ObjectId 对象id openMode OpenMode 打开模式,默认为只读 openErased bool 是否打开已删除对象,默认为不打开 openLockedLayer bool 是否打开锁定图层对象,默认为不打开 Returns T 图元对象,类型不匹配时抛异常 Type Parameters T 要获取的图元对象的类型"
  },
  "api/IFoxCAD.Cad.TypedValueList.html": {
    "href": "api/IFoxCAD.Cad.TypedValueList.html",
    "title": "Class TypedValueList",
    "keywords": "Class TypedValueList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 用于集中管理扩展数据/扩展字典/resultbuffer的类 public class TypedValueList : List<TypedValue>, IList<TypedValue>, ICollection<TypedValue>, IList, ICollection, IReadOnlyList<TypedValue>, IReadOnlyCollection<TypedValue>, IEnumerable<TypedValue>, IEnumerable Inheritance object List<TypedValue> TypedValueList Implements IList<TypedValue> ICollection<TypedValue> IList ICollection IReadOnlyList<TypedValue> IReadOnlyCollection<TypedValue> IEnumerable<TypedValue> IEnumerable Derived LispList XDataList XRecordDataList Inherited Members List<TypedValue>.Add(TypedValue) List<TypedValue>.AddRange(IEnumerable<TypedValue>) List<TypedValue>.AsReadOnly() List<TypedValue>.BinarySearch(int, int, TypedValue, IComparer<TypedValue>) List<TypedValue>.BinarySearch(TypedValue) List<TypedValue>.BinarySearch(TypedValue, IComparer<TypedValue>) List<TypedValue>.Clear() List<TypedValue>.Contains(TypedValue) List<TypedValue>.ConvertAll<TOutput>(Converter<TypedValue, TOutput>) List<TypedValue>.CopyTo(TypedValue[]) List<TypedValue>.CopyTo(int, TypedValue[], int, int) List<TypedValue>.CopyTo(TypedValue[], int) List<TypedValue>.EnsureCapacity(int) List<TypedValue>.Exists(Predicate<TypedValue>) List<TypedValue>.Find(Predicate<TypedValue>) List<TypedValue>.FindAll(Predicate<TypedValue>) List<TypedValue>.FindIndex(Predicate<TypedValue>) List<TypedValue>.FindIndex(int, Predicate<TypedValue>) List<TypedValue>.FindIndex(int, int, Predicate<TypedValue>) List<TypedValue>.FindLast(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, int, Predicate<TypedValue>) List<TypedValue>.ForEach(Action<TypedValue>) List<TypedValue>.GetEnumerator() List<TypedValue>.GetRange(int, int) List<TypedValue>.IndexOf(TypedValue) List<TypedValue>.IndexOf(TypedValue, int) List<TypedValue>.IndexOf(TypedValue, int, int) List<TypedValue>.Insert(int, TypedValue) List<TypedValue>.InsertRange(int, IEnumerable<TypedValue>) List<TypedValue>.LastIndexOf(TypedValue) List<TypedValue>.LastIndexOf(TypedValue, int) List<TypedValue>.LastIndexOf(TypedValue, int, int) List<TypedValue>.Remove(TypedValue) List<TypedValue>.RemoveAll(Predicate<TypedValue>) List<TypedValue>.RemoveAt(int) List<TypedValue>.RemoveRange(int, int) List<TypedValue>.Reverse() List<TypedValue>.Reverse(int, int) List<TypedValue>.Sort() List<TypedValue>.Sort(IComparer<TypedValue>) List<TypedValue>.Sort(int, int, IComparer<TypedValue>) List<TypedValue>.Sort(Comparison<TypedValue>) List<TypedValue>.ToArray() List<TypedValue>.TrimExcess() List<TypedValue>.TrueForAll(Predicate<TypedValue>) List<TypedValue>.Capacity List<TypedValue>.Count List<TypedValue>.this[int] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors TypedValueList() 默认无参构造函数 public TypedValueList() TypedValueList(IEnumerable<TypedValue>) 采用 TypedValue 迭代器构造 TypedValueList public TypedValueList(IEnumerable<TypedValue> values) Parameters values IEnumerable<TypedValue> Methods Add(int, object) 添加数据 public virtual void Add(int code, object obj) Parameters code int 组码 obj object 组码值 ToString() 转换为字符串 public override string ToString() Returns string ResultBuffer 字符串 Operators implicit operator TypedValueList(ResultBuffer) ResultBuffer 隐式转换到 TypedValueList public static implicit operator TypedValueList(ResultBuffer buffer) Parameters buffer ResultBuffer ResultBuffer 实例 Returns TypedValueList implicit operator TypedValueList(TypedValue[]) TypedValue 数组隐式转换到 TypedValueList public static implicit operator TypedValueList(TypedValue[] values) Parameters values TypedValue[] TypedValue 数组 Returns TypedValueList implicit operator ResultBuffer(TypedValueList) TypedValueList 隐式转换到 ResultBuffer public static implicit operator ResultBuffer(TypedValueList values) Parameters values TypedValueList TypedValueList 实例 Returns ResultBuffer implicit operator TypedValue[](TypedValueList) TypedValueList 隐式转换到 TypedValue 数组 public static implicit operator TypedValue[](TypedValueList values) Parameters values TypedValueList TypedValueList 实例 Returns TypedValue[]"
  },
  "api/IFoxCAD.Cad.VectorEx.html": {
    "href": "api/IFoxCAD.Cad.VectorEx.html",
    "title": "Class VectorEx",
    "keywords": "Class VectorEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class VectorEx Inheritance object VectorEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AngleOnPlane(Vector3d?, Plane?) 向量在平面上的弧度 public static double AngleOnPlane(this Vector3d? vector, Plane? plane = null) Parameters vector Vector3d 向量 plane Plane 平面 Returns double 弧度 Convert2d(Vector3d) 转换为2d向量 public static Vector2d Convert2d(this Vector3d vector3d) Parameters vector3d Vector3d 3d向量 Returns Vector2d 2d向量 Convert3d(Vector2d, double) 转换为3d向量 public static Vector3d Convert3d(this Vector2d vector2d, double z = 0) Parameters vector2d Vector2d 2d向量 z double z值 Returns Vector3d 3d向量 Cross2d(Vector2d, Vector2d) 2d叉乘 public static double Cross2d(this Vector2d a, Vector2d b) Parameters a Vector2d 向量a b Vector2d 向量b Returns double 叉乘值 Cross2d(Vector3d, Vector3d) 2d叉乘 public static double Cross2d(this Vector3d a, Vector3d b) Parameters a Vector3d 向量a b Vector3d 向量b Returns double 叉乘值 Z20(Vector3d) 向量Z值归零 public static Vector3d Z20(this Vector3d vector3d) Parameters vector3d Vector3d 向量 Returns Vector3d"
  },
  "api/IFoxCAD.Cad.WindowsMetaHeader.html": {
    "href": "api/IFoxCAD.Cad.WindowsMetaHeader.html",
    "title": "Struct WindowsMetaHeader",
    "keywords": "Struct WindowsMetaHeader Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public struct WindowsMetaHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields FileSize public uint FileSize Field Value uint FileType public ushort FileType Field Value ushort HeaderSize public ushort HeaderSize Field Value ushort MaxRecordSize public uint MaxRecordSize Field Value uint NumOfObjects public ushort NumOfObjects Field Value ushort NumOfParams public ushort NumOfParams Field Value ushort Version public ushort Version Field Value ushort"
  },
  "api/IFoxCAD.Cad.WorldDrawEvent.html": {
    "href": "api/IFoxCAD.Cad.WorldDrawEvent.html",
    "title": "Delegate WorldDrawEvent",
    "keywords": "Delegate WorldDrawEvent Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public delegate void WorldDrawEvent(WorldDraw draw) Parameters draw WorldDraw Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors WorldDrawEvent(object, nint) public WorldDrawEvent(object @object, nint method) Parameters object object method nint Methods BeginInvoke(WorldDraw, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(WorldDraw draw, AsyncCallback callback, object @object) Parameters draw WorldDraw callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(WorldDraw) public virtual void Invoke(WorldDraw draw) Parameters draw WorldDraw"
  },
  "api/IFoxCAD.Cad.XDataList.html": {
    "href": "api/IFoxCAD.Cad.XDataList.html",
    "title": "Class XDataList",
    "keywords": "Class XDataList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 扩展数据封装类 public class XDataList : TypedValueList, IList<TypedValue>, ICollection<TypedValue>, IList, ICollection, IReadOnlyList<TypedValue>, IReadOnlyCollection<TypedValue>, IEnumerable<TypedValue>, IEnumerable Inheritance object List<TypedValue> TypedValueList XDataList Implements IList<TypedValue> ICollection<TypedValue> IList ICollection IReadOnlyList<TypedValue> IReadOnlyCollection<TypedValue> IEnumerable<TypedValue> IEnumerable Inherited Members TypedValueList.ToString() List<TypedValue>.Add(TypedValue) List<TypedValue>.AddRange(IEnumerable<TypedValue>) List<TypedValue>.AsReadOnly() List<TypedValue>.BinarySearch(int, int, TypedValue, IComparer<TypedValue>) List<TypedValue>.BinarySearch(TypedValue) List<TypedValue>.BinarySearch(TypedValue, IComparer<TypedValue>) List<TypedValue>.Clear() List<TypedValue>.Contains(TypedValue) List<TypedValue>.ConvertAll<TOutput>(Converter<TypedValue, TOutput>) List<TypedValue>.CopyTo(TypedValue[]) List<TypedValue>.CopyTo(int, TypedValue[], int, int) List<TypedValue>.CopyTo(TypedValue[], int) List<TypedValue>.EnsureCapacity(int) List<TypedValue>.Exists(Predicate<TypedValue>) List<TypedValue>.Find(Predicate<TypedValue>) List<TypedValue>.FindAll(Predicate<TypedValue>) List<TypedValue>.FindIndex(Predicate<TypedValue>) List<TypedValue>.FindIndex(int, Predicate<TypedValue>) List<TypedValue>.FindIndex(int, int, Predicate<TypedValue>) List<TypedValue>.FindLast(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, int, Predicate<TypedValue>) List<TypedValue>.ForEach(Action<TypedValue>) List<TypedValue>.GetEnumerator() List<TypedValue>.GetRange(int, int) List<TypedValue>.IndexOf(TypedValue) List<TypedValue>.IndexOf(TypedValue, int) List<TypedValue>.IndexOf(TypedValue, int, int) List<TypedValue>.Insert(int, TypedValue) List<TypedValue>.InsertRange(int, IEnumerable<TypedValue>) List<TypedValue>.LastIndexOf(TypedValue) List<TypedValue>.LastIndexOf(TypedValue, int) List<TypedValue>.LastIndexOf(TypedValue, int, int) List<TypedValue>.Remove(TypedValue) List<TypedValue>.RemoveAll(Predicate<TypedValue>) List<TypedValue>.RemoveAt(int) List<TypedValue>.RemoveRange(int, int) List<TypedValue>.Reverse() List<TypedValue>.Reverse(int, int) List<TypedValue>.Sort() List<TypedValue>.Sort(IComparer<TypedValue>) List<TypedValue>.Sort(int, int, IComparer<TypedValue>) List<TypedValue>.Sort(Comparison<TypedValue>) List<TypedValue>.ToArray() List<TypedValue>.TrimExcess() List<TypedValue>.TrueForAll(Predicate<TypedValue>) List<TypedValue>.Capacity List<TypedValue>.Count List<TypedValue>.this[int] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors XDataList() 扩展数据封装类 public XDataList() XDataList(IEnumerable<TypedValue>) 扩展数据封装类 public XDataList(IEnumerable<TypedValue> values) Parameters values IEnumerable<TypedValue> Methods Add(DxfCode, object) 添加数据 public void Add(DxfCode code, object obj) Parameters code DxfCode dxfcode枚举值 obj object 组码值 Add(int, object) 添加数据 public override void Add(int code, object obj) Parameters code int 组码 obj object 组码值 Contains(string) 是否含有注册名 public bool Contains(string appName) Parameters appName string 注册名 Returns bool Contains(string, object) 注册名下含有指定成员 public bool Contains(string appName, object value) Parameters appName string 注册名 value object 内容 Returns bool GetXdataAppIndex(string, DxfCode[]) 获取appName的索引区间 public List<int> GetXdataAppIndex(string appName, DxfCode[] dxfCodes) Parameters appName string 注册名称 dxfCodes DxfCode[] 任务组码对象 Returns List<int> 返回任务组码的索引 Operators implicit operator XDataList(ResultBuffer) ResultBuffer 隐式转换到 XDataList public static implicit operator XDataList(ResultBuffer buffer) Parameters buffer ResultBuffer ResultBuffer 实例 Returns XDataList implicit operator XDataList(TypedValue[]) TypedValue 数组隐式转换到 XDataList public static implicit operator XDataList(TypedValue[] values) Parameters values TypedValue[] TypedValue 数组 Returns XDataList implicit operator ResultBuffer(XDataList) XDataList 隐式转换到 ResultBuffer public static implicit operator ResultBuffer(XDataList values) Parameters values XDataList TypedValueList 实例 Returns ResultBuffer implicit operator TypedValue[](XDataList) XDataList 隐式转换到 TypedValue 数组 public static implicit operator TypedValue[](XDataList values) Parameters values XDataList TypedValueList 实例 Returns TypedValue[]"
  },
  "api/IFoxCAD.Cad.XRecordDataList.html": {
    "href": "api/IFoxCAD.Cad.XRecordDataList.html",
    "title": "Class XRecordDataList",
    "keywords": "Class XRecordDataList Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 扩展字典数据封装类 public class XRecordDataList : TypedValueList, IList<TypedValue>, ICollection<TypedValue>, IList, ICollection, IReadOnlyList<TypedValue>, IReadOnlyCollection<TypedValue>, IEnumerable<TypedValue>, IEnumerable Inheritance object List<TypedValue> TypedValueList XRecordDataList Implements IList<TypedValue> ICollection<TypedValue> IList ICollection IReadOnlyList<TypedValue> IReadOnlyCollection<TypedValue> IEnumerable<TypedValue> IEnumerable Inherited Members TypedValueList.ToString() List<TypedValue>.Add(TypedValue) List<TypedValue>.AddRange(IEnumerable<TypedValue>) List<TypedValue>.AsReadOnly() List<TypedValue>.BinarySearch(int, int, TypedValue, IComparer<TypedValue>) List<TypedValue>.BinarySearch(TypedValue) List<TypedValue>.BinarySearch(TypedValue, IComparer<TypedValue>) List<TypedValue>.Clear() List<TypedValue>.Contains(TypedValue) List<TypedValue>.ConvertAll<TOutput>(Converter<TypedValue, TOutput>) List<TypedValue>.CopyTo(TypedValue[]) List<TypedValue>.CopyTo(int, TypedValue[], int, int) List<TypedValue>.CopyTo(TypedValue[], int) List<TypedValue>.EnsureCapacity(int) List<TypedValue>.Exists(Predicate<TypedValue>) List<TypedValue>.Find(Predicate<TypedValue>) List<TypedValue>.FindAll(Predicate<TypedValue>) List<TypedValue>.FindIndex(Predicate<TypedValue>) List<TypedValue>.FindIndex(int, Predicate<TypedValue>) List<TypedValue>.FindIndex(int, int, Predicate<TypedValue>) List<TypedValue>.FindLast(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, Predicate<TypedValue>) List<TypedValue>.FindLastIndex(int, int, Predicate<TypedValue>) List<TypedValue>.ForEach(Action<TypedValue>) List<TypedValue>.GetEnumerator() List<TypedValue>.GetRange(int, int) List<TypedValue>.IndexOf(TypedValue) List<TypedValue>.IndexOf(TypedValue, int) List<TypedValue>.IndexOf(TypedValue, int, int) List<TypedValue>.Insert(int, TypedValue) List<TypedValue>.InsertRange(int, IEnumerable<TypedValue>) List<TypedValue>.LastIndexOf(TypedValue) List<TypedValue>.LastIndexOf(TypedValue, int) List<TypedValue>.LastIndexOf(TypedValue, int, int) List<TypedValue>.Remove(TypedValue) List<TypedValue>.RemoveAll(Predicate<TypedValue>) List<TypedValue>.RemoveAt(int) List<TypedValue>.RemoveRange(int, int) List<TypedValue>.Reverse() List<TypedValue>.Reverse(int, int) List<TypedValue>.Sort() List<TypedValue>.Sort(IComparer<TypedValue>) List<TypedValue>.Sort(int, int, IComparer<TypedValue>) List<TypedValue>.Sort(Comparison<TypedValue>) List<TypedValue>.ToArray() List<TypedValue>.TrimExcess() List<TypedValue>.TrueForAll(Predicate<TypedValue>) List<TypedValue>.Capacity List<TypedValue>.Count List<TypedValue>.this[int] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors XRecordDataList() 扩展字典数据封装类 public XRecordDataList() XRecordDataList(IEnumerable<TypedValue>) 扩展字典数据封装类 public XRecordDataList(IEnumerable<TypedValue> values) Parameters values IEnumerable<TypedValue> Methods Add(DxfCode, object) 添加数据 public void Add(DxfCode code, object obj) Parameters code DxfCode dxfcode枚举值 obj object 组码值 Add(int, object) 添加数据 public override void Add(int code, object obj) Parameters code int 组码 obj object 组码值 Operators implicit operator XRecordDataList(ResultBuffer) ResultBuffer 隐式转换到 XRecordDataList public static implicit operator XRecordDataList(ResultBuffer buffer) Parameters buffer ResultBuffer ResultBuffer 实例 Returns XRecordDataList implicit operator XRecordDataList(TypedValue[]) TypedValue 数组隐式转换到 XRecordDataList public static implicit operator XRecordDataList(TypedValue[] values) Parameters values TypedValue[] TypedValue 数组 Returns XRecordDataList implicit operator ResultBuffer(XRecordDataList) XRecordDataList 隐式转换到 ResultBuffer public static implicit operator ResultBuffer(XRecordDataList values) Parameters values XRecordDataList TypedValueList 实例 Returns ResultBuffer implicit operator TypedValue[](XRecordDataList) XRecordDataList 隐式转换到 TypedValue 数组 public static implicit operator TypedValue[](XRecordDataList values) Parameters values XRecordDataList TypedValueList 实例 Returns TypedValue[]"
  },
  "api/IFoxCAD.Cad.XrefEx.html": {
    "href": "api/IFoxCAD.Cad.XrefEx.html",
    "title": "Class XrefEx",
    "keywords": "Class XrefEx Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public static class XrefEx Inheritance object XrefEx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods XrefFactory(DBTrans, XrefModes, HashSet<string>?) 外部参照工厂 public static void XrefFactory(this DBTrans tr, XrefModes xrefModes, HashSet<string>? xrefNames = null) Parameters tr DBTrans xrefModes XrefModes 处理参照的枚举 xrefNames HashSet<string> 要处理的参照名称,null就处理所有"
  },
  "api/IFoxCAD.Cad.XrefFactory.html": {
    "href": "api/IFoxCAD.Cad.XrefFactory.html",
    "title": "Class XrefFactory",
    "keywords": "Class XrefFactory Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll public class XrefFactory : IXrefBindModes Inheritance object XrefFactory Implements IXrefBindModes Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors XrefFactory(DBTrans, HashSet<string>?) 参照工厂 public XrefFactory(DBTrans tr, HashSet<string>? xrefNames = null) Parameters tr DBTrans xrefNames HashSet<string> 要处理的参照名称,null就处理所有 Fields AutoDetach bind时候是否拆离参照 默认true:学官方的绑定后自动拆离 public bool AutoDetach Field Value bool BindOrInsert 绑定模式和双美元符号相关(与cad保持相同的默认) false为绑定模式,产生双美元; true为插入模式,块重名会以本图覆盖; public bool BindOrInsert Field Value bool DoNewOnly 解析外部参照:仅处理 Unresolved_未融入(未解析)的参照 默认true public bool DoNewOnly Field Value bool EraseNested bind时候是否删除被卸载的嵌套参照 默认true public bool EraseNested Field Value bool IncludeGhosts 解析外部参照:包含僵尸参照 public bool IncludeGhosts Field Value bool SymModesBind bind时候控制绑定的符号表:请保持默认 目前仅推荐用于LayerTable项 其他项有异常:eWasOpenForNotify public SymModes SymModesBind Field Value SymModes UseThreadEngine 解析外部参照:线性引擎 默认false true时会在cad命令历史打印一些AEC信息,并导致绑定慢一点...具体作用不详 public bool UseThreadEngine Field Value bool Methods Bind() 绑定 public void Bind() Detach() 拆离 public void Detach() Reload() 重载 public void Reload() Unload() 卸载 public void Unload()"
  },
  "api/IFoxCAD.Cad.XrefModes.html": {
    "href": "api/IFoxCAD.Cad.XrefModes.html",
    "title": "Enum XrefModes",
    "keywords": "Enum XrefModes Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 参照绑定 public enum XrefModes : byte Extension Methods ObjEx.Print(object) ObjEx.PrintLine(object) Fields Bind = 3 绑定 Detach = 2 拆离 Reload = 1 重载 Unload = 0 卸载"
  },
  "api/IFoxCAD.Cad.XrefPath.html": {
    "href": "api/IFoxCAD.Cad.XrefPath.html",
    "title": "Class XrefPath",
    "keywords": "Class XrefPath Namespace IFoxCAD.Cad Assembly IFox.CAD.ACAD.dll 获取外部参照的路径 public class XrefPath Inheritance object XrefPath Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods ArgumentNullEx.NotNull(object?, string) ObjEx.Print(object) ObjEx.PrintLine(object) Constructors XrefPath(BlockReference, DBTrans) 获取外部参照的路径 public XrefPath(BlockReference brf, DBTrans tr) Parameters brf BlockReference 外部参照图元 tr DBTrans 事务 Fields CurrentDatabasePath 基础路径 public string CurrentDatabasePath Field Value string Properties IsFromExternalReference 是否外部参照 public bool IsFromExternalReference { get; } Property Value bool PathComplete 绝对路径 public string? PathComplete { get; } Property Value string PathDescribe 找到的路径(参照面板的名称) PathSave路径不存在时,返回是外部参照dwg文件路径 public string? PathDescribe { get; } Property Value string PathRelative 相对路径 public string? PathRelative { get; } Property Value string PathSave 外部参照保存的路径 它们会是以下任一路径: 0x01 相对路径 0x02 绝对路径 0x03 共目录优先找到的路径(文件夹整体移动会发生此类情况) public string? PathSave { get; } Property Value string Methods PathConverter(string?, string?, PathConverterModes) 获取相对路径或者绝对路径 参考链接 public static string? PathConverter(string? directory, string? fileRelations, PathConverterModes converterModes) Parameters directory string 基础目录(末尾无斜杠) fileRelations string 相对路径或者绝对路径 converterModes PathConverterModes 依照枚举返回对应的字符串 Returns string"
  },
  "api/IFoxCAD.Cad.html": {
    "href": "api/IFoxCAD.Cad.html",
    "title": "Namespace IFoxCAD.Cad",
    "keywords": "Namespace IFoxCAD.Cad Classes AcadPeInfo AcadVersion cad版本号类 ArcEx 圆弧扩展类 AttachmentPointHelper 文字对齐点帮助类 AutoLoad 自动加载和初始化抽象类 AutoReflection 此类作为加载后cad自动运行接口的一部分,用于反射特性和接口 启动cad后的执行顺序为: 1:IFoxInitialize特性..(多个) 2:IFoxAutoGo接口..(多个) AutoRegAssem 注册中心 初始化程序集信息写入注册表并反射IFoxInitialize特性和IFoxAutoGo接口 启动cad后的执行顺序为: 1:AutoRegAssem程序集配置中心构造函数 2:IFoxInitialize特性..(多个) 3:IFoxAutoGo接口..(多个) BitmapTool bitmap工具类 BlockReferenceEx 块参照扩展类 BulgeVertexWidth 多段线的顶点,凸度,头宽,尾宽 CadVersion CAD版本 CheckFactory CircleEx 圆扩展类 ClipTool ClipboardEnv CollectionEx 集合扩展类 Curve2dEx 二维解析类曲线转换为二维实体曲线扩展类 Curve3dEx 三维解析类曲线转换为三维实体曲线扩展类 CurveEx 实体类曲线扩展类 DBDictionaryEx 字典扩展类 DBObjectEx 实体对象扩展类 DBObjectEx.UpgradeOpenManager 提权类 DBTextEx 单行文字扩展类 DBTrans 事务栈 隐匿事务在数据库其中担任的角色 DBTransEx DBmodEx DatabaseEx 数据库扩展函数 DepthFirst 深度优先搜索; DosHeader DOS文件都MS开始 DosStub DOS程序 提示 DwgMark 为dwg文件添加标记 EditorEx 命令行扩展类 Emf EmfTool EntityBoundingInfo EntityEx 实体图元扩展类 Env 系统管理类 封装了一些系统 osmode;cmdecho;dimblk 系统变量 封装了常用的 文档 编辑器 数据库等对象为静态变量 封装了配置页面的注册表信息获取函数 ExportDirectory 输出表 GeometryEx 图形扩展类 GetPeMethodException 错误信息 Graph 无权无向图实现 IEnumerable 枚举所有顶点; GraphEdge 无向图中边的定义 GraphVertex 邻接表图实现的顶点; IEnumerable 枚举所有邻接点; HatchConverter 填充边界转换器 HatchEx HatchInfo 图案填充 IFoxInitialize 加载时自动执行特性 IdleAction 空闲执行 by DYH 20230114 ImportDirectory 输入表 ImportDirectory.ImportDate ImportDirectory.ImportDate.FunctionList JigEx JigExTransient 瞬态容器 LispDottedPair lisp点对表的数据封装类 LispList lisp数据封装类 MTextEx 多行文字扩展类 ObjEx 对象扩展类 ObjectIdEx 对象id扩展类 OpAnd 逻辑与类 OpComp 比较运算符类 OpEqual 相等运算符类 OpFilter 选择集过滤器抽象类 OpFilter.Op 过滤器操作符类 OpList 逻辑操作符的列表抽象类 OpLogi 过滤器逻辑运算符抽象类 OpNot 逻辑非类 OpOr 逻辑或类 OpXor 逻辑异或类 OptionalDirAttrib 目录结构 OptionalDirAttrib.DirAttrib OptionalHeader PE头扩展 PEHeader PE文件头 PeFunction 通过名字查找exe/dll内所有名字 PeInfo 微软软件结构PE信息 PlaneEx 平面 PointEx PolylineEx 多段线扩展类 PostCmd QuadEntity 四叉树图元 QuadTreeEvn 四叉树环境变量 QuadTreeNode<TEntity> 子节点 QuadTree<TEntity> 根节点控制器 Rect RedrawEx ResourceDirectory 资源表 ResourceDirectory.DirectoryEntry ResourceDirectory.DirectoryEntry.DataEntry SectionTable 节表 SectionTable.SectionData SelectionSetEx 选择集扩展类 SingleKeyWordHook 关键字不需要空格钩子 By DYH 20230508 SymbolTableEx 符号表类扩展函数 SymbolTableRecordEx 符号表记录扩展类 SymbolTable<TTable, TRecord> 符号表管理类 TolerancePoint2d Linq Distinct 消重比较两点在容差范围内就去除 Tools TransactionEx cad的事务的扩展类 TypedValueList 用于集中管理扩展数据/扩展字典/resultbuffer的类 VectorEx XDataList 扩展数据封装类 XRecordDataList 扩展字典数据封装类 XrefEx XrefFactory XrefPath 获取外部参照的路径 Structs AssemInfo 程序集信息 BoundingInfo AABB和OBB信息 EnhMetaHeader MetaFilePict PlaceableMetaHeader StandardMetaRecord TagClipboardInfo ARX剪贴板结构 WindowsMetaHeader Interfaces IEdge 无向图边 IFoxAutoGo 加载时自动执行接口 IGraph 无向图 IGraphVertex 无向图顶点 IXrefBindModes Enums AcadPeEnum AssemLoadType 程序集加载类型 AutoRegConfig 注册中心配置信息 BitmapTool.TernaryRasterOperations A raster-operation code enum BrightEditor BrightEntity ClipboardFormat 剪贴板的CF,也就是它的key CollectionEx.KeywordName CoordinateSystemCode 坐标系类型枚举 DBmod 获取数据库修改状态 相关链接 EditorEx.RunLispFlag EmfTool.DeviceCap Env.DimblkType 标注箭头类型 Env.OSModeType 捕捉模式系统变量类型 FontTTF GetMethodErrorNum HatchInfo.GradientName 渐变色填充的图案名称 MappingModes OrientationType 方向的枚举 PathConverterModes 参照路径转换 PointOnRegionType 点与多边形的关系类型枚举 PostCmd.RunCmdFlag QuadTreeFindMode 四叉树查找方向 QuadTreeSelectMode 四叉树选择模式 Sequence 加载时优先级 SymModes XrefModes 参照绑定 Delegates QuadTree<TEntity>.QTAction 委托:四叉树节点上执行一个操作 WorldDrawEvent"
  },
  "api/System.Index.html": {
    "href": "api/System.Index.html",
    "title": "Struct Index",
    "keywords": "Struct Index Namespace System Assembly IFox.Basal.dll Represent a type can be used to index a collection either from the start or the end. public readonly struct Index : IEquatable<Index> Implements IEquatable<Index> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Remarks Index is used by the C# compiler to support the new index syntax int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ; int lastElement = someArray[^1]; // lastElement = 5 Constructors Index(int, bool) Construct an Index using a value and indicating if the index is from the start or from the end. public Index(int value, bool fromEnd = false) Parameters value int The index value. it has to be zero or positive number. fromEnd bool Indicating if the index is from the start or from the end. Remarks If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element. Properties End Create an Index pointing at beyond last element. public static Index End { get; } Property Value Index IsFromEnd Indicates whether the index is from the start or the end. public bool IsFromEnd { get; } Property Value bool Start Create an Index pointing at first element. public static Index Start { get; } Property Value Index Value Returns the index value. public int Value { get; } Property Value int Methods Equals(Index) Indicates whether the current Index object is equal to another Index object. public bool Equals(Index other) Parameters other Index An object to compare with this object Returns bool Equals(object?) Indicates whether the current Index object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool FromEnd(int) Create an Index from the end at the position indicated by the value. public static Index FromEnd(int value) Parameters value int The index value from the end. Returns Index FromStart(int) Create an Index from the start at the position indicated by the value. public static Index FromStart(int value) Parameters value int The index value from the start. Returns Index GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffset(int) Calculate the offset from the start using the giving collection length. public int GetOffset(int length) Parameters length int The length of the collection that the Index will be used with. length has to be a positive value Returns int Remarks For performance reason, we don't validate the input length parameter and the returned offset value against negative values. we don't validate either the returned offset is greater than the input length. It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and then used to index a collection will get out of range exception which will be same affect as the validation. ToString() Converts the value of the current Index object to its equivalent string representation. public override string ToString() Returns string Operators implicit operator Index(int) Converts integer number to an Index. public static implicit operator Index(int value) Parameters value int Returns Index"
  },
  "api/System.Range.html": {
    "href": "api/System.Range.html",
    "title": "Struct Range",
    "keywords": "Struct Range Namespace System Assembly IFox.Basal.dll Represent a range has start and end indexes. public readonly struct Range : IEquatable<Range> Implements IEquatable<Range> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods ArgumentNullEx.NotNull(object?, string) Remarks Range is used by the C# compiler to support the range syntax. int[] someArray = new int[5] { 1, 2, 3, 4, 5 }; int[] subArray1 = someArray[0..2]; // { 1, 2 } int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 } Constructors Range(Index, Index) Construct a Range object using the start and end indexes. public Range(Index start, Index end) Parameters start Index Represent the inclusive start index of the range. end Index Represent the exclusive end index of the range. Properties All Create a Range object starting from first element to the end. public static Range All { get; } Property Value Range End Represent the exclusive end index of the Range. public Index End { get; } Property Value Index Start Represent the inclusive start index of the Range. public Index Start { get; } Property Value Index Methods EndAt(Index) Create a Range object starting from first element in the collection to the end Index. public static Range EndAt(Index end) Parameters end Index Returns Range Equals(object?) Indicates whether the current Range object is equal to another object of the same type. public override bool Equals(object? value) Parameters value object An object to compare with this object Returns bool Equals(Range) Indicates whether the current Range object is equal to another Range object. public bool Equals(Range other) Parameters other Range An object to compare with this object Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int GetOffsetAndLength(int) Calculate the start offset and length of range object using a collection length. public (int Offset, int Length) GetOffsetAndLength(int length) Parameters length int The length of the collection that the range will be used with. length has to be a positive value. Returns (int Offset, int Length) Remarks For performance reason, we don't validate the input length parameter against negative values. It is expected Range will be used with collections which always have non negative length/count. We validate the range is inside the length scope though. StartAt(Index) Create a Range object starting from start index to the end of the collection. public static Range StartAt(Index start) Parameters start Index Returns Range ToString() Converts the value of the current Range object to its equivalent string representation. public override string ToString() Returns string"
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System",
    "keywords": "Namespace System Structs Index Represent a type can be used to index a collection either from the start or the end. Range Represent a range has start and end indexes."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "IFoxCAD API 文档",
    "keywords": "IFoxCAD API 文档 主要包括了ifox的各个类的说明。其中部分没有注释的文档是空的。"
  },
  "articles/DBTrans.html": {
    "href": "articles/DBTrans.html",
    "title": "事务管理器用法",
    "keywords": "事务管理器用法 事务管理器介绍 事务管理器是cad .net二次开发过程绕不过去的一个部分，只要是涉及到读写cad数据的地方几乎都推荐在事务里完成。利用事务管理器可以自动的在退出事务的时候执行释放对象等操作，防止程序员不能释放对象，造成cad崩溃。 但是，在日常的使用中，会发现每次开启事务，然后完成的都是差不多的任务，然后每次都要调用commit()函数，每次都要获取到符号表，每次要写模式，读模式等提权降级操作，但是这些操作其实都可以自动完成的，因此 ifoxcad 内裤提供事务管理器类来完成本来需要手工完成的工作，让用户可以更方便的处理事务内的程序。 用事务管理器类可以完成： 原生cad提供的事务管理器的全部操作 方便的符号表操作 方便的基础属性操作 方便的对象获取操作 方便的字典操作 事务管理器类的类名为：DBTrans。开启默认的事务管理器写法为： using (DBTrans tr = new DBTrans()) { .... } 原生的事务管理器操作 关于cad提供的原生事务管理器的操作不是本文档的重点，因为那操作起来麻烦，不够集中的将需要在事务内的操作做统一管理。 符号表操作 Ifoxcad 类库的符号表其实是一个符号表的泛型类，直接将符号表和符号表记录包装为一个整体。不用担心，在实际使用的过程中，你几乎不会关心符号表的构成原理。 Ifoxcad 类库里采用如下的符号来表示9大符号表。 符号表名 符号表含义 BlockTable 块表 LayerTable 图层表 DimStyleTable 标注样式表 LinetypeTable 线型表 RegAppTable 应用程序表 TextStyleTable 字体样式表 UcsTable 坐标系表 ViewportTable 视口表 ViewTable 视图表 然后怎么使用呢？使用符号表一共分几步呢？ using (DBTrans tr = new DBTrans()) // 第一步，开启事务 { var layerTable = tr.LayerTable;// 第二步，获取图层表 } // 事务结束并自动提交 上面是一个获取层表的例子，其他的符号表都是一样的写法，因为这些符号表都是事务管理器的属性。那么获取到符号表之后能做些什么？ 向符号表里添加元素 using (DBTrans tr = new DBTrans()) { // 第一步，开启事务 var layerTable = tr.LayerTable; // 第二步，获取图层表 layerTable.Add(\"1\");// 返回值为ObjectId // 第三步，向层表里添加一个元素，也就是新建一个图层。 } // 事务结束并自动提交 每个符号表都有Add函数，而且提供了不止一个重载函数。 添加和获取符号表里的元素 想要添加和获取符号表内的某个元素非常的简单： using (DBTrans tr = new DBTrans()) // 第一步，开启事务 { var layerTable = tr.LayerTable; // 第二步，获取图层表 layerTable.Add(\"1\"); // 第三步，添加名为“1”的图层，即新建图层 ObjectId id = layerTable[\"1\"]; // 第四步，获取图层“1”的id。 } // 事务结束并自动提交 每个符号表都提供了索引形式的获取元素id的写法。 线型表 // 两种方式 // 第一种，直接调用tr.LinetypeTable.Add(\"hah\")函数，然后对返回值ObjectId做具体的操作。 // 第二种，直接在Action委托里把相关的操作完成。 tr.LinetypeTable.Add( \"hah\", ltt => { ltt.AsciiDescription = \"虚线\"; ltt.PatternLength = 0.95; //线型的总长度 ltt.NumDashes = 4; //组成线型的笔画数目 ltt.SetDashLengthAt(0, 0.5); //0.5个单位的划线 ltt.SetDashLengthAt(1, -0.25); //0.25个单位的空格 ltt.SetDashLengthAt(2, 0); // 一个点 ltt.SetDashLengthAt(3, -0.25); //0.25个单位的空格 }); // 这段代码同时演示了 ifoxcad 类库关于符号表的public ObjectId Add(string name, Action<TRecord> action)这个函数的用法。 // 或者直接调用： tr.LinetypeTable.Add(\"hah\", \"虚线\",0.95,new double[]{0.5,-0.25,0,-0.25}); // 获取线型表 tr.LinetypeTable[\"hah\"]; 其他符号表的操作类同。如果类库没有提供的Add函数的重载，那么Action委托可以完成你想完成的所有事情。 基础属性操作 事务管理器类提供了Document、 Editor 、Database三个属性来在事务内部处理相关事项。 同时还提供了关于字典的相关属性。 对象获取操作 提供了1个泛型 GetObject<T>函数的重载来根据ObjectId来获取到对象。 字典操作(未完待续) 扩展字典 SetXRecord 保存扩展数据到字典 GetXRecord 获取扩展数据 对象字典 SetToDictionary 保存数据到字典 GetFromDictionary 从字典获取数据 GetSubDictionary 获取子对象字典"
  },
  "articles/SelectionFilter.html": {
    "href": "articles/SelectionFilter.html",
    "title": "选择集过滤器用法",
    "keywords": "选择集过滤器用法 选择集过滤器简介 桌子提供了选择集过滤器是为了更精确的选择对象。可以通过使用选择过滤器来限制哪些对象被选中并添加到选择集，选择过滤器列表通过属性或类型过滤所选对象。 在桌子的 .net api 中：选择过滤器由一对 TypedValue 参数构成。TypedValue 的第一个参数表明过滤器的类型（例如对象），第二个参数为要过滤的值（例如圆）。过滤器类型是一个 DXF 组码，用来指定使用哪种过滤器。 默认的使用桌子api来创建选择集（带过滤器）分三步： 创建一个TypedValue数组来定义过滤器条件 TypedValue[] acTypValAr = new TypedValue[1]; // 创建数组 acTypValAr.SetValue(new TypedValue((int)DxfCode.Start, \"CIRCLE\"), 0); // 添加一个过滤条件，例如选择圆 // 如果要创建多个过滤条件怎么办？ TypedValue[] acTypValAr = new TypedValue[3]; acTypValAr.SetValue(new TypedValue((int)DxfCode.Color, 5), 0); acTypValAr.SetValue(new TypedValue((int)DxfCode.Start, \"CIRCLE\"), 1); acTypValAr.SetValue(new TypedValue((int)DxfCode.LayerName, \"0\"), 2); // 实际上只要不停的往数组里添加条件就可以了 创建SelectionFilter对象 // 将过滤器条件赋值给 SelectionFilter 对象 SelectionFilter acSelFtr = new SelectionFilter(acTypValAr); 创建选择集 // 请求用户在图形区域选择对象 PromptSelectionResult acSSPrompt; acSSPrompt = acDocEd.GetSelection(acSelFtr); 看起来很是简单对不对，单个条件和多个条件的过滤非常简单。当指定多个选择条件时，AutoCAD 假设所选对象必须满足每个条件。我们还可以用另外一种方式定义过滤条件。对于数值项，可以使用关系运算（比如，圆的半径必须大于等于 5.0）。对于所有项，可以使用逻辑运算（比如单行文字或多行文字）。使用 DXF 组码-4 或常量 DxfCode.Operator 表示选择过滤器中的关系预算符类型。运算符本身用字符串表示。 比如： 过滤半径大于等于5.0的圆 TypedValue[] acTypValAr = { new TypedValue((int)DxfCode.Start, \"CIRCLE\"), new TypedValue((int)DxfCode.Operator, \">=\"), new TypedValue(40, 5) }; 过滤单行文本或者多行文本 TypedValue[] acTypValAr = { new TypedValue((int)DxfCode.Operator, \"<or\"), new TypedValue((int)DxfCode.Start, \"TEXT\"), new TypedValue((int)DxfCode.Start, \"MTEXT\"), new TypedValue((int)DxfCode.Operator, \"or>\") }; 更复杂的过滤条件呢？比如选择的对象为不是位于0图层的直线，或者位于2图层的组码10的x坐标>10,y坐标>10的非圆图元。 对应的lisp代码如下： '((-4 . \"<or\") (-4 . \"<not\") (-4 . \"<and\") (0 . \"line\") (8 . \"0\") (-4 . \"and>\") (-4 . \"not>\") (-4 . \"<and\") (-4 . \"<not\")(0 . \"circle\")(-4 . \"not>\") (8 . \"2\") (-4 . \">,>,*\")(10 10 10 0) (-4 . \"and>\") (-4 . \"or>\")) 对应的c#代码： TypedValue[] acTypValAr = { new TypedValue((int)DxfCode.Operator, \"<or\"), new TypedValue((int)DxfCode.Operator, \"<not\"), new TypedValue((int)DxfCode.Operator, \"<and\"), new TypedValue((int)DxfCode.Start, \"LINE\"), new TypedValue((int)DxfCode.LayerName, \"0\"), new TypedValue((int)DxfCode.Operator, \"and>\"), new TypedValue((int)DxfCode.Operator, \"not>\"), new TypedValue((int)DxfCode.Operator, \"<and\"), new TypedValue((int)DxfCode.Operator, \"<not\"), new TypedValue((int)DxfCode.Start, \"CIRCLE\"), new TypedValue((int)DxfCode.Operator, \"not>\"), new TypedValue((int)DxfCode.LayerName, \"2\"), new TypedValue((int)DxfCode.Operator, \">,>,*\"), new TypedValue(10, new Point3d(10,10,0)), new TypedValue((int)DxfCode.Operator, \"and>\"), new TypedValue((int)DxfCode.Operator, \"or>\") }; 这个过滤器是不是看起来很乱，一眼看去根本不知道是要过滤什么，写起来也很麻烦。所以说，虽然桌子提供了api，但是简单的过滤条件很好用，但是复杂的过滤条件就很复杂了。 因此IFox内裤提供了关于选择集过滤器的辅助类来帮助用户用更简单的方式来创建选择集的过滤器。 内裤过滤器对象与cad过滤器对应关系 IFoxCad内裤对于DxfCode.Operator枚举构建了一些辅助函数来表达关系运算和逻辑运算；提供了dxf函数来表达组码。其对应的关系如下表： 内裤过滤器对象、函数 cad .net api 过滤器对象、函数、枚举 备注 OpFilter SelectionFilter 隐式转换 OpOr \"<OR\" ... \"OR>\" Op.Or \"<OR\" ... \"OR>\" OpAnd \"<AND\"...\"AND>\" Op.And \"<AND\"...\"AND>\" OpNot \"<NOT\" ... \"NOT>\" OpXor \"<XOR\" ... \"XOR>\" OpEqual 相等运算 OpComp 比较运算符 Dxf() 组码函数 仅用于过滤器中，不是组码操作函数 ! \"<NOT\" ... \"NOT>\" == \"=\" != \"!=\" > \">\" < \"<\" >= \">=\" 或 \">,>,*\" \">,>,*\"用于跟point3d比较 <= \"<=\" 或 \"<,<,*\" \"<,<,*\"用于跟point3d比较 & \"<AND\"...\"AND>\" ^ \"<XOR\" ... \"XOR>\" | \"<OR\" ... \"OR>\" 具体用法 IFoxCad内裤提供了三种方式来构建过滤器，其实大同小异，就是写法不一样，用户可以根据自己的喜好来选择。 第一种 var fd = new OpOr //定义一个 (-4 . \"<or\")(...)(-4 . \"or>\") { !new OpAnd //定义(-4 . \"<not\")(-4 . \"<and\")(...)(-4 . \"and>\")(-4 . \"not>\") { { 0, \"line\" }, //{组码，组码值} { 8, \"0\" }, //{组码，组码值} }, new OpAnd //定义(-4 . \"<and\")(...)(-4 . \"and>\") { !new OpEqual(0, \"circle\"), //定义(-4 . \"<not\")(...)(-4 . \"not>\") { 8, \"2\" }, //{组码，组码值} { 10, new Point3d(10,10,0), \">,>,*\" } //(-4 . \">,>,*\")(10 10 10 0) }, }; editor.SelectAll(fd); //这里直接传入fd就可以了 以上代码的含义为：选择的对象为不是位于0图层的直线，或者位于2图层的组码10的x坐标>10,y坐标>10的非圆图元。其同含义的lisp代码如下： '((-4 . \"<or\") (-4 . \"<not\") (-4 . \"<and\") (0 . \"line\") (8 . \"0\") (-4 . \"and>\") (-4 . \"not>\") (-4 . \"<and\") (-4 . \"<not\")(0 . \"circle\")(-4 . \"not>\") (8 . \"2\") (-4 . \">,>,*\")(10 10 10 0) (-4 . \"and>\") (-4 . \"or>\")) 第二种 var p = new Point3d(10, 10, 0); var f = OpFilter.Bulid(e => !(e.Dxf(0) == \"line\" & e.Dxf(8) == \"0\") | e.Dxf(0) != \"circle\" & e.Dxf(8) == \"2\" & e.Dxf(10) >= p); editor.SelectAll(f); //这里直接传入f就可以了 代码含义如第一种。 第三种 var f2 = OpFilter.Bulid( e =>e.Or( !e.And(e.Dxf(0) == \"line\", e.Dxf(8) == \"0\"), e.And(e.Dxf(0) != \"circle\", e.Dxf(8) == \"2\", e.Dxf(10) >= new Point3d(10, 10, 0))) ); editor.SelectAll(f2); //这里直接传入f2就可以了 代码含义如第一种，第三种和第二种的写法非常像，区别就是关于 and 、or 、not 等运算符，一个是采用c#的语法，一个是采用定义的函数。and 与&等价，or与|等价，not 与！等价。"
  },
  "articles/SymbolTable.html": {
    "href": "articles/SymbolTable.html",
    "title": "符号表用法",
    "keywords": "符号表用法 每个图形文件都包含有9个固定的符号表。不能往数据库里添加新的符号表。如图层表（LayerTable），其中包含图层表记录，还有块表（BlockTable），其中包含块表记录等。所有的图形实体（线、圆、弧等等）都属于一个块表记录。缺省情况下，任何图形文件都包含为模型空间和图纸空间预定义的块表记录。每个符号表都有对应的符号表记录，可以理解为符号表是一个集合，而符号表记录是这个集合的元素。CAD的符号表和符号表记录的对应关系如下： 名称 符号表 符号表记录 块表 BlockTable BlockTableRecord 标注样式表 DimStyleTable DimStyleTableRecord 图层表 LayerTable LayerTableRecord 线型表 LinetypeTable LinetypeTableRecord 注册应用程序表 RegAppTable RegAppTableRecord 字体样式表 TextStyleTable TextStyleTableRecord 坐标系表 UcsTable UcsTableRecord 视口表 ViewportTable ViewportTableRecord 视图表 ViewTable ViewTableRecord 那么如何来操作这些符号表呢？下面是一个新建图层的例子： Document acDoc = Application.DocumentManager.MdiActiveDocument; Database acCurDb = acDoc.Database; using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction()) { // 返回当前数据库的图层表 LayerTable acLyrTbl = acTrans.GetObject(acCurDb.LayerTableId,OpenMode.ForRead) as LayerTable; // 检查图层表里是否有图层 MyLayer if (acLyrTbl.Has(\"MyLayer\") != true) { // 以写模式打开图层表 acLyrTbl.UpgradeOpen(); // 新创建一个图层表记录，并命名为”MyLayer” LayerTableRecord acLyrTblRec = new LayerTableRecord(); acLyrTblRec.Name = \"MyLayer\"; // 添加新的图层表记录到图层表，添加事务 acLyrTbl.Add(acLyrTblRec); acTrans.AddNewlyCreatedDBObject(acLyrTblRec, true); //提交修改 acTrans.Commit(); } // 关闭事务，回收内存； } 上面的例子用了20多行的代码来完成一个很简单的功能，这就是AutoCAD提供的api太过于基础，没有进行进一步的封装造成。那么如果我们单独为图层表封装一个函数来处理图层表，其他的8个符号表也要同样的各自封装函数，这样看起来没什么问题，但是对于代码的复用却没有很好的考虑进去。仔细思考一下，其实对于符号来说无非就是增删改三个主要的操作等，对于符号表记录来说无非就是一些属性的操作，增加实体的操作等。那么有没有一种办法可以统一管理9个符号表呢？其实AutoCAD提供了9个符号表和符号表记录的抽象基类，SymbolTable和SymbolTableRecord，但是这两个类提供的功能又很简单，只有寥寥几个函数和属性，完全不能满足我们的需求。因此ifoxcad内裤提供了符号表类来封装9个符号表的大部分功能。那么用内裤来完成上述的操作是什么样子的呢？见下面的例子： // 以下代码采用最新的c#版本语法 using var tr = new DBTrans(); // 打开事务 var layertable = tr.LayerTable.Add(\"MyLayer\"); //添加图层 同样的功能我们只需要两行就可以搞定了。那么有同学会问了，我同样单独对每个符号表的封装一样可以达到这个效果？是的，确实可以达到一样的效果，但是我只封装了一次，只是针对符号表的差异部分做了一些增量的处理，其他的代码都是复用的，而你要写9次。 言归正传，通过上述的例子，我们会发现几个现象： 符号表的操作是在事务内。 符号表成了事务的属性 添加符号表记录到符号表调用Add函数就可以了(其实提供了好多的重载，来完成不同的细粒度的操作)。 符号表的操作都在事务内，这样由事务统一管理符号表的变动，减少出错的可能。 符号表作为事务的属性，那么获取符号表记录就变成了属性的索引值。var layertable = tr.LayerTable[\"MyLayer\"]; 不管是什么符号表，都是一个Add函数搞定添加操作。 而删除就是：tr.LayerTable.Remove(\"1\"); 注意，这里的关于删除图层的操作需要调用Delete函数 看，我教会了你操作图层表，那么其他的8个表你都会了，都是一样的操作。 块表添加图元 一般的情况下，添加图元的操作都是要在事务里完成。目前大部分的添加图元的自定义函数都是DataBase或Editor对象的扩展函数。但是实际上添加图元的本质是读写图形数据库，具体的手段是对块表里的块表记录的读写。而实际的操作其实都是在事务里完成，所以符合cad操作规则的写法其实应该是事务作为一系列操作的主体来进行。因此ifoxcad内裤的封装思路为：扩展块表记录的函数，在事务管理器类里通过属性调用AddEntity函数来添加图元。 对于这个添加图元的操作，一共分为如下几步： 创建图元对象，可以在事务外创建，也可以在事务内创建。 打开要添加图元的块表记录，在事务内打开。 添加图元到块表记录 下面看示例： 添加图元到当前空间 // 以下代码采用最新的c#版本语法 using var tr = new DBTrans(); //开启事务管理器 var line1 = new Line(new Point3d(0, 0, 0), new Point3d(1, 1, 0)); //定义一个直线 tr.CurrentSpace.AddEntity(line1); // 将直线添加到当前绘图空间的块表记录 添加图元到模型/图纸空间 // 以下代码采用最新的c#版本语法 using var tr = new DBTrans(); //开启事务管理器 var line1 = new Line(new Point3d(0, 0, 0), new Point3d(1, 1, 0)); //定义一个直线 tr.CurrentSpace.AddEntity(line1); // 将直线添加到当前绘图空间的块表记录 tr.ModelSpace.AddEntity(line1); // 将直线添加到当前模型空间的块表记录 tr.PaperSpace.AddEntity(line1); // 将直线添加到当前图纸空间的块表记录 添加图元到块表 // 以下代码采用最新的c#版本语法 using var tr = new DBTrans(); //开启事务管理器 var line1 = new Line(new Point3d(0, 0, 0), new Point3d(1, 1, 0)); //定义一个直线 var btr = tr.BlockTable.Add(\"test\"); //定义一个块表记录 btr.AddEntity(line1); // 将直线添加到当前控件的块表记录 那么大家猜一猜，这个添加到块表是实现了一种什么样的功能。 块表 块表这里需要特殊的说明一下： 比如说添加一个块，用如下代码： tr.BlockTable.Add(blockName, btr => btr.AddEntity(ents)); 这里的blockName就是块名，ents就是图元列表。这种方式虽然可以更细粒度的控制定义的块。 插入块参照，比如： tr.InsertBlock(point,objectid); // 用于插入块参照，提供了重载函数来满足不同的需求 其他函数的介绍 tr.BlockTable.GetRecord() 函数，可以获取到块表的块表记录，同理层表等符号表也有同样的函数。 tr.BlockTable.GetRecordFrom() 函数，可以从文件拷贝块表记录，同理层表等符号表也有同样的函数。 tr.BlockTable.GetBlockFrom() 函数，从文件拷贝块定义，同理层表等符号表也有同样用途的函数。 添加图元函数 内裤提供了一些便利的添加图元函数，可以不用先定义一个entity对象，然后添加到块表记录。 using var tr = new DBTrans(); tr.CurrentSpace.AddLine(new Point3d(0,0,0),new Point3d(1,1,0)); tr.CurrentSpace.AddCircle(new Point3d(0,0,0),10);"
  },
  "articles/WPF.html": {
    "href": "articles/WPF.html",
    "title": "WPF支持",
    "keywords": "WPF支持 在项目文件里将<Project Sdk=\"Microsoft.NET.Sdk\">替换为<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">。 在<PropertyGroup></PropertyGroup>标签里的<TargetFrameworks>NET45</TargetFrameworks>下面添加: <UseWpf>true</UseWpf> <UseWindowsForms>true</UseWindowsForms> 最后的项目文件如下： <Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\"> <PropertyGroup> <TargetFramework>net47</TargetFramework> <!-- 支持wpf --> <UseWpf>true</UseWpf> <!-- 支持winform --> <UseWindowsForms>true</UseWindowsForms> </PropertyGroup> <!--...其他代码--> </Project> mvvm模式支持 一、简单mvvm的实现 使用WPF的最佳实践就是采用mvvm模式，为了支持在cad插件里使用mvvm，ifoxcad内裤定义了两个简单基类来完成属性通知和命令定义。当然这是一种及其简单的mvvm模式的支持，你还要自己手动来写大部分的代码来实现完整的mvvm模式。 要实现mvvm模式，要新建一个XXXView文件，一个XXXViewModel文件。我们应该采用一种通用的命名约定，即所有的gui显示都有XXXView来完成，而所有的业务逻辑都由XXXViewModel来完成。下面以一个具体的示例来说明怎么在cad的插件里使用mvvm模式。 将我们上一节建立的MyWindow1文件改名为MyWindowView，然后将涉及到的类名也全部更改为MyWindowView。 然后将MyWindowView.xaml文件的内容改为： <Window x:Class=\"Test.MyWindowView\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:local=\"clr-namespace:Test\" mc:Ignorable=\"d\" Title=\"MyWindow1\" Height=\"450\" Width=\"800\"> <Grid> <StackPanel> <TextBox></TextBox> <Button>click</Button> </StackPanel> </Grid> </Window> 就是添加了一个文本框，一个按钮。 新建MyWindowViewModel.cs文件，内容如下： using IFoxCad.WPF; // 这里引入IFoxCad.WPF命名空间，以便可以使用ViewModelBase和RelayCommand namespace Test { class MyWindowViewModel : ViewModelBase { // 定义一个属性用于在文本框里显示 private string _name; public string Name { get { return _name; } set { Set(ref _name, value); } } // 定义一个命令用于按钮的点击动作 private RelayCommand clickCommand; public RelayCommand ClickCommand { get { if (clickCommand == null) { clickCommand = new RelayCommand( execute => Name = \"hello \" + Name, // 定义要执行的行为 can => {return !string.IsNullOrEmpty(Name);}); // 定义命令是否可用 } return clickCommand; } } // 初始化Name属性为 World public MyWindowViewModel() { Name = \"World\"; } } } 这里需要注意的是，定义的属性是为了将属性绑定到文本框的Text属性上，这个叫做数据绑定。然后wpf里对于我们winform里的事件其实采用的更高级一些的命令来完成。本示例，定义的命令也是一个属性，这个属性返回一个RelayCommand对象的实例，这是实例的初始化函数包括两个部分，一个是要执行的动作，第二个是确定什么条件下按钮是不可用的，这个是通过命令是否可用来完成，是要命令是不能执行的，wpf会自动将控件切换为不可用状态，使其不可点击。 现在回过头来对在xaml里将刚刚的viewmodel里定义的属性和命令绑定到控件上。 <TextBox Text=\"{Binding Name,UpdateSourceTrigger=PropertyChanged}\"></TextBox> <Button Command=\"{Binding ClickCommand}\">click</Button> 将这两行代码替换一下。然后在后台代码里(MyWindowView.xaml.cs)添加一行代码将viewmodel绑定到view上。 public MyWindowView() { InitializeComponent(); DataContext = new MyWindowViewModel(); //这里将一个viewmodel的实例绑定到view的DataContext属性上。 } 至此，一个简单的wpf的mvvm模式的代码就完成了，下面的代码演示了怎么在cad里显示这个wpf窗体。 [CommandMethod(\"test\")] public void Test() { var test = new MyWindowView(); Application.ShowModalWindow(test); } 最后，这个窗体的效果是，当你点击按钮时，文本框的文字前面会加上hello。当你将文本框的文字全部删除后，按钮会变成不可用状态。如果你在试验的时候没有这个效果，这是cad的延迟导致的。多删除几次试几次后就会如期运行。 二、mvvm中的事件处理 在WPF里，并不是所有的控件都提供了commad属性用于绑定命令，所以还是需要进行控件的事件处理的，比如窗口的Loaded事件，鼠标事件，键盘事件等。关于WPF的事件处理，IFoxCad内裤提供了两种方式进行处理，一种就是利用 Microsoft.Xaml.Behaviors.dll 这个类库，利用了 i:Interaction.Triggers 标签在xaml文件里将命令绑定到事件上，这种方式是网上比较常见的一种方式；第二种是自定义了一个xaml标签 eb:EventBinding ，利用这个标签将命令绑定到事件上。两种方式实现的效果是一样的，但是 eb:EventBinding 标签绑定的方式的代码量要小一些。 下面就两种方式实现同一种事件处理的效果提供了两种方式的代码示例作为说明。由于两种方式的差异主要在xaml文件里，ViewModel的代码是一样的。因此主要讲述两种xaml的差异部分，ViewModel的代码直接贴在下面不做讲解。 public class TestViewModel : ViewModelBase { private bool _IsReceiveMouseMove = true; public bool IsReceiveMouseMove { get { return _IsReceiveMouseMove; } set { Set(ref _IsReceiveMouseMove, value); } } private string _tipText; public string TipText { get { return _tipText; } set { Set(ref _tipText, value); } } private RelayCommand loadedCommand; public RelayCommand LoadedCommand { get { if (loadedCommand == null) { loadedCommand = new RelayCommand(execute => MessageBox.Show(\"程序加载完毕！\")); } return loadedCommand; } } private RelayCommand<MouseEventArgs> mouseMoveCommand; public RelayCommand<MouseEventArgs> MouseMoveCommand { get { if (mouseMoveCommand == null) { mouseMoveCommand = new RelayCommand<MouseEventArgs>( e => { var point = e.GetPosition(e.Device.Target); var left = \"左键放开\"; var mid = \"中键放开\"; var right = \"右键放开\"; if (e.LeftButton == MouseButtonState.Pressed) { left = \"左键放下\"; } if (e.MiddleButton == MouseButtonState.Pressed) { mid = \"中键放下\"; } if (e.RightButton == MouseButtonState.Pressed) { right = \"右键放下\"; } TipText = $\"当前鼠标位置 X:{point.X} Y:{point.Y} 当前鼠标状态：{left} {mid} {right}.\"; }, o => IsReceiveMouseMove); } return mouseMoveCommand; } } } 2.1 自定义标签的方式 首先是在xaml里引入命名空间。 xmlns:eb=\"clr-namespace:IFoxCAD.WPF;assembly=IFoxCAD.WPF\" 然后 Loaded=\"{eb:EventBinding Command=LoadedCommand}\" MouseMove=\"{eb:EventBinding Command=MouseMoveCommand,CommandParameter=$e}\" 这里要注意的是显式的传入了鼠标移动事件的参数。 注意命令参数部分，如果这个事件是带参数的，或者说这个命令是带参数的，要传入参数。 关于命令及命令参数使用方式如下： Command {eb:EventBinding} 利用简单的名字匹配来自动搜寻命令，也就是说不用指定命令名，不是很推荐。 {eb:EventBinding Command=CommandName} 指定命令名，建议总是使用这种方式 CommandParameter $e (事件参数，这里特指的是事件本身带的参数，也就是你以前写事件的处理函数时候的XXXXEventArgs e这个参数) $this or ​$this.Property (view本身或者属性) string (要传入的字符串) 完整的xaml代码如下： <Window x:Class=\"Test.TestView\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:local=\"clr-namespace:Test\" xmlns:eb=\"clr-namespace:IFoxCad.WPF;assembly=IFoxCad\" mc:Ignorable=\"d\" Title=\"TestView\" Height=\"450\" Width=\"800\" Loaded=\"{eb:EventBinding Command=LoadedCommand}\" MouseMove=\"{eb:EventBinding Command=MouseMoveCommand,CommandParameter=$e}\"> <DockPanel> <CheckBox Content=\"接收鼠标移动消息\" DockPanel.Dock=\"Top\" Margin=\"5\" VerticalAlignment=\"Center\" IsChecked=\"{Binding isReceiveMouseMove}\"/> <Label Content=\"{Binding TipText}\" Margin=\"5\"/> </DockPanel> </Window> 2.2 利用Behaviors的方式 首先nuget安装Microsoft.Xaml.Behaviors.Wpf包。 然后在xaml文件里，引入命名空间。 xmlns:eb=\"clr-namespace:IFoxCad.WPF;assembly=IFoxCad\" xmlns:i=\"http://schemas.microsoft.com/xaml/behaviors\" 然后绑定命令到事件上： <i:Interaction.Triggers> <i:EventTrigger EventName=\"Loaded\"> <i:InvokeCommandAction Command=\"{Binding LoadedCommand}\"/> </i:EventTrigger> <i:EventTrigger EventName=\"MouseMove\"> <eb:EventCommand Command=\"{Binding MouseMoveCommand}\"/> </i:EventTrigger> </i:Interaction.Triggers> 细心的同学可能会发现绑定命令的地方标签是不一样的。 i:InvokeCommandAction 这个标签是由 Microsoft.Xaml.Behaviors.Wpf 包提供的。 eb:EventCommand 这个标签是由IFoxCad内裤提供的。 两者的区别就是InvokeCommandAction 是不能传入事件的参数的，所以为了处理事件参数自定义了EventCommand。就如同上面的鼠标移动事件，是有时间参数要处理的，所以用了自定义的EventCommand，虽然xaml文件里没有显式的传入这个参数。 虽然InvokeCommandAction这个标签的后面是可以带命令参数的，比如： <i:Interaction.Triggers> <i:EventTrigger EventName=\"ValueChanged\"> <i:InvokeCommandAction Command=\"{Binding MyCommand}\" CommandParameter=\"{Binding Text, ElementName=textBox}\"/> </i:EventTrigger> </i:Interaction.Triggers> 但是这个命令参数是不能处理事件自带的参数的 。 最后是完整的xaml代码： <Window x:Class=\"Test.TestView\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:local=\"clr-namespace:Test\" xmlns:eb=\"clr-namespace:IFoxCad.WPF;assembly=IFoxCad\" xmlns:i=\"http://schemas.microsoft.com/xaml/behaviors\" mc:Ignorable=\"d\" Title=\"TestView\" Height=\"450\" Width=\"800\"> <i:Interaction.Triggers> <i:EventTrigger EventName=\"Loaded\"> <i:InvokeCommandAction Command=\"{Binding LoadedCommand}\"/> </i:EventTrigger> <i:EventTrigger EventName=\"MouseMove\"> <eb:EventCommand Command=\"{Binding MouseMoveCommand}\"/> </i:EventTrigger> </i:Interaction.Triggers> <DockPanel> <CheckBox Content=\"接收鼠标移动消息\" DockPanel.Dock=\"Top\" Margin=\"5\" VerticalAlignment=\"Center\" IsChecked=\"{Binding isReceiveMouseMove}\"/> <Label Content=\"{Binding TipText}\" Margin=\"5\"/> </DockPanel> </Window> 2.3 关于两种方式的选择 送给选择困难症的：如果可以选择自定义标签的方式，简单一些。遇到问题解决不了，就用behaviors的方式，网上的资源丰富一些，也许能找到你的答案。 三、 关于mvvm模式的建议 我们并不推荐严格的mvvm模式，主要原因是要引入比如message模式等方式处理类似窗口关闭，窗口间通信等问题。鉴于cad插件的界面复杂程度还没到后台事件满天飞，逻辑复杂的地步，因此后台写点事件处理，界面和后逻辑混在一起也未尝不可。 仅仅是建议，你爱怎样就怎样。"
  },
  "articles/autoreg.html": {
    "href": "articles/autoreg.html",
    "title": "自动加载与初始化",
    "keywords": "自动加载与初始化 1、简单版 为了将程序集的初始化和通过写注册表的方式实现自动加载统一设置，减少每次重复的工作量，类裤提供了AutoLoad抽象类来完成此功能，只要在需要初始化的类继承AutoLoad类，然后实现Initialize() 和 Terminate() 两个函数就可以了。 特别强调的是，一个程序集里只能有一个类继承，不管是不是同一个命名空间。 如果要将dll的目录加入支持文件目录，请在 Initialize 函数中调用AppendSupportPath(CurrentDirectory.FullName); 其他需要初始化执行的函数及设置都需要在 Initialize 函数中执行。 2、功能版 使用特性进行分段初始化是目前最佳选择，下面的说明已和最新版本不符，等待修正吧。 using Autodesk.AutoCAD.Runtime; using IFoxCAD.Cad; using System; using System.Reflection; /* * 自动执行接口 * 这里必须要实现一次这个接口,才能使用 IFoxInitialize 特性进行自动执行 */ public class CmdINI : AutoRegAssem { // 这里可以写任何普通的函数，也可以写下面 AutoTest 类里的实现了 IFoxInitialize 特性的初始化函数 // 继承AutoRegAssem的主要作用是写注册表用来自动加载dll，同时执行实现了 IFoxInitialize 特性的函数 // 注意这里的自动执行是在cad启动后，加载了dll之后执行，而不是运行命令后执行。 [IFoxInitialize] public void InitOne() { // TODO 您想在加载dll之后自动执行的函数 // 可以随便在哪里类里 可以多次实现 IFoxInitialize 特性 } } // 其他的类中的函数: // 实现自动接口之后,在任意一个函数上面使用此特性,减少每次改动 CmdINI 类 public class AutoTest { [IFoxInitialize] public void Initialize() { // TODO 您想在加载dll之后自动执行的函数 } [IFoxInitialize] public void InitTwo() { // TODO 您想在加载dll之后自动执行的函数 // 可以随便在哪里类里 可以多次实现 IFoxInitialize 特性 } [IFoxInitialize(isInitialize: false)] // 特性的参数为false的时候就表示卸载时执行的函数 public void Terminate() { // TODO 您想在关闭cad时自动执行的函数 } }"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "IFoxCAD 说明",
    "keywords": "IFoxCAD 说明 基于.NET的Cad二次开发类库。 一、项目来源 起初 雪山飞狐（又狐哥） 在明经论坛发布了开源库，后来狐哥自己的项目进行了极大的丰富后形成NFox类库。然后 落魄山人 在征得 雪山飞狐的同意后，对NFox类库进行了整理，增加了注释等，重新发布了NFox类库。 后来，经过一段时间的更新后，由于莫名其妙的原因NFox类库挂掉了。而这时山人同学已经基本吃透NFox类库，考虑到NFox的封装过于复杂，遂进行了重构。 重构的类库命名为IFoxCAD， 寓意为：I(爱)Fox(狐哥)，本项目发布于Inspire Function（中文名：跃动方程） 组织下，感谢 小轩轩 给起的名字。 可以加qq群交流： 718996771 QQ群为丐群，所以也可以加入qq频道交流： 点击链接加入QQ频道【CAD二次开发】 二、 使用帮助 IFoxCAD的项目文档请看 IFoxCAD类库从入门到精通。 三、IFoxCad 项目模版 目前由于IFoxCad的版本主要为0.7大版本，0.5、0.6、版本同时已不在更新，为老版本的用户可以继续使用，所以项目模版分为两个主要的版本： vs模版插件 （适用于0.5版本） net项目模版 （适用于0.6、0.7版本） 建议使用net项目模版来创建项目，具体的区别可以去上面的文档里查看 4.4 IFoxCad 项目模版 四、使用IFoxCad的几种方式 目前IFoxCad的几种使用方式： 4.5 使用IFoxCad的几种方式"
  },
  "articles/关于IFoxCAD的架构说明.html": {
    "href": "articles/关于IFoxCAD的架构说明.html",
    "title": "IFoxCAD的架构说明",
    "keywords": "IFoxCAD的架构说明 AutoCAD 的 .net api 的架构是如下这样的： Application 对象 graph LR; a(Application)-->DocumentManager a-->DocumentWindowCollection a-->InfoCenter a-->MainWindow a-->MenuBar a-->MenuGroups a-->Preferences a-->Publisher a-->StatusBar a-->UserConfigurationManager Document 对象 graph LR; Application-->DocumentManager-->b[Document] b-->Database b-->Editor b-->GraphicsManager b-->StatusBar b-->TransactionManager b-->UserData b-->Window Database 对象 flowchart TB; subgraph NamedDictionaris direction TB Layout-Dictionary-->Object Others-->OtherObject end subgraph Tables direction TB BlockTable-->BlockTableRecord-->Entity OthersTable-->OthersTableRecord end Application-->DocumentManager-->Document-->d[Database]-->Tables d-->NamedDictionaris Transation 对象 flowchart LR; subgraph Transation direction LR f(StartTransation)--modify objects-->e{isOK} e--Yes-->h(commit) e--No-->abort end h--write-->d[Database] g[Document or Database]--start-->f IFoxCAD是基于NFOX类库的重制版，主要是提供一个最小化的内核，即DBTrans、SymbolTable、ResultData、SelectFilter等基础类，其他的功能都通过扩展方法的方式来实现。 其重制的原因在于原NFOX类库的封装过于厚重，初学者理解起来困难，重制版希望做到最小化的内核，方便理解，然后丰富的扩展函数来实现大量的功能，便于学着现有的教程中那套基于Database扩展函数封装思路的初学者快速的入门。 一、组织结构图 IFoxCAD IFoxCAD.Basal - cad以外常用的类库 LinqEx - linq扩展类 LoopList - 环链表 IFoxCAD.Cad - cad相关的类库 Runtime - 包含系统级别的功能 AcadVersion - cad版本号类 AssemInfo - 程序集信息 AutoRegAssem - 程序集加载类型 DBTrans - 事务处理类 Env - 系统管理类 SymbolTable - 符号表类 ExtensionMethod - 扩展函数，以Ex结尾 SymbolTableEx - 符号表扩展类 SymbolTableRecordEx - 符号表记录扩展类 EntityEx - 实体扩展类 。。。。。。 ResultData 待补充。。。 SelectionFilter 待补充。。。 IFoxCAD.WPF - wpf的mvvm模式相关的类库 二、关于DBTrans类的说明 2.1 为什么要构建DBTrans类？ 主要是为封装cad的Transaction类的，为何如此封装有如下原因： 虽然可以继承Transaction类，但是由于其构造函数为受保护的，同时其参数不能很方便的传递，所以即便cad在使用的时候也是调用TransactionManager的StartTransaction方法，所以直接继承Transaction类进行扩展并不方便。 由于cad实体图元和非实体图元几乎都存储在数据库里，也就是Database里，所以目前市面上的教程基本都是基于Database的扩展函数进行封装。但是cad本身其实推荐的都是利用事务（Transaction）来对数据库进行增删改的操作，但是默认的Transaction类仅仅提供了几个方法，每次操作数据库或者修改图元都需要手动进行大量的重复性操作，这部分操作几乎都被封装为函数活跃于每个重复的轮子里。那么狐哥转变思路，继续不考虑数据库的操作而是延续cad的思路，着重封装关于Transaction的操作。 想到再说。。。 2.2 关于DBTrans类的具体构成元素的意义 DBTrans类里基本的封装就是Transaction，然后是Document、Database、Editor、符号表、命名字典等，而这些其实都是cad二次开发关于图元操作经常打交道的概念。 DBTrans的每个实例都具有这些属性，而这些属性就对应于cad的相关类库，通过这些属性就可以对数据进行相应的操作。特别是符号表中最常用的就是块表，通过对块表的操作来实现添加图元等。 2.3 DBTrans类应该具有的成员 为了尽量少的封装方法，减少类的复杂度，目前计划的方法主要为： 属性: Top ---返回当前事务 Database ---数据库 Document ---文档 Editor ---命令行 Trans ---事务管理器 构造函数: DBTrans(Document doc = null, bool commit = true) DBTrans(Database database, bool commit = true) DBTrans(string fileName, bool commit = true) 符号表: BlockTable 块表 LayerTable 层表 TextStyleTable 文字样式表 RegAppTable 注册应用程序表 DimStyleTable 标注样式表 LinetypeTable 线型表 UcsTable 用户坐标系表 ViewTable 视图表 ViewportTable 视口表 方法: GetObject ---根据对象id获取图元对象 。。。 接口: Abort ---放弃事务 Commit ---提交事务 Dispose --- 执行与释放非托管资源 三、 关于SymbolTable类的说明 3.1 为什么要构建SymbolTable类 主要是为了统一处理9个符号表，具体原因如下： 其实cad的api对于符号表都是继承自SymbolTable类，符号表记录都是继承自SymbolTableRecord类，所以其实这个自定义的类叫SymbolTable是和cad的内部api有命名上的冲突的，希望给我给个贴近自定义的理念的类名。 cad的默认api关于符号表和符号表记录是隔离关系的，就是说符号表和符号表记录在api上是没有关系的，只是数据库里每个符号都映射着相应的符号表记录，所以为了对应符号表和符号表记录，写了SymbolTable类。 通过这个类，就可以统一的处理符号表和符号表记录了，比如层表的处理就从原来首先获取层表对象->新建层表记录对象->打开层表的写模式->添加层表记录，变成新建层表的关联类实例->添加层表记录。 有了这个类，DBTrans类就可以直接通过属性获取符号表的关联关系，然后进行符号表的处理。 3.2 SymbolTable类应该具有的成员 属性: CurrentSymbolTable ---当前的符号表对象 方法: this ---索引器符号表记录函数 Add ---添加符号表记录函数 Remove --- 删除符号表记录函数(层表请使用扩展方法Delete) Change --- 修改符号表记录函数 GetRecord --- 获取符号表记录 GetRecordFrom --- 从源数据库拷贝符号表记录 Has --- 判断符号表是否有符号表记录的函数 。。。 特殊说明：当符号表为块表时，上述函数实际操作的是块定义、属性定义等。所以为了添加图元，需要特殊写法，原因在于cad的实体都是存在符号表记录里的，通常为模型这个块表记录。 慢慢完善，想到哪写到哪。。。"
  },
  "articles/关于扩展函数的说明.html": {
    "href": "articles/关于扩展函数的说明.html",
    "title": "关于扩展函数的说明",
    "keywords": "关于扩展函数的说明 一、命名规则 扩展函数全部都放在 ExtensionMethod 文件夹里。 然后每个类别都需要分别建立一个以EX为结尾的文件。比如： DBObjectEx 实体对象扩展类 SymbolTableRecordEx 实体对象扩展类 EditorEx.cs 表示关于命令的扩展"
  },
  "index.html": {
    "href": "index.html",
    "title": "IFoxCAD",
    "keywords": "IFoxCAD 欢迎使用 IFoxCAD，希望你能愉快的使用ifox进行编程。 本文档包含了ifox的一些简单说明和api文档。 欢迎在使用过程中发现问题并反馈。"
  }
}